{"ast":null,"code":"import React,{useRef,useMemo,useState,useCallback}from'react';import{Canvas,useFrame}from'@react-three/fiber';import{OrbitControls,Environment}from'@react-three/drei';import*as THREE from'three';// Individual cube piece component with proper multi-colored faces\nimport{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";function CubePiece(_ref){let{position,colors,size=0.95}=_ref;const meshRef=useRef();const colorMap={'white':'#ffffff','yellow':'#ffff00','red':'#ff0000','orange':'#ff6600','blue':'#0066ff','green':'#00ff00','black':'#1a1a1a'};// Create individual face geometries for each side\nconst faceSize=size/2;const faceGeometry=useMemo(()=>new THREE.PlaneGeometry(size,size),[size]);// Face positions and rotations for a cube\nconst faces=[{position:[0,0,size/2],rotation:[0,0,0],color:colors[0]},// Front\n{position:[0,0,-size/2],rotation:[0,Math.PI,0],color:colors[1]},// Back\n{position:[size/2,0,0],rotation:[0,Math.PI/2,0],color:colors[2]},// Right\n{position:[-size/2,0,0],rotation:[0,-Math.PI/2,0],color:colors[3]},// Left\n{position:[0,size/2,0],rotation:[-Math.PI/2,0,0],color:colors[4]},// Top\n{position:[0,-size/2,0],rotation:[Math.PI/2,0,0],color:colors[5]}// Bottom\n];return/*#__PURE__*/_jsx(\"group\",{ref:meshRef,position:position,children:faces.map((face,index)=>/*#__PURE__*/_jsxs(\"mesh\",{position:face.position,rotation:face.rotation,children:[/*#__PURE__*/_jsx(\"primitive\",{object:faceGeometry}),/*#__PURE__*/_jsx(\"meshPhongMaterial\",{color:colorMap[face.color]||colorMap['black'],side:THREE.DoubleSide,shininess:30,specular:0x444444})]},index))});}// Cube state management and rotation logic\nfunction useCubeState(){const[cubeState,setCubeState]=useState(()=>{// Initialize solved cube state\nconst state=[];for(let x=-1;x<=1;x++){for(let y=-1;y<=1;y++){for(let z=-1;z<=1;z++){const position=[x,y,z];const colors=['black','black','black','black','black','black'];// Assign colors based on position\nif(z===1)colors[0]='white';// Front\nif(z===-1)colors[1]='yellow';// Back\nif(x===1)colors[2]='red';// Right\nif(x===-1)colors[3]='orange';// Left\nif(y===1)colors[4]='blue';// Top\nif(y===-1)colors[5]='green';// Bottom\nstate.push({position:[...position],colors:[...colors]});}}}return state;});const[isAnimating,setIsAnimating]=useState(false);const[animationQueue,setAnimationQueue]=useState([]);// Rotation functions for each face\nconst rotateFace=useCallback((face,direction)=>{if(isAnimating)return;setIsAnimating(true);const newState=[...cubeState];// Define which pieces belong to each face\nconst facePieces={'F':newState.filter(p=>p.position[2]===1),// Front face\n'B':newState.filter(p=>p.position[2]===-1),// Back face\n'R':newState.filter(p=>p.position[0]===1),// Right face\n'L':newState.filter(p=>p.position[0]===-1),// Left face\n'U':newState.filter(p=>p.position[1]===1),// Up face\n'D':newState.filter(p=>p.position[1]===-1)// Down face\n};const pieces=facePieces[face];if(!pieces)return;// Apply rotation based on face and direction\npieces.forEach(piece=>{const[x,y,z]=piece.position;let newX=x,newY=y,newZ=z;switch(face){case'F':// Front face rotation\nif(direction==='clockwise'){newX=-y;newY=x;}else{newX=y;newY=-x;}break;case'B':// Back face rotation\nif(direction==='clockwise'){newX=y;newY=-x;}else{newX=-y;newY=x;}break;case'R':// Right face rotation\nif(direction==='clockwise'){newZ=-y;newY=z;}else{newZ=y;newY=-z;}break;case'L':// Left face rotation\nif(direction==='clockwise'){newZ=y;newY=-z;}else{newZ=-y;newY=z;}break;case'U':// Up face rotation\nif(direction==='clockwise'){newX=z;newZ=-x;}else{newX=-z;newZ=x;}break;case'D':// Down face rotation\nif(direction==='clockwise'){newX=-z;newZ=x;}else{newX=z;newZ=-x;}break;}piece.position=[newX,newY,newZ];// Rotate colors based on face rotation\nconst tempColors=[...piece.colors];if(face==='F'||face==='B'){if(direction==='clockwise'){piece.colors=[tempColors[3],tempColors[2],tempColors[0],tempColors[1],tempColors[4],tempColors[5]];}else{piece.colors=[tempColors[2],tempColors[3],tempColors[1],tempColors[0],tempColors[4],tempColors[5]];}}else if(face==='R'||face==='L'){if(direction==='clockwise'){piece.colors=[tempColors[4],tempColors[5],tempColors[2],tempColors[3],tempColors[1],tempColors[0]];}else{piece.colors=[tempColors[5],tempColors[4],tempColors[2],tempColors[3],tempColors[0],tempColors[1]];}}else if(face==='U'||face==='D'){if(direction==='clockwise'){piece.colors=[tempColors[3],tempColors[2],tempColors[4],tempColors[5],tempColors[1],tempColors[0]];}else{piece.colors=[tempColors[2],tempColors[3],tempColors[5],tempColors[4],tempColors[0],tempColors[1]];}}});setCubeState(newState);// Animation delay\nsetTimeout(()=>setIsAnimating(false),300);},[cubeState,isAnimating]);// Scramble function using standard notation\nconst scramble=useCallback(()=>{if(isAnimating)return;const moves=['F','B','R','L','U','D'];const directions=['clockwise','counterclockwise'];const scrambleLength=20;let currentQueue=[];for(let i=0;i<scrambleLength;i++){const move=moves[Math.floor(Math.random()*moves.length)];const direction=directions[Math.floor(Math.random()*directions.length)];currentQueue.push({move,direction});}setAnimationQueue(currentQueue);executeScramble(currentQueue);},[isAnimating]);const executeScramble=useCallback(queue=>{if(queue.length===0)return;const{move,direction}=queue[0];rotateFace(move,direction);setTimeout(()=>{executeScramble(queue.slice(1));},350);},[rotateFace]);// Reset function\nconst reset=useCallback(()=>{if(isAnimating)return;setCubeState(()=>{const state=[];for(let x=-1;x<=1;x++){for(let y=-1;y<=1;y++){for(let z=-1;z<=1;z++){const position=[x,y,z];const colors=['black','black','black','black','black','black'];if(z===1)colors[0]='white';if(z===-1)colors[1]='yellow';if(x===1)colors[2]='red';if(x===-1)colors[3]='orange';if(y===1)colors[4]='blue';if(y===-1)colors[5]='green';state.push({position:[...position],colors:[...colors]});}}}return state;});},[isAnimating]);return{cubeState,isAnimating,rotateFace,scramble,reset};}// Main cube group component with enhanced structure\nfunction CubeGroup(_ref2){let{isRotating,autoRotate=false,onScramble,onReset}=_ref2;const groupRef=useRef();const[rotationSpeed]=useState({x:0.005,y:0.01});const{cubeState,isAnimating,rotateFace,scramble,reset}=useCubeState();// Expose functions to parent\nReact.useEffect(()=>{if(onScramble)onScramble(scramble);if(onReset)onReset(reset);},[onScramble,onReset,scramble,reset]);useFrame(state=>{if(autoRotate&&groupRef.current&&!isAnimating){groupRef.current.rotation.y+=rotationSpeed.y;groupRef.current.rotation.x+=rotationSpeed.x;}});return/*#__PURE__*/_jsx(\"group\",{ref:groupRef,children:cubeState.map((piece,index)=>/*#__PURE__*/_jsx(CubePiece,{position:piece.position,colors:piece.colors},index))});}// Main Rubik's Cube component\nfunction RubiksCube(_ref3){let{isRotating,autoRotate=false,onScramble,onReset}=_ref3;return/*#__PURE__*/_jsxs(Canvas,{camera:{position:[6,6,6],fov:60},style:{width:'100%',height:'100%'},gl:{antialias:true,alpha:true},children:[/*#__PURE__*/_jsx(\"ambientLight\",{intensity:0.6}),/*#__PURE__*/_jsx(\"directionalLight\",{position:[10,10,5],intensity:1.5,castShadow:true,\"shadow-mapSize-width\":2048,\"shadow-mapSize-height\":2048}),/*#__PURE__*/_jsx(\"pointLight\",{position:[-10,-10,-5],intensity:1.0}),/*#__PURE__*/_jsx(\"spotLight\",{position:[0,10,0],angle:0.3,penumbra:1,intensity:0.8,castShadow:true}),/*#__PURE__*/_jsx(Environment,{preset:\"city\"}),/*#__PURE__*/_jsx(CubeGroup,{isRotating:isRotating,autoRotate:autoRotate,onScramble:onScramble,onReset:onReset}),/*#__PURE__*/_jsx(OrbitControls,{enablePan:true,enableZoom:true,enableRotate:true,autoRotate:false,autoRotateSpeed:1,minDistance:3,maxDistance:15,dampingFactor:0.05,enableDamping:true})]});}export default RubiksCube;","map":{"version":3,"names":["React","useRef","useMemo","useState","useCallback","Canvas","useFrame","OrbitControls","Environment","THREE","jsx","_jsx","jsxs","_jsxs","CubePiece","_ref","position","colors","size","meshRef","colorMap","faceSize","faceGeometry","PlaneGeometry","faces","rotation","color","Math","PI","ref","children","map","face","index","object","side","DoubleSide","shininess","specular","useCubeState","cubeState","setCubeState","state","x","y","z","push","isAnimating","setIsAnimating","animationQueue","setAnimationQueue","rotateFace","direction","newState","facePieces","filter","p","pieces","forEach","piece","newX","newY","newZ","tempColors","setTimeout","scramble","moves","directions","scrambleLength","currentQueue","i","move","floor","random","length","executeScramble","queue","slice","reset","CubeGroup","_ref2","isRotating","autoRotate","onScramble","onReset","groupRef","rotationSpeed","useEffect","current","RubiksCube","_ref3","camera","fov","style","width","height","gl","antialias","alpha","intensity","castShadow","angle","penumbra","preset","enablePan","enableZoom","enableRotate","autoRotateSpeed","minDistance","maxDistance","dampingFactor","enableDamping"],"sources":["C:/Repo/GitHub/rubiks-cube/src/components/RubiksCube.js"],"sourcesContent":["import React, { useRef, useMemo, useState, useCallback } from 'react';\r\nimport { Canvas, useFrame } from '@react-three/fiber';\r\nimport { OrbitControls, Environment } from '@react-three/drei';\r\nimport * as THREE from 'three';\r\n\r\n// Individual cube piece component with proper multi-colored faces\r\nfunction CubePiece({ position, colors, size = 0.95 }) {\r\n  const meshRef = useRef();\r\n  \r\n  const colorMap = {\r\n    'white': '#ffffff',\r\n    'yellow': '#ffff00',\r\n    'red': '#ff0000',\r\n    'orange': '#ff6600',\r\n    'blue': '#0066ff',\r\n    'green': '#00ff00',\r\n    'black': '#1a1a1a'\r\n  };\r\n\r\n  // Create individual face geometries for each side\r\n  const faceSize = size / 2;\r\n  const faceGeometry = useMemo(() => new THREE.PlaneGeometry(size, size), [size]);\r\n\r\n  // Face positions and rotations for a cube\r\n  const faces = [\r\n    { position: [0, 0, size/2], rotation: [0, 0, 0], color: colors[0] }, // Front\r\n    { position: [0, 0, -size/2], rotation: [0, Math.PI, 0], color: colors[1] }, // Back\r\n    { position: [size/2, 0, 0], rotation: [0, Math.PI/2, 0], color: colors[2] }, // Right\r\n    { position: [-size/2, 0, 0], rotation: [0, -Math.PI/2, 0], color: colors[3] }, // Left\r\n    { position: [0, size/2, 0], rotation: [-Math.PI/2, 0, 0], color: colors[4] }, // Top\r\n    { position: [0, -size/2, 0], rotation: [Math.PI/2, 0, 0], color: colors[5] }  // Bottom\r\n  ];\r\n\r\n  return (\r\n    <group ref={meshRef} position={position}>\r\n      {faces.map((face, index) => (\r\n        <mesh key={index} position={face.position} rotation={face.rotation}>\r\n          <primitive object={faceGeometry} />\r\n          <meshPhongMaterial \r\n            color={colorMap[face.color] || colorMap['black']}\r\n            side={THREE.DoubleSide}\r\n            shininess={30}\r\n            specular={0x444444}\r\n          />\r\n        </mesh>\r\n      ))}\r\n    </group>\r\n  );\r\n}\r\n\r\n// Cube state management and rotation logic\r\nfunction useCubeState() {\r\n  const [cubeState, setCubeState] = useState(() => {\r\n    // Initialize solved cube state\r\n    const state = [];\r\n    for (let x = -1; x <= 1; x++) {\r\n      for (let y = -1; y <= 1; y++) {\r\n        for (let z = -1; z <= 1; z++) {\r\n          const position = [x, y, z];\r\n          const colors = ['black', 'black', 'black', 'black', 'black', 'black'];\r\n          \r\n          // Assign colors based on position\r\n          if (z === 1) colors[0] = 'white'; // Front\r\n          if (z === -1) colors[1] = 'yellow'; // Back\r\n          if (x === 1) colors[2] = 'red'; // Right\r\n          if (x === -1) colors[3] = 'orange'; // Left\r\n          if (y === 1) colors[4] = 'blue'; // Top\r\n          if (y === -1) colors[5] = 'green'; // Bottom\r\n          \r\n          state.push({ position: [...position], colors: [...colors] });\r\n        }\r\n      }\r\n    }\r\n    return state;\r\n  });\r\n\r\n  const [isAnimating, setIsAnimating] = useState(false);\r\n  const [animationQueue, setAnimationQueue] = useState([]);\r\n\r\n  // Rotation functions for each face\r\n  const rotateFace = useCallback((face, direction) => {\r\n    if (isAnimating) return;\r\n    \r\n    setIsAnimating(true);\r\n    const newState = [...cubeState];\r\n    \r\n    // Define which pieces belong to each face\r\n    const facePieces = {\r\n      'F': newState.filter(p => p.position[2] === 1), // Front face\r\n      'B': newState.filter(p => p.position[2] === -1), // Back face\r\n      'R': newState.filter(p => p.position[0] === 1), // Right face\r\n      'L': newState.filter(p => p.position[0] === -1), // Left face\r\n      'U': newState.filter(p => p.position[1] === 1), // Up face\r\n      'D': newState.filter(p => p.position[1] === -1) // Down face\r\n    };\r\n\r\n    const pieces = facePieces[face];\r\n    if (!pieces) return;\r\n\r\n    // Apply rotation based on face and direction\r\n    pieces.forEach(piece => {\r\n      const [x, y, z] = piece.position;\r\n      let newX = x, newY = y, newZ = z;\r\n      \r\n      switch (face) {\r\n        case 'F': // Front face rotation\r\n          if (direction === 'clockwise') {\r\n            newX = -y;\r\n            newY = x;\r\n          } else {\r\n            newX = y;\r\n            newY = -x;\r\n          }\r\n          break;\r\n        case 'B': // Back face rotation\r\n          if (direction === 'clockwise') {\r\n            newX = y;\r\n            newY = -x;\r\n          } else {\r\n            newX = -y;\r\n            newY = x;\r\n          }\r\n          break;\r\n        case 'R': // Right face rotation\r\n          if (direction === 'clockwise') {\r\n            newZ = -y;\r\n            newY = z;\r\n          } else {\r\n            newZ = y;\r\n            newY = -z;\r\n          }\r\n          break;\r\n        case 'L': // Left face rotation\r\n          if (direction === 'clockwise') {\r\n            newZ = y;\r\n            newY = -z;\r\n          } else {\r\n            newZ = -y;\r\n            newY = z;\r\n          }\r\n          break;\r\n        case 'U': // Up face rotation\r\n          if (direction === 'clockwise') {\r\n            newX = z;\r\n            newZ = -x;\r\n          } else {\r\n            newX = -z;\r\n            newZ = x;\r\n          }\r\n          break;\r\n        case 'D': // Down face rotation\r\n          if (direction === 'clockwise') {\r\n            newX = -z;\r\n            newZ = x;\r\n          } else {\r\n            newX = z;\r\n            newZ = -x;\r\n          }\r\n          break;\r\n      }\r\n      \r\n      piece.position = [newX, newY, newZ];\r\n      \r\n      // Rotate colors based on face rotation\r\n      const tempColors = [...piece.colors];\r\n      if (face === 'F' || face === 'B') {\r\n        if (direction === 'clockwise') {\r\n          piece.colors = [tempColors[3], tempColors[2], tempColors[0], tempColors[1], tempColors[4], tempColors[5]];\r\n        } else {\r\n          piece.colors = [tempColors[2], tempColors[3], tempColors[1], tempColors[0], tempColors[4], tempColors[5]];\r\n        }\r\n      } else if (face === 'R' || face === 'L') {\r\n        if (direction === 'clockwise') {\r\n          piece.colors = [tempColors[4], tempColors[5], tempColors[2], tempColors[3], tempColors[1], tempColors[0]];\r\n        } else {\r\n          piece.colors = [tempColors[5], tempColors[4], tempColors[2], tempColors[3], tempColors[0], tempColors[1]];\r\n        }\r\n      } else if (face === 'U' || face === 'D') {\r\n        if (direction === 'clockwise') {\r\n          piece.colors = [tempColors[3], tempColors[2], tempColors[4], tempColors[5], tempColors[1], tempColors[0]];\r\n        } else {\r\n          piece.colors = [tempColors[2], tempColors[3], tempColors[5], tempColors[4], tempColors[0], tempColors[1]];\r\n        }\r\n      }\r\n    });\r\n\r\n    setCubeState(newState);\r\n    \r\n    // Animation delay\r\n    setTimeout(() => setIsAnimating(false), 300);\r\n  }, [cubeState, isAnimating]);\r\n\r\n  // Scramble function using standard notation\r\n  const scramble = useCallback(() => {\r\n    if (isAnimating) return;\r\n    \r\n    const moves = ['F', 'B', 'R', 'L', 'U', 'D'];\r\n    const directions = ['clockwise', 'counterclockwise'];\r\n    const scrambleLength = 20;\r\n    \r\n    let currentQueue = [];\r\n    \r\n    for (let i = 0; i < scrambleLength; i++) {\r\n      const move = moves[Math.floor(Math.random() * moves.length)];\r\n      const direction = directions[Math.floor(Math.random() * directions.length)];\r\n      currentQueue.push({ move, direction });\r\n    }\r\n    \r\n    setAnimationQueue(currentQueue);\r\n    executeScramble(currentQueue);\r\n  }, [isAnimating]);\r\n\r\n  const executeScramble = useCallback((queue) => {\r\n    if (queue.length === 0) return;\r\n    \r\n    const { move, direction } = queue[0];\r\n    rotateFace(move, direction);\r\n    \r\n    setTimeout(() => {\r\n      executeScramble(queue.slice(1));\r\n    }, 350);\r\n  }, [rotateFace]);\r\n\r\n  // Reset function\r\n  const reset = useCallback(() => {\r\n    if (isAnimating) return;\r\n    \r\n    setCubeState(() => {\r\n      const state = [];\r\n      for (let x = -1; x <= 1; x++) {\r\n        for (let y = -1; y <= 1; y++) {\r\n          for (let z = -1; z <= 1; z++) {\r\n            const position = [x, y, z];\r\n            const colors = ['black', 'black', 'black', 'black', 'black', 'black'];\r\n            \r\n            if (z === 1) colors[0] = 'white';\r\n            if (z === -1) colors[1] = 'yellow';\r\n            if (x === 1) colors[2] = 'red';\r\n            if (x === -1) colors[3] = 'orange';\r\n            if (y === 1) colors[4] = 'blue';\r\n            if (y === -1) colors[5] = 'green';\r\n            \r\n            state.push({ position: [...position], colors: [...colors] });\r\n          }\r\n        }\r\n      }\r\n      return state;\r\n    });\r\n  }, [isAnimating]);\r\n\r\n  return {\r\n    cubeState,\r\n    isAnimating,\r\n    rotateFace,\r\n    scramble,\r\n    reset\r\n  };\r\n}\r\n\r\n// Main cube group component with enhanced structure\r\nfunction CubeGroup({ isRotating, autoRotate = false, onScramble, onReset }) {\r\n  const groupRef = useRef();\r\n  const [rotationSpeed] = useState({ x: 0.005, y: 0.01 });\r\n  \r\n  const { cubeState, isAnimating, rotateFace, scramble, reset } = useCubeState();\r\n  \r\n  // Expose functions to parent\r\n  React.useEffect(() => {\r\n    if (onScramble) onScramble(scramble);\r\n    if (onReset) onReset(reset);\r\n  }, [onScramble, onReset, scramble, reset]);\r\n  \r\n  useFrame((state) => {\r\n    if (autoRotate && groupRef.current && !isAnimating) {\r\n      groupRef.current.rotation.y += rotationSpeed.y;\r\n      groupRef.current.rotation.x += rotationSpeed.x;\r\n    }\r\n  });\r\n\r\n  return (\r\n    <group ref={groupRef}>\r\n      {cubeState.map((piece, index) => (\r\n        <CubePiece\r\n          key={index}\r\n          position={piece.position}\r\n          colors={piece.colors}\r\n        />\r\n      ))}\r\n    </group>\r\n  );\r\n}\r\n\r\n// Main Rubik's Cube component\r\nfunction RubiksCube({ isRotating, autoRotate = false, onScramble, onReset }) {\r\n  return (\r\n    <Canvas\r\n      camera={{ position: [6, 6, 6], fov: 60 }}\r\n      style={{ width: '100%', height: '100%' }}\r\n      gl={{ antialias: true, alpha: true }}\r\n    >\r\n      {/* Enhanced Lighting */}\r\n      <ambientLight intensity={0.6} />\r\n      <directionalLight \r\n        position={[10, 10, 5]} \r\n        intensity={1.5}\r\n        castShadow\r\n        shadow-mapSize-width={2048}\r\n        shadow-mapSize-height={2048}\r\n      />\r\n      <pointLight position={[-10, -10, -5]} intensity={1.0} />\r\n      <spotLight\r\n        position={[0, 10, 0]}\r\n        angle={0.3}\r\n        penumbra={1}\r\n        intensity={0.8}\r\n        castShadow\r\n      />\r\n      \r\n      {/* Environment */}\r\n      <Environment preset=\"city\" />\r\n      \r\n      {/* Cube */}\r\n      <CubeGroup \r\n        isRotating={isRotating} \r\n        autoRotate={autoRotate}\r\n        onScramble={onScramble}\r\n        onReset={onReset}\r\n      />\r\n      \r\n      {/* Controls */}\r\n      <OrbitControls \r\n        enablePan={true}\r\n        enableZoom={true}\r\n        enableRotate={true}\r\n        autoRotate={false}\r\n        autoRotateSpeed={1}\r\n        minDistance={3}\r\n        maxDistance={15}\r\n        dampingFactor={0.05}\r\n        enableDamping={true}\r\n      />\r\n    </Canvas>\r\n  );\r\n}\r\n\r\nexport default RubiksCube; "],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAIC,MAAM,CAAEC,OAAO,CAAEC,QAAQ,CAAEC,WAAW,KAAQ,OAAO,CACrE,OAASC,MAAM,CAAEC,QAAQ,KAAQ,oBAAoB,CACrD,OAASC,aAAa,CAAEC,WAAW,KAAQ,mBAAmB,CAC9D,MAAO,GAAK,CAAAC,KAAK,KAAM,OAAO,CAE9B;AAAA,OAAAC,GAAA,IAAAC,IAAA,CAAAC,IAAA,IAAAC,KAAA,yBACA,QAAS,CAAAC,SAASA,CAAAC,IAAA,CAAoC,IAAnC,CAAEC,QAAQ,CAAEC,MAAM,CAAEC,IAAI,CAAG,IAAK,CAAC,CAAAH,IAAA,CAClD,KAAM,CAAAI,OAAO,CAAGlB,MAAM,CAAC,CAAC,CAExB,KAAM,CAAAmB,QAAQ,CAAG,CACf,OAAO,CAAE,SAAS,CAClB,QAAQ,CAAE,SAAS,CACnB,KAAK,CAAE,SAAS,CAChB,QAAQ,CAAE,SAAS,CACnB,MAAM,CAAE,SAAS,CACjB,OAAO,CAAE,SAAS,CAClB,OAAO,CAAE,SACX,CAAC,CAED;AACA,KAAM,CAAAC,QAAQ,CAAGH,IAAI,CAAG,CAAC,CACzB,KAAM,CAAAI,YAAY,CAAGpB,OAAO,CAAC,IAAM,GAAI,CAAAO,KAAK,CAACc,aAAa,CAACL,IAAI,CAAEA,IAAI,CAAC,CAAE,CAACA,IAAI,CAAC,CAAC,CAE/E;AACA,KAAM,CAAAM,KAAK,CAAG,CACZ,CAAER,QAAQ,CAAE,CAAC,CAAC,CAAE,CAAC,CAAEE,IAAI,CAAC,CAAC,CAAC,CAAEO,QAAQ,CAAE,CAAC,CAAC,CAAE,CAAC,CAAE,CAAC,CAAC,CAAEC,KAAK,CAAET,MAAM,CAAC,CAAC,CAAE,CAAC,CAAE;AACrE,CAAED,QAAQ,CAAE,CAAC,CAAC,CAAE,CAAC,CAAE,CAACE,IAAI,CAAC,CAAC,CAAC,CAAEO,QAAQ,CAAE,CAAC,CAAC,CAAEE,IAAI,CAACC,EAAE,CAAE,CAAC,CAAC,CAAEF,KAAK,CAAET,MAAM,CAAC,CAAC,CAAE,CAAC,CAAE;AAC5E,CAAED,QAAQ,CAAE,CAACE,IAAI,CAAC,CAAC,CAAE,CAAC,CAAE,CAAC,CAAC,CAAEO,QAAQ,CAAE,CAAC,CAAC,CAAEE,IAAI,CAACC,EAAE,CAAC,CAAC,CAAE,CAAC,CAAC,CAAEF,KAAK,CAAET,MAAM,CAAC,CAAC,CAAE,CAAC,CAAE;AAC7E,CAAED,QAAQ,CAAE,CAAC,CAACE,IAAI,CAAC,CAAC,CAAE,CAAC,CAAE,CAAC,CAAC,CAAEO,QAAQ,CAAE,CAAC,CAAC,CAAE,CAACE,IAAI,CAACC,EAAE,CAAC,CAAC,CAAE,CAAC,CAAC,CAAEF,KAAK,CAAET,MAAM,CAAC,CAAC,CAAE,CAAC,CAAE;AAC/E,CAAED,QAAQ,CAAE,CAAC,CAAC,CAAEE,IAAI,CAAC,CAAC,CAAE,CAAC,CAAC,CAAEO,QAAQ,CAAE,CAAC,CAACE,IAAI,CAACC,EAAE,CAAC,CAAC,CAAE,CAAC,CAAE,CAAC,CAAC,CAAEF,KAAK,CAAET,MAAM,CAAC,CAAC,CAAE,CAAC,CAAE;AAC9E,CAAED,QAAQ,CAAE,CAAC,CAAC,CAAE,CAACE,IAAI,CAAC,CAAC,CAAE,CAAC,CAAC,CAAEO,QAAQ,CAAE,CAACE,IAAI,CAACC,EAAE,CAAC,CAAC,CAAE,CAAC,CAAE,CAAC,CAAC,CAAEF,KAAK,CAAET,MAAM,CAAC,CAAC,CAAE,CAAG;AAAA,CAC/E,CAED,mBACEN,IAAA,UAAOkB,GAAG,CAAEV,OAAQ,CAACH,QAAQ,CAAEA,QAAS,CAAAc,QAAA,CACrCN,KAAK,CAACO,GAAG,CAAC,CAACC,IAAI,CAAEC,KAAK,gBACrBpB,KAAA,SAAkBG,QAAQ,CAAEgB,IAAI,CAAChB,QAAS,CAACS,QAAQ,CAAEO,IAAI,CAACP,QAAS,CAAAK,QAAA,eACjEnB,IAAA,cAAWuB,MAAM,CAAEZ,YAAa,CAAE,CAAC,cACnCX,IAAA,sBACEe,KAAK,CAAEN,QAAQ,CAACY,IAAI,CAACN,KAAK,CAAC,EAAIN,QAAQ,CAAC,OAAO,CAAE,CACjDe,IAAI,CAAE1B,KAAK,CAAC2B,UAAW,CACvBC,SAAS,CAAE,EAAG,CACdC,QAAQ,CAAE,QAAS,CACpB,CAAC,GAPOL,KAQL,CACP,CAAC,CACG,CAAC,CAEZ,CAEA;AACA,QAAS,CAAAM,YAAYA,CAAA,CAAG,CACtB,KAAM,CAACC,SAAS,CAAEC,YAAY,CAAC,CAAGtC,QAAQ,CAAC,IAAM,CAC/C;AACA,KAAM,CAAAuC,KAAK,CAAG,EAAE,CAChB,IAAK,GAAI,CAAAC,CAAC,CAAG,CAAC,CAAC,CAAEA,CAAC,EAAI,CAAC,CAAEA,CAAC,EAAE,CAAE,CAC5B,IAAK,GAAI,CAAAC,CAAC,CAAG,CAAC,CAAC,CAAEA,CAAC,EAAI,CAAC,CAAEA,CAAC,EAAE,CAAE,CAC5B,IAAK,GAAI,CAAAC,CAAC,CAAG,CAAC,CAAC,CAAEA,CAAC,EAAI,CAAC,CAAEA,CAAC,EAAE,CAAE,CAC5B,KAAM,CAAA7B,QAAQ,CAAG,CAAC2B,CAAC,CAAEC,CAAC,CAAEC,CAAC,CAAC,CAC1B,KAAM,CAAA5B,MAAM,CAAG,CAAC,OAAO,CAAE,OAAO,CAAE,OAAO,CAAE,OAAO,CAAE,OAAO,CAAE,OAAO,CAAC,CAErE;AACA,GAAI4B,CAAC,GAAK,CAAC,CAAE5B,MAAM,CAAC,CAAC,CAAC,CAAG,OAAO,CAAE;AAClC,GAAI4B,CAAC,GAAK,CAAC,CAAC,CAAE5B,MAAM,CAAC,CAAC,CAAC,CAAG,QAAQ,CAAE;AACpC,GAAI0B,CAAC,GAAK,CAAC,CAAE1B,MAAM,CAAC,CAAC,CAAC,CAAG,KAAK,CAAE;AAChC,GAAI0B,CAAC,GAAK,CAAC,CAAC,CAAE1B,MAAM,CAAC,CAAC,CAAC,CAAG,QAAQ,CAAE;AACpC,GAAI2B,CAAC,GAAK,CAAC,CAAE3B,MAAM,CAAC,CAAC,CAAC,CAAG,MAAM,CAAE;AACjC,GAAI2B,CAAC,GAAK,CAAC,CAAC,CAAE3B,MAAM,CAAC,CAAC,CAAC,CAAG,OAAO,CAAE;AAEnCyB,KAAK,CAACI,IAAI,CAAC,CAAE9B,QAAQ,CAAE,CAAC,GAAGA,QAAQ,CAAC,CAAEC,MAAM,CAAE,CAAC,GAAGA,MAAM,CAAE,CAAC,CAAC,CAC9D,CACF,CACF,CACA,MAAO,CAAAyB,KAAK,CACd,CAAC,CAAC,CAEF,KAAM,CAACK,WAAW,CAAEC,cAAc,CAAC,CAAG7C,QAAQ,CAAC,KAAK,CAAC,CACrD,KAAM,CAAC8C,cAAc,CAAEC,iBAAiB,CAAC,CAAG/C,QAAQ,CAAC,EAAE,CAAC,CAExD;AACA,KAAM,CAAAgD,UAAU,CAAG/C,WAAW,CAAC,CAAC4B,IAAI,CAAEoB,SAAS,GAAK,CAClD,GAAIL,WAAW,CAAE,OAEjBC,cAAc,CAAC,IAAI,CAAC,CACpB,KAAM,CAAAK,QAAQ,CAAG,CAAC,GAAGb,SAAS,CAAC,CAE/B;AACA,KAAM,CAAAc,UAAU,CAAG,CACjB,GAAG,CAAED,QAAQ,CAACE,MAAM,CAACC,CAAC,EAAIA,CAAC,CAACxC,QAAQ,CAAC,CAAC,CAAC,GAAK,CAAC,CAAC,CAAE;AAChD,GAAG,CAAEqC,QAAQ,CAACE,MAAM,CAACC,CAAC,EAAIA,CAAC,CAACxC,QAAQ,CAAC,CAAC,CAAC,GAAK,CAAC,CAAC,CAAC,CAAE;AACjD,GAAG,CAAEqC,QAAQ,CAACE,MAAM,CAACC,CAAC,EAAIA,CAAC,CAACxC,QAAQ,CAAC,CAAC,CAAC,GAAK,CAAC,CAAC,CAAE;AAChD,GAAG,CAAEqC,QAAQ,CAACE,MAAM,CAACC,CAAC,EAAIA,CAAC,CAACxC,QAAQ,CAAC,CAAC,CAAC,GAAK,CAAC,CAAC,CAAC,CAAE;AACjD,GAAG,CAAEqC,QAAQ,CAACE,MAAM,CAACC,CAAC,EAAIA,CAAC,CAACxC,QAAQ,CAAC,CAAC,CAAC,GAAK,CAAC,CAAC,CAAE;AAChD,GAAG,CAAEqC,QAAQ,CAACE,MAAM,CAACC,CAAC,EAAIA,CAAC,CAACxC,QAAQ,CAAC,CAAC,CAAC,GAAK,CAAC,CAAC,CAAE;AAClD,CAAC,CAED,KAAM,CAAAyC,MAAM,CAAGH,UAAU,CAACtB,IAAI,CAAC,CAC/B,GAAI,CAACyB,MAAM,CAAE,OAEb;AACAA,MAAM,CAACC,OAAO,CAACC,KAAK,EAAI,CACtB,KAAM,CAAChB,CAAC,CAAEC,CAAC,CAAEC,CAAC,CAAC,CAAGc,KAAK,CAAC3C,QAAQ,CAChC,GAAI,CAAA4C,IAAI,CAAGjB,CAAC,CAAEkB,IAAI,CAAGjB,CAAC,CAAEkB,IAAI,CAAGjB,CAAC,CAEhC,OAAQb,IAAI,EACV,IAAK,GAAG,CAAE;AACR,GAAIoB,SAAS,GAAK,WAAW,CAAE,CAC7BQ,IAAI,CAAG,CAAChB,CAAC,CACTiB,IAAI,CAAGlB,CAAC,CACV,CAAC,IAAM,CACLiB,IAAI,CAAGhB,CAAC,CACRiB,IAAI,CAAG,CAAClB,CAAC,CACX,CACA,MACF,IAAK,GAAG,CAAE;AACR,GAAIS,SAAS,GAAK,WAAW,CAAE,CAC7BQ,IAAI,CAAGhB,CAAC,CACRiB,IAAI,CAAG,CAAClB,CAAC,CACX,CAAC,IAAM,CACLiB,IAAI,CAAG,CAAChB,CAAC,CACTiB,IAAI,CAAGlB,CAAC,CACV,CACA,MACF,IAAK,GAAG,CAAE;AACR,GAAIS,SAAS,GAAK,WAAW,CAAE,CAC7BU,IAAI,CAAG,CAAClB,CAAC,CACTiB,IAAI,CAAGhB,CAAC,CACV,CAAC,IAAM,CACLiB,IAAI,CAAGlB,CAAC,CACRiB,IAAI,CAAG,CAAChB,CAAC,CACX,CACA,MACF,IAAK,GAAG,CAAE;AACR,GAAIO,SAAS,GAAK,WAAW,CAAE,CAC7BU,IAAI,CAAGlB,CAAC,CACRiB,IAAI,CAAG,CAAChB,CAAC,CACX,CAAC,IAAM,CACLiB,IAAI,CAAG,CAAClB,CAAC,CACTiB,IAAI,CAAGhB,CAAC,CACV,CACA,MACF,IAAK,GAAG,CAAE;AACR,GAAIO,SAAS,GAAK,WAAW,CAAE,CAC7BQ,IAAI,CAAGf,CAAC,CACRiB,IAAI,CAAG,CAACnB,CAAC,CACX,CAAC,IAAM,CACLiB,IAAI,CAAG,CAACf,CAAC,CACTiB,IAAI,CAAGnB,CAAC,CACV,CACA,MACF,IAAK,GAAG,CAAE;AACR,GAAIS,SAAS,GAAK,WAAW,CAAE,CAC7BQ,IAAI,CAAG,CAACf,CAAC,CACTiB,IAAI,CAAGnB,CAAC,CACV,CAAC,IAAM,CACLiB,IAAI,CAAGf,CAAC,CACRiB,IAAI,CAAG,CAACnB,CAAC,CACX,CACA,MACJ,CAEAgB,KAAK,CAAC3C,QAAQ,CAAG,CAAC4C,IAAI,CAAEC,IAAI,CAAEC,IAAI,CAAC,CAEnC;AACA,KAAM,CAAAC,UAAU,CAAG,CAAC,GAAGJ,KAAK,CAAC1C,MAAM,CAAC,CACpC,GAAIe,IAAI,GAAK,GAAG,EAAIA,IAAI,GAAK,GAAG,CAAE,CAChC,GAAIoB,SAAS,GAAK,WAAW,CAAE,CAC7BO,KAAK,CAAC1C,MAAM,CAAG,CAAC8C,UAAU,CAAC,CAAC,CAAC,CAAEA,UAAU,CAAC,CAAC,CAAC,CAAEA,UAAU,CAAC,CAAC,CAAC,CAAEA,UAAU,CAAC,CAAC,CAAC,CAAEA,UAAU,CAAC,CAAC,CAAC,CAAEA,UAAU,CAAC,CAAC,CAAC,CAAC,CAC3G,CAAC,IAAM,CACLJ,KAAK,CAAC1C,MAAM,CAAG,CAAC8C,UAAU,CAAC,CAAC,CAAC,CAAEA,UAAU,CAAC,CAAC,CAAC,CAAEA,UAAU,CAAC,CAAC,CAAC,CAAEA,UAAU,CAAC,CAAC,CAAC,CAAEA,UAAU,CAAC,CAAC,CAAC,CAAEA,UAAU,CAAC,CAAC,CAAC,CAAC,CAC3G,CACF,CAAC,IAAM,IAAI/B,IAAI,GAAK,GAAG,EAAIA,IAAI,GAAK,GAAG,CAAE,CACvC,GAAIoB,SAAS,GAAK,WAAW,CAAE,CAC7BO,KAAK,CAAC1C,MAAM,CAAG,CAAC8C,UAAU,CAAC,CAAC,CAAC,CAAEA,UAAU,CAAC,CAAC,CAAC,CAAEA,UAAU,CAAC,CAAC,CAAC,CAAEA,UAAU,CAAC,CAAC,CAAC,CAAEA,UAAU,CAAC,CAAC,CAAC,CAAEA,UAAU,CAAC,CAAC,CAAC,CAAC,CAC3G,CAAC,IAAM,CACLJ,KAAK,CAAC1C,MAAM,CAAG,CAAC8C,UAAU,CAAC,CAAC,CAAC,CAAEA,UAAU,CAAC,CAAC,CAAC,CAAEA,UAAU,CAAC,CAAC,CAAC,CAAEA,UAAU,CAAC,CAAC,CAAC,CAAEA,UAAU,CAAC,CAAC,CAAC,CAAEA,UAAU,CAAC,CAAC,CAAC,CAAC,CAC3G,CACF,CAAC,IAAM,IAAI/B,IAAI,GAAK,GAAG,EAAIA,IAAI,GAAK,GAAG,CAAE,CACvC,GAAIoB,SAAS,GAAK,WAAW,CAAE,CAC7BO,KAAK,CAAC1C,MAAM,CAAG,CAAC8C,UAAU,CAAC,CAAC,CAAC,CAAEA,UAAU,CAAC,CAAC,CAAC,CAAEA,UAAU,CAAC,CAAC,CAAC,CAAEA,UAAU,CAAC,CAAC,CAAC,CAAEA,UAAU,CAAC,CAAC,CAAC,CAAEA,UAAU,CAAC,CAAC,CAAC,CAAC,CAC3G,CAAC,IAAM,CACLJ,KAAK,CAAC1C,MAAM,CAAG,CAAC8C,UAAU,CAAC,CAAC,CAAC,CAAEA,UAAU,CAAC,CAAC,CAAC,CAAEA,UAAU,CAAC,CAAC,CAAC,CAAEA,UAAU,CAAC,CAAC,CAAC,CAAEA,UAAU,CAAC,CAAC,CAAC,CAAEA,UAAU,CAAC,CAAC,CAAC,CAAC,CAC3G,CACF,CACF,CAAC,CAAC,CAEFtB,YAAY,CAACY,QAAQ,CAAC,CAEtB;AACAW,UAAU,CAAC,IAAMhB,cAAc,CAAC,KAAK,CAAC,CAAE,GAAG,CAAC,CAC9C,CAAC,CAAE,CAACR,SAAS,CAAEO,WAAW,CAAC,CAAC,CAE5B;AACA,KAAM,CAAAkB,QAAQ,CAAG7D,WAAW,CAAC,IAAM,CACjC,GAAI2C,WAAW,CAAE,OAEjB,KAAM,CAAAmB,KAAK,CAAG,CAAC,GAAG,CAAE,GAAG,CAAE,GAAG,CAAE,GAAG,CAAE,GAAG,CAAE,GAAG,CAAC,CAC5C,KAAM,CAAAC,UAAU,CAAG,CAAC,WAAW,CAAE,kBAAkB,CAAC,CACpD,KAAM,CAAAC,cAAc,CAAG,EAAE,CAEzB,GAAI,CAAAC,YAAY,CAAG,EAAE,CAErB,IAAK,GAAI,CAAAC,CAAC,CAAG,CAAC,CAAEA,CAAC,CAAGF,cAAc,CAAEE,CAAC,EAAE,CAAE,CACvC,KAAM,CAAAC,IAAI,CAAGL,KAAK,CAACvC,IAAI,CAAC6C,KAAK,CAAC7C,IAAI,CAAC8C,MAAM,CAAC,CAAC,CAAGP,KAAK,CAACQ,MAAM,CAAC,CAAC,CAC5D,KAAM,CAAAtB,SAAS,CAAGe,UAAU,CAACxC,IAAI,CAAC6C,KAAK,CAAC7C,IAAI,CAAC8C,MAAM,CAAC,CAAC,CAAGN,UAAU,CAACO,MAAM,CAAC,CAAC,CAC3EL,YAAY,CAACvB,IAAI,CAAC,CAAEyB,IAAI,CAAEnB,SAAU,CAAC,CAAC,CACxC,CAEAF,iBAAiB,CAACmB,YAAY,CAAC,CAC/BM,eAAe,CAACN,YAAY,CAAC,CAC/B,CAAC,CAAE,CAACtB,WAAW,CAAC,CAAC,CAEjB,KAAM,CAAA4B,eAAe,CAAGvE,WAAW,CAAEwE,KAAK,EAAK,CAC7C,GAAIA,KAAK,CAACF,MAAM,GAAK,CAAC,CAAE,OAExB,KAAM,CAAEH,IAAI,CAAEnB,SAAU,CAAC,CAAGwB,KAAK,CAAC,CAAC,CAAC,CACpCzB,UAAU,CAACoB,IAAI,CAAEnB,SAAS,CAAC,CAE3BY,UAAU,CAAC,IAAM,CACfW,eAAe,CAACC,KAAK,CAACC,KAAK,CAAC,CAAC,CAAC,CAAC,CACjC,CAAC,CAAE,GAAG,CAAC,CACT,CAAC,CAAE,CAAC1B,UAAU,CAAC,CAAC,CAEhB;AACA,KAAM,CAAA2B,KAAK,CAAG1E,WAAW,CAAC,IAAM,CAC9B,GAAI2C,WAAW,CAAE,OAEjBN,YAAY,CAAC,IAAM,CACjB,KAAM,CAAAC,KAAK,CAAG,EAAE,CAChB,IAAK,GAAI,CAAAC,CAAC,CAAG,CAAC,CAAC,CAAEA,CAAC,EAAI,CAAC,CAAEA,CAAC,EAAE,CAAE,CAC5B,IAAK,GAAI,CAAAC,CAAC,CAAG,CAAC,CAAC,CAAEA,CAAC,EAAI,CAAC,CAAEA,CAAC,EAAE,CAAE,CAC5B,IAAK,GAAI,CAAAC,CAAC,CAAG,CAAC,CAAC,CAAEA,CAAC,EAAI,CAAC,CAAEA,CAAC,EAAE,CAAE,CAC5B,KAAM,CAAA7B,QAAQ,CAAG,CAAC2B,CAAC,CAAEC,CAAC,CAAEC,CAAC,CAAC,CAC1B,KAAM,CAAA5B,MAAM,CAAG,CAAC,OAAO,CAAE,OAAO,CAAE,OAAO,CAAE,OAAO,CAAE,OAAO,CAAE,OAAO,CAAC,CAErE,GAAI4B,CAAC,GAAK,CAAC,CAAE5B,MAAM,CAAC,CAAC,CAAC,CAAG,OAAO,CAChC,GAAI4B,CAAC,GAAK,CAAC,CAAC,CAAE5B,MAAM,CAAC,CAAC,CAAC,CAAG,QAAQ,CAClC,GAAI0B,CAAC,GAAK,CAAC,CAAE1B,MAAM,CAAC,CAAC,CAAC,CAAG,KAAK,CAC9B,GAAI0B,CAAC,GAAK,CAAC,CAAC,CAAE1B,MAAM,CAAC,CAAC,CAAC,CAAG,QAAQ,CAClC,GAAI2B,CAAC,GAAK,CAAC,CAAE3B,MAAM,CAAC,CAAC,CAAC,CAAG,MAAM,CAC/B,GAAI2B,CAAC,GAAK,CAAC,CAAC,CAAE3B,MAAM,CAAC,CAAC,CAAC,CAAG,OAAO,CAEjCyB,KAAK,CAACI,IAAI,CAAC,CAAE9B,QAAQ,CAAE,CAAC,GAAGA,QAAQ,CAAC,CAAEC,MAAM,CAAE,CAAC,GAAGA,MAAM,CAAE,CAAC,CAAC,CAC9D,CACF,CACF,CACA,MAAO,CAAAyB,KAAK,CACd,CAAC,CAAC,CACJ,CAAC,CAAE,CAACK,WAAW,CAAC,CAAC,CAEjB,MAAO,CACLP,SAAS,CACTO,WAAW,CACXI,UAAU,CACVc,QAAQ,CACRa,KACF,CAAC,CACH,CAEA;AACA,QAAS,CAAAC,SAASA,CAAAC,KAAA,CAA0D,IAAzD,CAAEC,UAAU,CAAEC,UAAU,CAAG,KAAK,CAAEC,UAAU,CAAEC,OAAQ,CAAC,CAAAJ,KAAA,CACxE,KAAM,CAAAK,QAAQ,CAAGpF,MAAM,CAAC,CAAC,CACzB,KAAM,CAACqF,aAAa,CAAC,CAAGnF,QAAQ,CAAC,CAAEwC,CAAC,CAAE,KAAK,CAAEC,CAAC,CAAE,IAAK,CAAC,CAAC,CAEvD,KAAM,CAAEJ,SAAS,CAAEO,WAAW,CAAEI,UAAU,CAAEc,QAAQ,CAAEa,KAAM,CAAC,CAAGvC,YAAY,CAAC,CAAC,CAE9E;AACAvC,KAAK,CAACuF,SAAS,CAAC,IAAM,CACpB,GAAIJ,UAAU,CAAEA,UAAU,CAAClB,QAAQ,CAAC,CACpC,GAAImB,OAAO,CAAEA,OAAO,CAACN,KAAK,CAAC,CAC7B,CAAC,CAAE,CAACK,UAAU,CAAEC,OAAO,CAAEnB,QAAQ,CAAEa,KAAK,CAAC,CAAC,CAE1CxE,QAAQ,CAAEoC,KAAK,EAAK,CAClB,GAAIwC,UAAU,EAAIG,QAAQ,CAACG,OAAO,EAAI,CAACzC,WAAW,CAAE,CAClDsC,QAAQ,CAACG,OAAO,CAAC/D,QAAQ,CAACmB,CAAC,EAAI0C,aAAa,CAAC1C,CAAC,CAC9CyC,QAAQ,CAACG,OAAO,CAAC/D,QAAQ,CAACkB,CAAC,EAAI2C,aAAa,CAAC3C,CAAC,CAChD,CACF,CAAC,CAAC,CAEF,mBACEhC,IAAA,UAAOkB,GAAG,CAAEwD,QAAS,CAAAvD,QAAA,CAClBU,SAAS,CAACT,GAAG,CAAC,CAAC4B,KAAK,CAAE1B,KAAK,gBAC1BtB,IAAA,CAACG,SAAS,EAERE,QAAQ,CAAE2C,KAAK,CAAC3C,QAAS,CACzBC,MAAM,CAAE0C,KAAK,CAAC1C,MAAO,EAFhBgB,KAGN,CACF,CAAC,CACG,CAAC,CAEZ,CAEA;AACA,QAAS,CAAAwD,UAAUA,CAAAC,KAAA,CAA0D,IAAzD,CAAET,UAAU,CAAEC,UAAU,CAAG,KAAK,CAAEC,UAAU,CAAEC,OAAQ,CAAC,CAAAM,KAAA,CACzE,mBACE7E,KAAA,CAACR,MAAM,EACLsF,MAAM,CAAE,CAAE3E,QAAQ,CAAE,CAAC,CAAC,CAAE,CAAC,CAAE,CAAC,CAAC,CAAE4E,GAAG,CAAE,EAAG,CAAE,CACzCC,KAAK,CAAE,CAAEC,KAAK,CAAE,MAAM,CAAEC,MAAM,CAAE,MAAO,CAAE,CACzCC,EAAE,CAAE,CAAEC,SAAS,CAAE,IAAI,CAAEC,KAAK,CAAE,IAAK,CAAE,CAAApE,QAAA,eAGrCnB,IAAA,iBAAcwF,SAAS,CAAE,GAAI,CAAE,CAAC,cAChCxF,IAAA,qBACEK,QAAQ,CAAE,CAAC,EAAE,CAAE,EAAE,CAAE,CAAC,CAAE,CACtBmF,SAAS,CAAE,GAAI,CACfC,UAAU,MACV,uBAAsB,IAAK,CAC3B,wBAAuB,IAAK,CAC7B,CAAC,cACFzF,IAAA,eAAYK,QAAQ,CAAE,CAAC,CAAC,EAAE,CAAE,CAAC,EAAE,CAAE,CAAC,CAAC,CAAE,CAACmF,SAAS,CAAE,GAAI,CAAE,CAAC,cACxDxF,IAAA,cACEK,QAAQ,CAAE,CAAC,CAAC,CAAE,EAAE,CAAE,CAAC,CAAE,CACrBqF,KAAK,CAAE,GAAI,CACXC,QAAQ,CAAE,CAAE,CACZH,SAAS,CAAE,GAAI,CACfC,UAAU,MACX,CAAC,cAGFzF,IAAA,CAACH,WAAW,EAAC+F,MAAM,CAAC,MAAM,CAAE,CAAC,cAG7B5F,IAAA,CAACoE,SAAS,EACRE,UAAU,CAAEA,UAAW,CACvBC,UAAU,CAAEA,UAAW,CACvBC,UAAU,CAAEA,UAAW,CACvBC,OAAO,CAAEA,OAAQ,CAClB,CAAC,cAGFzE,IAAA,CAACJ,aAAa,EACZiG,SAAS,CAAE,IAAK,CAChBC,UAAU,CAAE,IAAK,CACjBC,YAAY,CAAE,IAAK,CACnBxB,UAAU,CAAE,KAAM,CAClByB,eAAe,CAAE,CAAE,CACnBC,WAAW,CAAE,CAAE,CACfC,WAAW,CAAE,EAAG,CAChBC,aAAa,CAAE,IAAK,CACpBC,aAAa,CAAE,IAAK,CACrB,CAAC,EACI,CAAC,CAEb,CAEA,cAAe,CAAAtB,UAAU","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}