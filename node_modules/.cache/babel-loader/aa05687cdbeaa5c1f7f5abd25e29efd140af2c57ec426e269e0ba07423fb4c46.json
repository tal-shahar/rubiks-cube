{"ast":null,"code":"var _jsxFileName = \"C:\\\\Repo\\\\GitHub\\\\rubiks-cube\\\\src\\\\components\\\\RubiksCube.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$(),\n  _s3 = $RefreshSig$();\nimport React, { useRef, useMemo, useState, useCallback } from 'react';\nimport { Canvas, useFrame } from '@react-three/fiber';\nimport { OrbitControls, Environment } from '@react-three/drei';\nimport * as THREE from 'three';\n\n// Individual cube piece component with proper multi-colored faces\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction CubePiece({\n  position,\n  colors,\n  size = 0.95\n}) {\n  _s();\n  const meshRef = useRef();\n  const colorMap = {\n    'white': '#ffffff',\n    'yellow': '#ffeb3b',\n    'red': '#f44336',\n    'orange': '#ff9800',\n    'blue': '#2196f3',\n    'green': '#4caf50',\n    'black': '#1a1a1a'\n  };\n\n  // Create individual face geometries for each side\n  const faceGeometry = useMemo(() => new THREE.PlaneGeometry(size, size), [size]);\n\n  // Use stored colors instead of calculating from position\n  const getFaceColor = faceIndex => {\n    // Face indices: 0=front, 1=back, 2=right, 3=left, 4=top, 5=bottom\n    switch (faceIndex) {\n      case 0:\n        return colors.front;\n      case 1:\n        return colors.back;\n      case 2:\n        return colors.right;\n      case 3:\n        return colors.left;\n      case 4:\n        return colors.top;\n      case 5:\n        return colors.bottom;\n      default:\n        return 'black';\n    }\n  };\n\n  // Face positions and rotations for a cube\n  const faces = [{\n    position: [0, 0, size / 2],\n    rotation: [0, 0, 0],\n    color: getFaceColor(0)\n  },\n  // Front\n  {\n    position: [0, 0, -size / 2],\n    rotation: [0, Math.PI, 0],\n    color: getFaceColor(1)\n  },\n  // Back\n  {\n    position: [size / 2, 0, 0],\n    rotation: [0, Math.PI / 2, 0],\n    color: getFaceColor(2)\n  },\n  // Right\n  {\n    position: [-size / 2, 0, 0],\n    rotation: [0, -Math.PI / 2, 0],\n    color: getFaceColor(3)\n  },\n  // Left\n  {\n    position: [0, size / 2, 0],\n    rotation: [-Math.PI / 2, 0, 0],\n    color: getFaceColor(4)\n  },\n  // Top\n  {\n    position: [0, -size / 2, 0],\n    rotation: [Math.PI / 2, 0, 0],\n    color: getFaceColor(5)\n  } // Bottom\n  ];\n  return /*#__PURE__*/_jsxDEV(\"group\", {\n    ref: meshRef,\n    position: position,\n    children: faces.map((face, index) => /*#__PURE__*/_jsxDEV(\"mesh\", {\n      position: face.position,\n      rotation: face.rotation,\n      children: [/*#__PURE__*/_jsxDEV(\"primitive\", {\n        object: faceGeometry\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"meshLambertMaterial\", {\n        color: colorMap[face.color] || colorMap['black'],\n        side: THREE.DoubleSide,\n        emissive: colorMap[face.color] || colorMap['black'],\n        emissiveIntensity: 0.1\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 11\n      }, this)]\n    }, index, true, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 5\n  }, this);\n}\n\n// Cube state management and rotation logic\n_s(CubePiece, \"1V7NXo1rSueTkDom11McK+eg0xc=\");\n_c = CubePiece;\nfunction useCubeState() {\n  _s2();\n  const [cubeState, setCubeState] = useState(() => {\n    // Initialize solved cube state - track positions and original colors\n    const state = [];\n    for (let x = -1; x <= 1; x++) {\n      for (let y = -1; y <= 1; y++) {\n        for (let z = -1; z <= 1; z++) {\n          const position = [x, y, z];\n          // Store original colors for each face\n          const colors = {\n            front: z === 1 ? 'white' : 'black',\n            back: z === -1 ? 'yellow' : 'black',\n            right: x === 1 ? 'red' : 'black',\n            left: x === -1 ? 'orange' : 'black',\n            top: y === 1 ? 'blue' : 'black',\n            bottom: y === -1 ? 'green' : 'black'\n          };\n          state.push({\n            position: [...position],\n            colors\n          });\n        }\n      }\n    }\n    return state;\n  });\n  const [isAnimating, setIsAnimating] = useState(false);\n  const [animationQueue, setAnimationQueue] = useState([]);\n\n  // Rotation functions for each face\n  const rotateFace = useCallback((face, direction) => {\n    if (isAnimating) return;\n    setIsAnimating(true);\n    setCubeState(prevState => {\n      const newState = [...prevState];\n\n      // Define which pieces belong to each face\n      const facePieces = {\n        'F': newState.filter(p => p.position[2] === 1),\n        // Front face\n        'B': newState.filter(p => p.position[2] === -1),\n        // Back face\n        'R': newState.filter(p => p.position[0] === 1),\n        // Right face\n        'L': newState.filter(p => p.position[0] === -1),\n        // Left face\n        'U': newState.filter(p => p.position[1] === 1),\n        // Up face\n        'D': newState.filter(p => p.position[1] === -1) // Down face\n      };\n      const pieces = facePieces[face];\n      if (!pieces) return prevState;\n\n      // Apply rotation based on face and direction\n      pieces.forEach(piece => {\n        const [x, y, z] = piece.position;\n        let newX = x,\n          newY = y,\n          newZ = z;\n        switch (face) {\n          case 'F':\n            // Front face rotation\n            if (direction === 'clockwise') {\n              newX = -y;\n              newY = x;\n            } else {\n              newX = y;\n              newY = -x;\n            }\n            break;\n          case 'B':\n            // Back face rotation\n            if (direction === 'clockwise') {\n              newX = y;\n              newY = -x;\n            } else {\n              newX = -y;\n              newY = x;\n            }\n            break;\n          case 'R':\n            // Right face rotation\n            if (direction === 'clockwise') {\n              newZ = -y;\n              newY = z;\n            } else {\n              newZ = y;\n              newY = -z;\n            }\n            break;\n          case 'L':\n            // Left face rotation\n            if (direction === 'clockwise') {\n              newZ = y;\n              newY = -z;\n            } else {\n              newZ = -y;\n              newY = z;\n            }\n            break;\n          case 'U':\n            // Up face rotation\n            if (direction === 'clockwise') {\n              newX = z;\n              newZ = -x;\n            } else {\n              newX = -z;\n              newZ = x;\n            }\n            break;\n          case 'D':\n            // Down face rotation\n            if (direction === 'clockwise') {\n              newX = -z;\n              newZ = x;\n            } else {\n              newX = z;\n              newZ = -x;\n            }\n            break;\n        }\n        piece.position = [newX, newY, newZ];\n      });\n      return newState;\n    });\n\n    // Animation delay\n    setTimeout(() => setIsAnimating(false), 300);\n  }, [isAnimating]);\n\n  // Execute scramble moves\n  const executeScramble = useCallback(queue => {\n    if (queue.length === 0) {\n      setIsAnimating(false);\n      return;\n    }\n    const {\n      move,\n      direction\n    } = queue[0];\n    console.log(`Executing move: ${move} ${direction}`);\n\n    // Apply the rotation immediately\n    setCubeState(prevState => {\n      const newState = [...prevState];\n\n      // Define which pieces belong to each face\n      const facePieces = {\n        'F': newState.filter(p => p.position[2] === 1),\n        // Front face\n        'B': newState.filter(p => p.position[2] === -1),\n        // Back face\n        'R': newState.filter(p => p.position[0] === 1),\n        // Right face\n        'L': newState.filter(p => p.position[0] === -1),\n        // Left face\n        'U': newState.filter(p => p.position[1] === 1),\n        // Up face\n        'D': newState.filter(p => p.position[1] === -1) // Down face\n      };\n      const pieces = facePieces[move];\n      if (!pieces) return prevState;\n\n      // Apply rotation based on face and direction\n      pieces.forEach(piece => {\n        const [x, y, z] = piece.position;\n        let newX = x,\n          newY = y,\n          newZ = z;\n        switch (move) {\n          case 'F':\n            // Front face rotation\n            if (direction === 'clockwise') {\n              newX = -y;\n              newY = x;\n            } else {\n              newX = y;\n              newY = -x;\n            }\n            break;\n          case 'B':\n            // Back face rotation\n            if (direction === 'clockwise') {\n              newX = y;\n              newY = -x;\n            } else {\n              newX = -y;\n              newY = x;\n            }\n            break;\n          case 'R':\n            // Right face rotation\n            if (direction === 'clockwise') {\n              newZ = -y;\n              newY = z;\n            } else {\n              newZ = y;\n              newY = -z;\n            }\n            break;\n          case 'L':\n            // Left face rotation\n            if (direction === 'clockwise') {\n              newZ = y;\n              newY = -z;\n            } else {\n              newZ = -y;\n              newY = z;\n            }\n            break;\n          case 'U':\n            // Up face rotation\n            if (direction === 'clockwise') {\n              newX = z;\n              newZ = -x;\n            } else {\n              newX = -z;\n              newZ = x;\n            }\n            break;\n          case 'D':\n            // Down face rotation\n            if (direction === 'clockwise') {\n              newX = -z;\n              newZ = x;\n            } else {\n              newX = z;\n              newZ = -x;\n            }\n            break;\n        }\n        piece.position = [newX, newY, newZ];\n      });\n      return newState;\n    });\n\n    // Continue with the next move after a delay\n    setTimeout(() => {\n      executeScramble(queue.slice(1));\n    }, 350);\n  }, []);\n\n  // Scramble function using standard notation\n  const scramble = useCallback(() => {\n    console.log('Scramble function called');\n    if (isAnimating) {\n      console.log('Already animating, skipping scramble');\n      return;\n    }\n    setIsAnimating(true);\n    console.log('Starting scramble animation');\n    const moves = ['F', 'B', 'R', 'L', 'U', 'D'];\n    const directions = ['clockwise', 'counterclockwise'];\n    const scrambleLength = 20;\n    let currentQueue = [];\n    let lastMove = '';\n    for (let i = 0; i < scrambleLength; i++) {\n      let move;\n      let direction;\n\n      // Avoid doing the same move twice in a row\n      do {\n        move = moves[Math.floor(Math.random() * moves.length)];\n      } while (move === lastMove);\n      direction = directions[Math.floor(Math.random() * directions.length)];\n      lastMove = move;\n      currentQueue.push({\n        move,\n        direction\n      });\n    }\n    console.log('Generated scramble queue:', currentQueue);\n    setAnimationQueue(currentQueue);\n    executeScramble(currentQueue);\n  }, [isAnimating, executeScramble]);\n\n  // Reset function\n  const reset = useCallback(() => {\n    if (isAnimating) return;\n    setCubeState(() => {\n      const state = [];\n      for (let x = -1; x <= 1; x++) {\n        for (let y = -1; y <= 1; y++) {\n          for (let z = -1; z <= 1; z++) {\n            const position = [x, y, z];\n            // Store original colors for each face\n            const colors = {\n              front: z === 1 ? 'white' : 'black',\n              back: z === -1 ? 'yellow' : 'black',\n              right: x === 1 ? 'red' : 'black',\n              left: x === -1 ? 'orange' : 'black',\n              top: y === 1 ? 'blue' : 'black',\n              bottom: y === -1 ? 'green' : 'black'\n            };\n            state.push({\n              position: [...position],\n              colors\n            });\n          }\n        }\n      }\n      return state;\n    });\n  }, [isAnimating]);\n  return {\n    cubeState,\n    isAnimating,\n    rotateFace,\n    scramble,\n    reset\n  };\n}\n\n// Main cube group component with enhanced structure\n_s2(useCubeState, \"4ZXg+AcAhXtBvnqu8P2m0C6PpsI=\");\nfunction CubeGroup({\n  isRotating,\n  autoRotate = false,\n  onScramble,\n  onReset\n}) {\n  _s3();\n  const groupRef = useRef();\n  const [rotationSpeed] = useState({\n    x: 0.005,\n    y: 0.01\n  });\n  const {\n    cubeState,\n    isAnimating,\n    rotateFace,\n    scramble,\n    reset\n  } = useCubeState();\n\n  // Expose functions to parent\n  React.useEffect(() => {\n    if (onScramble) onScramble(scramble);\n    if (onReset) onReset(reset);\n  }, [onScramble, onReset, scramble, reset]);\n  useFrame(state => {\n    if (autoRotate && groupRef.current && !isAnimating) {\n      groupRef.current.rotation.y += rotationSpeed.y;\n      groupRef.current.rotation.x += rotationSpeed.x;\n    }\n  });\n  return /*#__PURE__*/_jsxDEV(\"group\", {\n    ref: groupRef,\n    children: cubeState.map((piece, index) => /*#__PURE__*/_jsxDEV(CubePiece, {\n      position: piece.position,\n      colors: piece.colors\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 384,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 382,\n    columnNumber: 5\n  }, this);\n}\n\n// Main Rubik's Cube component\n_s3(CubeGroup, \"4ehKp0Jd2vChjTIyWIyZQmjvX+4=\", false, function () {\n  return [useCubeState, useFrame];\n});\n_c2 = CubeGroup;\nfunction RubiksCube({\n  isRotating,\n  autoRotate = false,\n  onScramble,\n  onReset\n}) {\n  return /*#__PURE__*/_jsxDEV(Canvas, {\n    camera: {\n      position: [6, 6, 6],\n      fov: 60\n    },\n    style: {\n      width: '100%',\n      height: '100%'\n    },\n    gl: {\n      antialias: true,\n      alpha: true\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"ambientLight\", {\n      intensity: 0.8\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 403,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"directionalLight\", {\n      position: [10, 10, 5],\n      intensity: 2.0,\n      castShadow: true,\n      \"shadow-mapSize-width\": 2048,\n      \"shadow-mapSize-height\": 2048\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 404,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"pointLight\", {\n      position: [-10, -10, -5],\n      intensity: 1.5\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 411,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"pointLight\", {\n      position: [10, -10, 5],\n      intensity: 1.2\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 412,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"spotLight\", {\n      position: [0, 10, 0],\n      angle: 0.3,\n      penumbra: 1,\n      intensity: 1.0,\n      castShadow: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 413,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Environment, {\n      preset: \"city\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 422,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CubeGroup, {\n      isRotating: isRotating,\n      autoRotate: autoRotate,\n      onScramble: onScramble,\n      onReset: onReset\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 425,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(OrbitControls, {\n      enablePan: true,\n      enableZoom: true,\n      enableRotate: true,\n      autoRotate: false,\n      autoRotateSpeed: 1,\n      minDistance: 3,\n      maxDistance: 15,\n      dampingFactor: 0.05,\n      enableDamping: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 433,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 397,\n    columnNumber: 5\n  }, this);\n}\n_c3 = RubiksCube;\nexport default RubiksCube;\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"CubePiece\");\n$RefreshReg$(_c2, \"CubeGroup\");\n$RefreshReg$(_c3, \"RubiksCube\");","map":{"version":3,"names":["React","useRef","useMemo","useState","useCallback","Canvas","useFrame","OrbitControls","Environment","THREE","jsxDEV","_jsxDEV","CubePiece","position","colors","size","_s","meshRef","colorMap","faceGeometry","PlaneGeometry","getFaceColor","faceIndex","front","back","right","left","top","bottom","faces","rotation","color","Math","PI","ref","children","map","face","index","object","fileName","_jsxFileName","lineNumber","columnNumber","side","DoubleSide","emissive","emissiveIntensity","_c","useCubeState","_s2","cubeState","setCubeState","state","x","y","z","push","isAnimating","setIsAnimating","animationQueue","setAnimationQueue","rotateFace","direction","prevState","newState","facePieces","filter","p","pieces","forEach","piece","newX","newY","newZ","setTimeout","executeScramble","queue","length","move","console","log","slice","scramble","moves","directions","scrambleLength","currentQueue","lastMove","i","floor","random","reset","CubeGroup","isRotating","autoRotate","onScramble","onReset","_s3","groupRef","rotationSpeed","useEffect","current","_c2","RubiksCube","camera","fov","style","width","height","gl","antialias","alpha","intensity","castShadow","angle","penumbra","preset","enablePan","enableZoom","enableRotate","autoRotateSpeed","minDistance","maxDistance","dampingFactor","enableDamping","_c3","$RefreshReg$"],"sources":["C:/Repo/GitHub/rubiks-cube/src/components/RubiksCube.js"],"sourcesContent":["import React, { useRef, useMemo, useState, useCallback } from 'react';\r\nimport { Canvas, useFrame } from '@react-three/fiber';\r\nimport { OrbitControls, Environment } from '@react-three/drei';\r\nimport * as THREE from 'three';\r\n\r\n// Individual cube piece component with proper multi-colored faces\r\nfunction CubePiece({ position, colors, size = 0.95 }) {\r\n  const meshRef = useRef();\r\n  \r\n  const colorMap = {\r\n    'white': '#ffffff',\r\n    'yellow': '#ffeb3b',\r\n    'red': '#f44336',\r\n    'orange': '#ff9800',\r\n    'blue': '#2196f3',\r\n    'green': '#4caf50',\r\n    'black': '#1a1a1a'\r\n  };\r\n\r\n  // Create individual face geometries for each side\r\n  const faceGeometry = useMemo(() => new THREE.PlaneGeometry(size, size), [size]);\r\n\r\n  // Use stored colors instead of calculating from position\r\n  const getFaceColor = (faceIndex) => {\r\n    // Face indices: 0=front, 1=back, 2=right, 3=left, 4=top, 5=bottom\r\n    switch (faceIndex) {\r\n      case 0: return colors.front;\r\n      case 1: return colors.back;\r\n      case 2: return colors.right;\r\n      case 3: return colors.left;\r\n      case 4: return colors.top;\r\n      case 5: return colors.bottom;\r\n      default: return 'black';\r\n    }\r\n  };\r\n\r\n  // Face positions and rotations for a cube\r\n  const faces = [\r\n    { position: [0, 0, size/2], rotation: [0, 0, 0], color: getFaceColor(0) }, // Front\r\n    { position: [0, 0, -size/2], rotation: [0, Math.PI, 0], color: getFaceColor(1) }, // Back\r\n    { position: [size/2, 0, 0], rotation: [0, Math.PI/2, 0], color: getFaceColor(2) }, // Right\r\n    { position: [-size/2, 0, 0], rotation: [0, -Math.PI/2, 0], color: getFaceColor(3) }, // Left\r\n    { position: [0, size/2, 0], rotation: [-Math.PI/2, 0, 0], color: getFaceColor(4) }, // Top\r\n    { position: [0, -size/2, 0], rotation: [Math.PI/2, 0, 0], color: getFaceColor(5) }  // Bottom\r\n  ];\r\n\r\n  return (\r\n    <group ref={meshRef} position={position}>\r\n      {faces.map((face, index) => (\r\n        <mesh key={index} position={face.position} rotation={face.rotation}>\r\n          <primitive object={faceGeometry} />\r\n          <meshLambertMaterial \r\n            color={colorMap[face.color] || colorMap['black']}\r\n            side={THREE.DoubleSide}\r\n            emissive={colorMap[face.color] || colorMap['black']}\r\n            emissiveIntensity={0.1}\r\n          />\r\n        </mesh>\r\n      ))}\r\n    </group>\r\n  );\r\n}\r\n\r\n// Cube state management and rotation logic\r\nfunction useCubeState() {\r\n  const [cubeState, setCubeState] = useState(() => {\r\n    // Initialize solved cube state - track positions and original colors\r\n    const state = [];\r\n    for (let x = -1; x <= 1; x++) {\r\n      for (let y = -1; y <= 1; y++) {\r\n        for (let z = -1; z <= 1; z++) {\r\n          const position = [x, y, z];\r\n          // Store original colors for each face\r\n          const colors = {\r\n            front: z === 1 ? 'white' : 'black',\r\n            back: z === -1 ? 'yellow' : 'black',\r\n            right: x === 1 ? 'red' : 'black',\r\n            left: x === -1 ? 'orange' : 'black',\r\n            top: y === 1 ? 'blue' : 'black',\r\n            bottom: y === -1 ? 'green' : 'black'\r\n          };\r\n          state.push({ position: [...position], colors });\r\n        }\r\n      }\r\n    }\r\n    return state;\r\n  });\r\n\r\n  const [isAnimating, setIsAnimating] = useState(false);\r\n  const [animationQueue, setAnimationQueue] = useState([]);\r\n\r\n  // Rotation functions for each face\r\n  const rotateFace = useCallback((face, direction) => {\r\n    if (isAnimating) return;\r\n    \r\n    setIsAnimating(true);\r\n    \r\n    setCubeState(prevState => {\r\n      const newState = [...prevState];\r\n      \r\n      // Define which pieces belong to each face\r\n      const facePieces = {\r\n        'F': newState.filter(p => p.position[2] === 1), // Front face\r\n        'B': newState.filter(p => p.position[2] === -1), // Back face\r\n        'R': newState.filter(p => p.position[0] === 1), // Right face\r\n        'L': newState.filter(p => p.position[0] === -1), // Left face\r\n        'U': newState.filter(p => p.position[1] === 1), // Up face\r\n        'D': newState.filter(p => p.position[1] === -1) // Down face\r\n      };\r\n\r\n      const pieces = facePieces[face];\r\n      if (!pieces) return prevState;\r\n\r\n      // Apply rotation based on face and direction\r\n      pieces.forEach(piece => {\r\n        const [x, y, z] = piece.position;\r\n        let newX = x, newY = y, newZ = z;\r\n        \r\n        switch (face) {\r\n          case 'F': // Front face rotation\r\n            if (direction === 'clockwise') {\r\n              newX = -y;\r\n              newY = x;\r\n            } else {\r\n              newX = y;\r\n              newY = -x;\r\n            }\r\n            break;\r\n          case 'B': // Back face rotation\r\n            if (direction === 'clockwise') {\r\n              newX = y;\r\n              newY = -x;\r\n            } else {\r\n              newX = -y;\r\n              newY = x;\r\n            }\r\n            break;\r\n          case 'R': // Right face rotation\r\n            if (direction === 'clockwise') {\r\n              newZ = -y;\r\n              newY = z;\r\n            } else {\r\n              newZ = y;\r\n              newY = -z;\r\n            }\r\n            break;\r\n          case 'L': // Left face rotation\r\n            if (direction === 'clockwise') {\r\n              newZ = y;\r\n              newY = -z;\r\n            } else {\r\n              newZ = -y;\r\n              newY = z;\r\n            }\r\n            break;\r\n          case 'U': // Up face rotation\r\n            if (direction === 'clockwise') {\r\n              newX = z;\r\n              newZ = -x;\r\n            } else {\r\n              newX = -z;\r\n              newZ = x;\r\n            }\r\n            break;\r\n          case 'D': // Down face rotation\r\n            if (direction === 'clockwise') {\r\n              newX = -z;\r\n              newZ = x;\r\n            } else {\r\n              newX = z;\r\n              newZ = -x;\r\n            }\r\n            break;\r\n        }\r\n        \r\n        piece.position = [newX, newY, newZ];\r\n      });\r\n\r\n      return newState;\r\n    });\r\n    \r\n    // Animation delay\r\n    setTimeout(() => setIsAnimating(false), 300);\r\n  }, [isAnimating]);\r\n\r\n  // Execute scramble moves\r\n  const executeScramble = useCallback((queue) => {\r\n    if (queue.length === 0) {\r\n      setIsAnimating(false);\r\n      return;\r\n    }\r\n    \r\n    const { move, direction } = queue[0];\r\n    console.log(`Executing move: ${move} ${direction}`);\r\n    \r\n    // Apply the rotation immediately\r\n    setCubeState(prevState => {\r\n      const newState = [...prevState];\r\n      \r\n      // Define which pieces belong to each face\r\n      const facePieces = {\r\n        'F': newState.filter(p => p.position[2] === 1), // Front face\r\n        'B': newState.filter(p => p.position[2] === -1), // Back face\r\n        'R': newState.filter(p => p.position[0] === 1), // Right face\r\n        'L': newState.filter(p => p.position[0] === -1), // Left face\r\n        'U': newState.filter(p => p.position[1] === 1), // Up face\r\n        'D': newState.filter(p => p.position[1] === -1) // Down face\r\n      };\r\n\r\n      const pieces = facePieces[move];\r\n      if (!pieces) return prevState;\r\n\r\n      // Apply rotation based on face and direction\r\n      pieces.forEach(piece => {\r\n        const [x, y, z] = piece.position;\r\n        let newX = x, newY = y, newZ = z;\r\n        \r\n        switch (move) {\r\n          case 'F': // Front face rotation\r\n            if (direction === 'clockwise') {\r\n              newX = -y;\r\n              newY = x;\r\n            } else {\r\n              newX = y;\r\n              newY = -x;\r\n            }\r\n            break;\r\n          case 'B': // Back face rotation\r\n            if (direction === 'clockwise') {\r\n              newX = y;\r\n              newY = -x;\r\n            } else {\r\n              newX = -y;\r\n              newY = x;\r\n            }\r\n            break;\r\n          case 'R': // Right face rotation\r\n            if (direction === 'clockwise') {\r\n              newZ = -y;\r\n              newY = z;\r\n            } else {\r\n              newZ = y;\r\n              newY = -z;\r\n            }\r\n            break;\r\n          case 'L': // Left face rotation\r\n            if (direction === 'clockwise') {\r\n              newZ = y;\r\n              newY = -z;\r\n            } else {\r\n              newZ = -y;\r\n              newY = z;\r\n            }\r\n            break;\r\n          case 'U': // Up face rotation\r\n            if (direction === 'clockwise') {\r\n              newX = z;\r\n              newZ = -x;\r\n            } else {\r\n              newX = -z;\r\n              newZ = x;\r\n            }\r\n            break;\r\n          case 'D': // Down face rotation\r\n            if (direction === 'clockwise') {\r\n              newX = -z;\r\n              newZ = x;\r\n            } else {\r\n              newX = z;\r\n              newZ = -x;\r\n            }\r\n            break;\r\n        }\r\n        \r\n        piece.position = [newX, newY, newZ];\r\n      });\r\n\r\n      return newState;\r\n    });\r\n    \r\n    // Continue with the next move after a delay\r\n    setTimeout(() => {\r\n      executeScramble(queue.slice(1));\r\n    }, 350);\r\n  }, []);\r\n\r\n  // Scramble function using standard notation\r\n  const scramble = useCallback(() => {\r\n    console.log('Scramble function called');\r\n    if (isAnimating) {\r\n      console.log('Already animating, skipping scramble');\r\n      return;\r\n    }\r\n    \r\n    setIsAnimating(true);\r\n    console.log('Starting scramble animation');\r\n    \r\n    const moves = ['F', 'B', 'R', 'L', 'U', 'D'];\r\n    const directions = ['clockwise', 'counterclockwise'];\r\n    const scrambleLength = 20;\r\n    \r\n    let currentQueue = [];\r\n    let lastMove = '';\r\n    \r\n    for (let i = 0; i < scrambleLength; i++) {\r\n      let move;\r\n      let direction;\r\n      \r\n      // Avoid doing the same move twice in a row\r\n      do {\r\n        move = moves[Math.floor(Math.random() * moves.length)];\r\n      } while (move === lastMove);\r\n      \r\n      direction = directions[Math.floor(Math.random() * directions.length)];\r\n      lastMove = move;\r\n      \r\n      currentQueue.push({ move, direction });\r\n    }\r\n    \r\n    console.log('Generated scramble queue:', currentQueue);\r\n    setAnimationQueue(currentQueue);\r\n    executeScramble(currentQueue);\r\n  }, [isAnimating, executeScramble]);\r\n\r\n  // Reset function\r\n  const reset = useCallback(() => {\r\n    if (isAnimating) return;\r\n    \r\n    setCubeState(() => {\r\n      const state = [];\r\n      for (let x = -1; x <= 1; x++) {\r\n        for (let y = -1; y <= 1; y++) {\r\n          for (let z = -1; z <= 1; z++) {\r\n            const position = [x, y, z];\r\n            // Store original colors for each face\r\n            const colors = {\r\n              front: z === 1 ? 'white' : 'black',\r\n              back: z === -1 ? 'yellow' : 'black',\r\n              right: x === 1 ? 'red' : 'black',\r\n              left: x === -1 ? 'orange' : 'black',\r\n              top: y === 1 ? 'blue' : 'black',\r\n              bottom: y === -1 ? 'green' : 'black'\r\n            };\r\n            state.push({ position: [...position], colors });\r\n          }\r\n        }\r\n      }\r\n      return state;\r\n    });\r\n  }, [isAnimating]);\r\n\r\n  return {\r\n    cubeState,\r\n    isAnimating,\r\n    rotateFace,\r\n    scramble,\r\n    reset\r\n  };\r\n}\r\n\r\n// Main cube group component with enhanced structure\r\nfunction CubeGroup({ isRotating, autoRotate = false, onScramble, onReset }) {\r\n  const groupRef = useRef();\r\n  const [rotationSpeed] = useState({ x: 0.005, y: 0.01 });\r\n  \r\n  const { cubeState, isAnimating, rotateFace, scramble, reset } = useCubeState();\r\n  \r\n  // Expose functions to parent\r\n  React.useEffect(() => {\r\n    if (onScramble) onScramble(scramble);\r\n    if (onReset) onReset(reset);\r\n  }, [onScramble, onReset, scramble, reset]);\r\n  \r\n  useFrame((state) => {\r\n    if (autoRotate && groupRef.current && !isAnimating) {\r\n      groupRef.current.rotation.y += rotationSpeed.y;\r\n      groupRef.current.rotation.x += rotationSpeed.x;\r\n    }\r\n  });\r\n\r\n  return (\r\n    <group ref={groupRef}>\r\n      {cubeState.map((piece, index) => (\r\n        <CubePiece\r\n          key={index}\r\n          position={piece.position}\r\n          colors={piece.colors}\r\n        />\r\n      ))}\r\n    </group>\r\n  );\r\n}\r\n\r\n// Main Rubik's Cube component\r\nfunction RubiksCube({ isRotating, autoRotate = false, onScramble, onReset }) {\r\n  return (\r\n    <Canvas\r\n      camera={{ position: [6, 6, 6], fov: 60 }}\r\n      style={{ width: '100%', height: '100%' }}\r\n      gl={{ antialias: true, alpha: true }}\r\n    >\r\n      {/* Enhanced Lighting */}\r\n      <ambientLight intensity={0.8} />\r\n      <directionalLight \r\n        position={[10, 10, 5]} \r\n        intensity={2.0}\r\n        castShadow\r\n        shadow-mapSize-width={2048}\r\n        shadow-mapSize-height={2048}\r\n      />\r\n      <pointLight position={[-10, -10, -5]} intensity={1.5} />\r\n      <pointLight position={[10, -10, 5]} intensity={1.2} />\r\n      <spotLight\r\n        position={[0, 10, 0]}\r\n        angle={0.3}\r\n        penumbra={1}\r\n        intensity={1.0}\r\n        castShadow\r\n      />\r\n      \r\n      {/* Environment */}\r\n      <Environment preset=\"city\" />\r\n      \r\n      {/* Cube */}\r\n      <CubeGroup \r\n        isRotating={isRotating} \r\n        autoRotate={autoRotate}\r\n        onScramble={onScramble}\r\n        onReset={onReset}\r\n      />\r\n      \r\n      {/* Controls */}\r\n      <OrbitControls \r\n        enablePan={true}\r\n        enableZoom={true}\r\n        enableRotate={true}\r\n        autoRotate={false}\r\n        autoRotateSpeed={1}\r\n        minDistance={3}\r\n        maxDistance={15}\r\n        dampingFactor={0.05}\r\n        enableDamping={true}\r\n      />\r\n    </Canvas>\r\n  );\r\n}\r\n\r\nexport default RubiksCube; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}