{"ast":null,"code":"var _jsxFileName = \"C:\\\\Repo\\\\GitHub\\\\rubiks-cube\\\\src\\\\components\\\\RubiksCube.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$(),\n  _s3 = $RefreshSig$();\nimport React, { useState, useRef, useMemo, useCallback, useEffect } from 'react';\nimport { Canvas, useFrame } from '@react-three/fiber';\nimport { OrbitControls, Environment } from '@react-three/drei';\nimport * as THREE from 'three';\n\n// Enhanced logging function that will be visible in terminal\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst logToTerminal = (message, data = null, type = 'INFO') => {\n  const timestamp = new Date().toLocaleTimeString();\n  const prefix = type === 'ERROR' ? '❌' : type === 'WARNING' ? '⚠️' : type === 'SUCCESS' ? '✅' : '🎯';\n  const fullMessage = `${prefix} [${timestamp}] ${message}`;\n\n  // Log to browser console with enhanced formatting\n  console.log(`\\n${fullMessage}`);\n  if (data) {\n    if (typeof data === 'object') {\n      console.log(JSON.stringify(data, null, 2));\n    } else {\n      console.log(data);\n    }\n  }\n  console.log('='.repeat(80) + '\\n');\n\n  // Send to log server to print in terminal\n  fetch('http://localhost:3001/log', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      message: fullMessage,\n      data: data,\n      type: type\n    })\n  }).then(response => {\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    console.log('✅ Log sent to terminal successfully');\n  }).catch(error => {\n    console.error('❌ Could not send log to terminal server:', error);\n    console.log('💡 Make sure the log server is running with: npm run log-server');\n  });\n};\n\n// Function to create unique shapes for each piece with different border colors per face\nfunction createShapeWithFaceBorder(pieceId, size, faceIndex) {\n  // Use the 6 standard Rubik's cube colors for borders\n  const borderColors = ['#FFFFFF',\n  // Face 0 (front) - White\n  '#FF8C00',\n  // Face 1 (back) - Orange  \n  '#00FF00',\n  // Face 2 (right) - Green\n  '#DC143C',\n  // Face 3 (left) - Red\n  '#0000FF',\n  // Face 4 (top) - Blue\n  '#FFD700' // Face 5 (bottom) - Yellow\n  ];\n  const borderColor = borderColors[faceIndex] || '#000000';\n  const shapes = [\n  // 0-4: Basic geometric shapes (Squares) with individual face border colors\n  () => /*#__PURE__*/_jsxDEV(\"group\", {\n    position: [0, 0, 0.012],\n    children: [/*#__PURE__*/_jsxDEV(\"mesh\", {\n      children: [/*#__PURE__*/_jsxDEV(\"planeGeometry\", {\n        args: [size, size]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: \"red\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 50\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"mesh\", {\n      position: [0, 0, 0.001],\n      children: [/*#__PURE__*/_jsxDEV(\"planeGeometry\", {\n        args: [size * 0.95, size * 0.95]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 38\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: borderColor\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 85\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"mesh\", {\n      position: [0, 0, 0.002],\n      children: [/*#__PURE__*/_jsxDEV(\"planeGeometry\", {\n        args: [size * 0.9, size * 0.9]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 38\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: \"red\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 83\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 11\n  }, this),\n  // Square\n  () => /*#__PURE__*/_jsxDEV(\"group\", {\n    position: [0, 0, 0.012],\n    children: [/*#__PURE__*/_jsxDEV(\"mesh\", {\n      children: [/*#__PURE__*/_jsxDEV(\"planeGeometry\", {\n        args: [size, size]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: \"blue\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 50\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"mesh\", {\n      position: [0, 0, 0.001],\n      children: [/*#__PURE__*/_jsxDEV(\"planeGeometry\", {\n        args: [size * 0.95, size * 0.95]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 38\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: borderColor\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 85\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"mesh\", {\n      position: [0, 0, 0.002],\n      children: [/*#__PURE__*/_jsxDEV(\"planeGeometry\", {\n        args: [size * 0.9, size * 0.9]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 38\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: \"blue\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 83\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 11\n  }, this),\n  // Square\n  () => /*#__PURE__*/_jsxDEV(\"group\", {\n    position: [0, 0, 0.012],\n    children: [/*#__PURE__*/_jsxDEV(\"mesh\", {\n      children: [/*#__PURE__*/_jsxDEV(\"planeGeometry\", {\n        args: [size, size]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: \"green\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 50\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"mesh\", {\n      position: [0, 0, 0.001],\n      children: [/*#__PURE__*/_jsxDEV(\"planeGeometry\", {\n        args: [size * 0.95, size * 0.95]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 38\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: borderColor\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 85\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"mesh\", {\n      position: [0, 0, 0.002],\n      children: [/*#__PURE__*/_jsxDEV(\"planeGeometry\", {\n        args: [size * 0.9, size * 0.9]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 38\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: \"green\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 83\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 11\n  }, this),\n  // Square\n  () => /*#__PURE__*/_jsxDEV(\"group\", {\n    position: [0, 0, 0.012],\n    children: [/*#__PURE__*/_jsxDEV(\"mesh\", {\n      children: [/*#__PURE__*/_jsxDEV(\"planeGeometry\", {\n        args: [size, size]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: \"orange\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 50\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"mesh\", {\n      position: [0, 0, 0.001],\n      children: [/*#__PURE__*/_jsxDEV(\"planeGeometry\", {\n        args: [size * 0.95, size * 0.95]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 38\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: borderColor\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 85\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"mesh\", {\n      position: [0, 0, 0.002],\n      children: [/*#__PURE__*/_jsxDEV(\"planeGeometry\", {\n        args: [size * 0.9, size * 0.9]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 38\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: \"orange\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 83\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 11\n  }, this),\n  // Square\n  () => /*#__PURE__*/_jsxDEV(\"group\", {\n    position: [0, 0, 0.012],\n    children: [/*#__PURE__*/_jsxDEV(\"mesh\", {\n      children: [/*#__PURE__*/_jsxDEV(\"planeGeometry\", {\n        args: [size, size]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: \"purple\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 50\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"mesh\", {\n      position: [0, 0, 0.001],\n      children: [/*#__PURE__*/_jsxDEV(\"planeGeometry\", {\n        args: [size * 0.95, size * 0.95]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 38\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: borderColor\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 85\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"mesh\", {\n      position: [0, 0, 0.002],\n      children: [/*#__PURE__*/_jsxDEV(\"planeGeometry\", {\n        args: [size * 0.9, size * 0.9]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 38\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: \"purple\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 83\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 83,\n    columnNumber: 11\n  }, this),\n  // Square\n\n  // 5-9: Circles with individual face border colors\n  () => /*#__PURE__*/_jsxDEV(\"group\", {\n    position: [0, 0, 0.012],\n    children: [/*#__PURE__*/_jsxDEV(\"mesh\", {\n      children: [/*#__PURE__*/_jsxDEV(\"circleGeometry\", {\n        args: [size / 2, 32]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: \"red\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 51\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"mesh\", {\n      position: [0, 0, 0.001],\n      children: [/*#__PURE__*/_jsxDEV(\"circleGeometry\", {\n        args: [size * 0.45, 32]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 38\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: borderColor\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 79\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"mesh\", {\n      position: [0, 0, 0.002],\n      children: [/*#__PURE__*/_jsxDEV(\"circleGeometry\", {\n        args: [size * 0.4, 32]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 38\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: \"red\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 78\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 90,\n    columnNumber: 11\n  }, this),\n  // Circle\n  () => /*#__PURE__*/_jsxDEV(\"group\", {\n    position: [0, 0, 0.012],\n    children: [/*#__PURE__*/_jsxDEV(\"mesh\", {\n      children: [/*#__PURE__*/_jsxDEV(\"circleGeometry\", {\n        args: [size / 2, 32]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: \"blue\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 51\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"mesh\", {\n      position: [0, 0, 0.001],\n      children: [/*#__PURE__*/_jsxDEV(\"circleGeometry\", {\n        args: [size * 0.45, 32]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 38\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: borderColor\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 79\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"mesh\", {\n      position: [0, 0, 0.002],\n      children: [/*#__PURE__*/_jsxDEV(\"circleGeometry\", {\n        args: [size * 0.4, 32]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 38\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: \"blue\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 78\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 95,\n    columnNumber: 11\n  }, this),\n  // Circle\n  () => /*#__PURE__*/_jsxDEV(\"group\", {\n    position: [0, 0, 0.012],\n    children: [/*#__PURE__*/_jsxDEV(\"mesh\", {\n      children: [/*#__PURE__*/_jsxDEV(\"circleGeometry\", {\n        args: [size / 2, 32]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: \"green\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 51\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"mesh\", {\n      position: [0, 0, 0.001],\n      children: [/*#__PURE__*/_jsxDEV(\"circleGeometry\", {\n        args: [size * 0.45, 32]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 38\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: borderColor\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 79\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"mesh\", {\n      position: [0, 0, 0.002],\n      children: [/*#__PURE__*/_jsxDEV(\"circleGeometry\", {\n        args: [size * 0.4, 32]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 38\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: \"green\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 78\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 100,\n    columnNumber: 11\n  }, this),\n  // Circle\n  () => /*#__PURE__*/_jsxDEV(\"group\", {\n    position: [0, 0, 0.012],\n    children: [/*#__PURE__*/_jsxDEV(\"mesh\", {\n      children: [/*#__PURE__*/_jsxDEV(\"circleGeometry\", {\n        args: [size / 2, 32]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: \"orange\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 51\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"mesh\", {\n      position: [0, 0, 0.001],\n      children: [/*#__PURE__*/_jsxDEV(\"circleGeometry\", {\n        args: [size * 0.45, 32]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 38\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: borderColor\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 79\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"mesh\", {\n      position: [0, 0, 0.002],\n      children: [/*#__PURE__*/_jsxDEV(\"circleGeometry\", {\n        args: [size * 0.4, 32]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 38\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: \"orange\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 78\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 105,\n    columnNumber: 11\n  }, this),\n  // Circle\n  () => /*#__PURE__*/_jsxDEV(\"group\", {\n    position: [0, 0, 0.012],\n    children: [/*#__PURE__*/_jsxDEV(\"mesh\", {\n      children: [/*#__PURE__*/_jsxDEV(\"circleGeometry\", {\n        args: [size / 2, 32]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: \"yellow\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 51\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"mesh\", {\n      position: [0, 0, 0.001],\n      children: [/*#__PURE__*/_jsxDEV(\"circleGeometry\", {\n        args: [size * 0.45, 32]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 38\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: borderColor\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 79\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"mesh\", {\n      position: [0, 0, 0.002],\n      children: [/*#__PURE__*/_jsxDEV(\"circleGeometry\", {\n        args: [size * 0.4, 32]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 38\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: \"yellow\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 78\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 110,\n    columnNumber: 11\n  }, this),\n  // Circle\n\n  // 10-14: Triangles (flat cones to create triangle shapes) with individual face border colors\n  () => /*#__PURE__*/_jsxDEV(\"group\", {\n    position: [0, 0, 0.012],\n    children: [/*#__PURE__*/_jsxDEV(\"mesh\", {\n      rotation: [Math.PI / 2, 0, 0],\n      children: [/*#__PURE__*/_jsxDEV(\"coneGeometry\", {\n        args: [size / 2, 0.01, 3]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 42\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: \"cyan\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 83\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"mesh\", {\n      position: [0, 0, 0.001],\n      rotation: [Math.PI / 2, 0, 0],\n      children: [/*#__PURE__*/_jsxDEV(\"coneGeometry\", {\n        args: [size * 0.45, 0.01, 3]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 67\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: borderColor\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 111\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"mesh\", {\n      position: [0, 0, 0.002],\n      rotation: [Math.PI / 2, 0, 0],\n      children: [/*#__PURE__*/_jsxDEV(\"coneGeometry\", {\n        args: [size * 0.4, 0.01, 3]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 67\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: \"cyan\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 110\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 117,\n    columnNumber: 11\n  }, this),\n  // Triangle\n  () => /*#__PURE__*/_jsxDEV(\"group\", {\n    position: [0, 0, 0.012],\n    children: [/*#__PURE__*/_jsxDEV(\"mesh\", {\n      rotation: [Math.PI / 2, 0, 0],\n      children: [/*#__PURE__*/_jsxDEV(\"coneGeometry\", {\n        args: [size / 2, 0.01, 3]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 42\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: \"magenta\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 83\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"mesh\", {\n      position: [0, 0, 0.001],\n      rotation: [Math.PI / 2, 0, 0],\n      children: [/*#__PURE__*/_jsxDEV(\"coneGeometry\", {\n        args: [size * 0.45, 0.01, 3]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 67\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: borderColor\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 111\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"mesh\", {\n      position: [0, 0, 0.002],\n      rotation: [Math.PI / 2, 0, 0],\n      children: [/*#__PURE__*/_jsxDEV(\"coneGeometry\", {\n        args: [size * 0.4, 0.01, 3]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 67\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: \"magenta\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 110\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 122,\n    columnNumber: 11\n  }, this),\n  // Triangle\n  () => /*#__PURE__*/_jsxDEV(\"group\", {\n    position: [0, 0, 0.012],\n    children: [/*#__PURE__*/_jsxDEV(\"mesh\", {\n      rotation: [Math.PI / 2, 0, 0],\n      children: [/*#__PURE__*/_jsxDEV(\"coneGeometry\", {\n        args: [size / 2, 0.01, 3]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 42\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: \"lime\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 83\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"mesh\", {\n      position: [0, 0, 0.001],\n      rotation: [Math.PI / 2, 0, 0],\n      children: [/*#__PURE__*/_jsxDEV(\"coneGeometry\", {\n        args: [size * 0.45, 0.01, 3]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 67\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: borderColor\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 111\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"mesh\", {\n      position: [0, 0, 0.002],\n      rotation: [Math.PI / 2, 0, 0],\n      children: [/*#__PURE__*/_jsxDEV(\"coneGeometry\", {\n        args: [size * 0.4, 0.01, 3]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 67\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: \"lime\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 110\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 127,\n    columnNumber: 11\n  }, this),\n  // Triangle\n  () => /*#__PURE__*/_jsxDEV(\"group\", {\n    position: [0, 0, 0.012],\n    children: [/*#__PURE__*/_jsxDEV(\"mesh\", {\n      rotation: [Math.PI / 2, 0, 0],\n      children: [/*#__PURE__*/_jsxDEV(\"coneGeometry\", {\n        args: [size / 2, 0.01, 3]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 42\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: \"pink\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 83\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"mesh\", {\n      position: [0, 0, 0.001],\n      rotation: [Math.PI / 2, 0, 0],\n      children: [/*#__PURE__*/_jsxDEV(\"coneGeometry\", {\n        args: [size * 0.45, 0.01, 3]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 67\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: borderColor\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 111\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"mesh\", {\n      position: [0, 0, 0.002],\n      rotation: [Math.PI / 2, 0, 0],\n      children: [/*#__PURE__*/_jsxDEV(\"coneGeometry\", {\n        args: [size * 0.4, 0.01, 3]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 67\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: \"pink\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 110\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 132,\n    columnNumber: 11\n  }, this),\n  // Triangle\n  () => /*#__PURE__*/_jsxDEV(\"group\", {\n    position: [0, 0, 0.012],\n    children: [/*#__PURE__*/_jsxDEV(\"mesh\", {\n      rotation: [0, 0, Math.PI / 4],\n      children: [/*#__PURE__*/_jsxDEV(\"planeGeometry\", {\n        args: [size, size]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 42\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: \"purple\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 79\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"mesh\", {\n      position: [0, 0, 0.001],\n      rotation: [0, 0, Math.PI / 4],\n      children: [/*#__PURE__*/_jsxDEV(\"planeGeometry\", {\n        args: [size * 0.95, size * 0.95]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 67\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: borderColor\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 114\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"mesh\", {\n      position: [0, 0, 0.002],\n      rotation: [0, 0, Math.PI / 4],\n      children: [/*#__PURE__*/_jsxDEV(\"planeGeometry\", {\n        args: [size * 0.9, size * 0.9]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 67\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: \"purple\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 112\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 137,\n    columnNumber: 11\n  }, this),\n  // Diamond\n\n  // 15-19: Diamonds (rotated squares) with individual face border colors\n  () => /*#__PURE__*/_jsxDEV(\"group\", {\n    position: [0, 0, 0.012],\n    children: [/*#__PURE__*/_jsxDEV(\"mesh\", {\n      rotation: [0, 0, Math.PI / 4],\n      children: [/*#__PURE__*/_jsxDEV(\"planeGeometry\", {\n        args: [size, size]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 42\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: \"red\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 79\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"mesh\", {\n      position: [0, 0, 0.001],\n      rotation: [0, 0, Math.PI / 4],\n      children: [/*#__PURE__*/_jsxDEV(\"planeGeometry\", {\n        args: [size * 0.95, size * 0.95]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 67\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: borderColor\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 114\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"mesh\", {\n      position: [0, 0, 0.002],\n      rotation: [0, 0, Math.PI / 4],\n      children: [/*#__PURE__*/_jsxDEV(\"planeGeometry\", {\n        args: [size * 0.9, size * 0.9]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 67\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: \"red\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 112\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 144,\n    columnNumber: 11\n  }, this),\n  // Diamond\n  () => /*#__PURE__*/_jsxDEV(\"group\", {\n    position: [0, 0, 0.012],\n    children: [/*#__PURE__*/_jsxDEV(\"mesh\", {\n      rotation: [0, 0, Math.PI / 4],\n      children: [/*#__PURE__*/_jsxDEV(\"planeGeometry\", {\n        args: [size, size]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 42\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: \"blue\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 79\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"mesh\", {\n      position: [0, 0, 0.001],\n      rotation: [0, 0, Math.PI / 4],\n      children: [/*#__PURE__*/_jsxDEV(\"planeGeometry\", {\n        args: [size * 0.95, size * 0.95]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 67\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: borderColor\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 114\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"mesh\", {\n      position: [0, 0, 0.002],\n      rotation: [0, 0, Math.PI / 4],\n      children: [/*#__PURE__*/_jsxDEV(\"planeGeometry\", {\n        args: [size * 0.9, size * 0.9]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 67\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: \"blue\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 112\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 149,\n    columnNumber: 11\n  }, this),\n  // Diamond\n  () => /*#__PURE__*/_jsxDEV(\"group\", {\n    position: [0, 0, 0.012],\n    children: [/*#__PURE__*/_jsxDEV(\"mesh\", {\n      rotation: [0, 0, Math.PI / 4],\n      children: [/*#__PURE__*/_jsxDEV(\"planeGeometry\", {\n        args: [size, size]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 42\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: \"green\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 79\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"mesh\", {\n      position: [0, 0, 0.001],\n      rotation: [0, 0, Math.PI / 4],\n      children: [/*#__PURE__*/_jsxDEV(\"planeGeometry\", {\n        args: [size * 0.95, size * 0.95]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 67\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: borderColor\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 114\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"mesh\", {\n      position: [0, 0, 0.002],\n      rotation: [0, 0, Math.PI / 4],\n      children: [/*#__PURE__*/_jsxDEV(\"planeGeometry\", {\n        args: [size * 0.9, size * 0.9]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 67\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: \"green\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 112\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 154,\n    columnNumber: 11\n  }, this),\n  // Diamond\n  () => /*#__PURE__*/_jsxDEV(\"group\", {\n    position: [0, 0, 0.012],\n    children: [/*#__PURE__*/_jsxDEV(\"mesh\", {\n      rotation: [0, 0, Math.PI / 4],\n      children: [/*#__PURE__*/_jsxDEV(\"planeGeometry\", {\n        args: [size, size]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 42\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: \"orange\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 79\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"mesh\", {\n      position: [0, 0, 0.001],\n      rotation: [0, 0, Math.PI / 4],\n      children: [/*#__PURE__*/_jsxDEV(\"planeGeometry\", {\n        args: [size * 0.95, size * 0.95]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 67\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: borderColor\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 114\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"mesh\", {\n      position: [0, 0, 0.002],\n      rotation: [0, 0, Math.PI / 4],\n      children: [/*#__PURE__*/_jsxDEV(\"planeGeometry\", {\n        args: [size * 0.9, size * 0.9]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 67\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: \"orange\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 112\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 159,\n    columnNumber: 11\n  }, this),\n  // Diamond\n  () => /*#__PURE__*/_jsxDEV(\"group\", {\n    position: [0, 0, 0.012],\n    children: [/*#__PURE__*/_jsxDEV(\"mesh\", {\n      rotation: [0, 0, Math.PI / 4],\n      children: [/*#__PURE__*/_jsxDEV(\"planeGeometry\", {\n        args: [size, size]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 42\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: \"purple\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 79\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"mesh\", {\n      position: [0, 0, 0.001],\n      rotation: [0, 0, Math.PI / 4],\n      children: [/*#__PURE__*/_jsxDEV(\"planeGeometry\", {\n        args: [size * 0.95, size * 0.95]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 67\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: borderColor\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 114\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"mesh\", {\n      position: [0, 0, 0.002],\n      rotation: [0, 0, Math.PI / 4],\n      children: [/*#__PURE__*/_jsxDEV(\"planeGeometry\", {\n        args: [size * 0.9, size * 0.9]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 67\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: \"purple\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 112\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 164,\n    columnNumber: 11\n  }, this),\n  // Diamond\n\n  // 20-25: Triangles (flat cones to create triangle shapes) with individual face border colors\n  () => /*#__PURE__*/_jsxDEV(\"group\", {\n    position: [0, 0, 0.012],\n    children: [/*#__PURE__*/_jsxDEV(\"mesh\", {\n      rotation: [Math.PI / 2, 0, 0],\n      children: [/*#__PURE__*/_jsxDEV(\"coneGeometry\", {\n        args: [size / 2, 0.01, 3]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 42\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: \"cyan\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 83\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"mesh\", {\n      position: [0, 0, 0.001],\n      rotation: [Math.PI / 2, 0, 0],\n      children: [/*#__PURE__*/_jsxDEV(\"coneGeometry\", {\n        args: [size * 0.45, 0.01, 3]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 67\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: borderColor\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 111\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"mesh\", {\n      position: [0, 0, 0.002],\n      rotation: [Math.PI / 2, 0, 0],\n      children: [/*#__PURE__*/_jsxDEV(\"coneGeometry\", {\n        args: [size * 0.4, 0.01, 3]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 67\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: \"cyan\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 110\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 171,\n    columnNumber: 11\n  }, this),\n  // Triangle\n  () => /*#__PURE__*/_jsxDEV(\"group\", {\n    position: [0, 0, 0.012],\n    children: [/*#__PURE__*/_jsxDEV(\"mesh\", {\n      rotation: [Math.PI / 2, 0, 0],\n      children: [/*#__PURE__*/_jsxDEV(\"coneGeometry\", {\n        args: [size / 2, 0.01, 3]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 42\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: \"magenta\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 83\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"mesh\", {\n      position: [0, 0, 0.001],\n      rotation: [Math.PI / 2, 0, 0],\n      children: [/*#__PURE__*/_jsxDEV(\"coneGeometry\", {\n        args: [size * 0.45, 0.01, 3]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 67\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: borderColor\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 111\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"mesh\", {\n      position: [0, 0, 0.002],\n      rotation: [Math.PI / 2, 0, 0],\n      children: [/*#__PURE__*/_jsxDEV(\"coneGeometry\", {\n        args: [size * 0.4, 0.01, 3]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 67\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: \"magenta\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 110\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 176,\n    columnNumber: 11\n  }, this),\n  // Triangle\n  () => /*#__PURE__*/_jsxDEV(\"group\", {\n    position: [0, 0, 0.012],\n    children: [/*#__PURE__*/_jsxDEV(\"mesh\", {\n      rotation: [Math.PI / 2, 0, 0],\n      children: [/*#__PURE__*/_jsxDEV(\"coneGeometry\", {\n        args: [size / 2, 0.01, 3]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 42\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: \"lime\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 83\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"mesh\", {\n      position: [0, 0, 0.001],\n      rotation: [Math.PI / 2, 0, 0],\n      children: [/*#__PURE__*/_jsxDEV(\"coneGeometry\", {\n        args: [size * 0.45, 0.01, 3]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 67\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: borderColor\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 111\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"mesh\", {\n      position: [0, 0, 0.002],\n      rotation: [Math.PI / 2, 0, 0],\n      children: [/*#__PURE__*/_jsxDEV(\"coneGeometry\", {\n        args: [size * 0.4, 0.01, 3]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 67\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: \"lime\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 110\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 181,\n    columnNumber: 11\n  }, this),\n  // Triangle\n  () => /*#__PURE__*/_jsxDEV(\"group\", {\n    position: [0, 0, 0.012],\n    children: [/*#__PURE__*/_jsxDEV(\"mesh\", {\n      rotation: [Math.PI / 2, 0, 0],\n      children: [/*#__PURE__*/_jsxDEV(\"coneGeometry\", {\n        args: [size / 2, 0.01, 3]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 42\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: \"pink\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 83\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"mesh\", {\n      position: [0, 0, 0.001],\n      rotation: [Math.PI / 2, 0, 0],\n      children: [/*#__PURE__*/_jsxDEV(\"coneGeometry\", {\n        args: [size * 0.45, 0.01, 3]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 67\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: borderColor\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 111\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"mesh\", {\n      position: [0, 0, 0.002],\n      rotation: [Math.PI / 2, 0, 0],\n      children: [/*#__PURE__*/_jsxDEV(\"coneGeometry\", {\n        args: [size * 0.4, 0.01, 3]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 67\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: \"pink\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 110\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 186,\n    columnNumber: 11\n  }, this),\n  // Triangle\n  () => /*#__PURE__*/_jsxDEV(\"group\", {\n    position: [0, 0, 0.012],\n    children: [/*#__PURE__*/_jsxDEV(\"mesh\", {\n      rotation: [Math.PI / 2, 0, 0],\n      children: [/*#__PURE__*/_jsxDEV(\"coneGeometry\", {\n        args: [size / 2, 0.01, 3]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 42\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: \"purple\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 83\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"mesh\", {\n      position: [0, 0, 0.001],\n      rotation: [Math.PI / 2, 0, 0],\n      children: [/*#__PURE__*/_jsxDEV(\"coneGeometry\", {\n        args: [size * 0.45, 0.01, 3]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 67\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: borderColor\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 111\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"mesh\", {\n      position: [0, 0, 0.002],\n      rotation: [Math.PI / 2, 0, 0],\n      children: [/*#__PURE__*/_jsxDEV(\"coneGeometry\", {\n        args: [size * 0.4, 0.01, 3]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 67\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: \"purple\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 110\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 194,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 191,\n    columnNumber: 11\n  }, this),\n  // Triangle\n  () => /*#__PURE__*/_jsxDEV(\"group\", {\n    position: [0, 0, 0.012],\n    children: [/*#__PURE__*/_jsxDEV(\"mesh\", {\n      rotation: [Math.PI / 2, 0, 0],\n      children: [/*#__PURE__*/_jsxDEV(\"coneGeometry\", {\n        args: [size / 2, 0.01, 3]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 197,\n        columnNumber: 42\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: \"yellow\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 197,\n        columnNumber: 83\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 197,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"mesh\", {\n      position: [0, 0, 0.001],\n      rotation: [Math.PI / 2, 0, 0],\n      children: [/*#__PURE__*/_jsxDEV(\"coneGeometry\", {\n        args: [size * 0.45, 0.01, 3]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 67\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: borderColor\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 111\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 198,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"mesh\", {\n      position: [0, 0, 0.002],\n      rotation: [Math.PI / 2, 0, 0],\n      children: [/*#__PURE__*/_jsxDEV(\"coneGeometry\", {\n        args: [size * 0.4, 0.01, 3]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 67\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: \"yellow\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 110\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 199,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 196,\n    columnNumber: 11\n  }, this) // Triangle\n  ];\n  const shapeIndex = pieceId;\n  return shapes[shapeIndex]();\n}\n\n// Function to create unique shapes for each piece\nfunction createShape(pieceId, size) {\n  const shapes = [\n  // 0-4: Basic geometric shapes (Squares)\n  () => /*#__PURE__*/_jsxDEV(\"group\", {\n    position: [0, 0, 0.012],\n    children: [/*#__PURE__*/_jsxDEV(\"mesh\", {\n      children: [/*#__PURE__*/_jsxDEV(\"planeGeometry\", {\n        args: [size, size]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 211,\n        columnNumber: 49\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: \"red\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 211,\n        columnNumber: 86\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 211,\n      columnNumber: 43\n    }, this), /*#__PURE__*/_jsxDEV(\"mesh\", {\n      position: [0, 0, 0.001],\n      children: [/*#__PURE__*/_jsxDEV(\"planeGeometry\", {\n        args: [size * 0.95, size * 0.95]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 211,\n        columnNumber: 157\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: \"black\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 211,\n        columnNumber: 204\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 211,\n      columnNumber: 126\n    }, this), /*#__PURE__*/_jsxDEV(\"mesh\", {\n      position: [0, 0, 0.002],\n      children: [/*#__PURE__*/_jsxDEV(\"planeGeometry\", {\n        args: [size * 0.9, size * 0.9]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 211,\n        columnNumber: 277\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: \"red\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 211,\n        columnNumber: 322\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 211,\n      columnNumber: 246\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 211,\n    columnNumber: 11\n  }, this),\n  // Square\n  () => /*#__PURE__*/_jsxDEV(\"group\", {\n    position: [0, 0, 0.012],\n    children: [/*#__PURE__*/_jsxDEV(\"mesh\", {\n      children: [/*#__PURE__*/_jsxDEV(\"planeGeometry\", {\n        args: [size, size]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 212,\n        columnNumber: 49\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: \"blue\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 212,\n        columnNumber: 86\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 212,\n      columnNumber: 43\n    }, this), /*#__PURE__*/_jsxDEV(\"mesh\", {\n      position: [0, 0, 0.001],\n      children: [/*#__PURE__*/_jsxDEV(\"planeGeometry\", {\n        args: [size * 0.95, size * 0.95]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 212,\n        columnNumber: 158\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: \"black\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 212,\n        columnNumber: 205\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 212,\n      columnNumber: 127\n    }, this), /*#__PURE__*/_jsxDEV(\"mesh\", {\n      position: [0, 0, 0.002],\n      children: [/*#__PURE__*/_jsxDEV(\"planeGeometry\", {\n        args: [size * 0.9, size * 0.9]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 212,\n        columnNumber: 278\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: \"blue\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 212,\n        columnNumber: 323\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 212,\n      columnNumber: 247\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 212,\n    columnNumber: 11\n  }, this),\n  // Square\n  () => /*#__PURE__*/_jsxDEV(\"group\", {\n    position: [0, 0, 0.012],\n    children: [/*#__PURE__*/_jsxDEV(\"mesh\", {\n      children: [/*#__PURE__*/_jsxDEV(\"planeGeometry\", {\n        args: [size, size]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 213,\n        columnNumber: 49\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: \"green\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 213,\n        columnNumber: 86\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 213,\n      columnNumber: 43\n    }, this), /*#__PURE__*/_jsxDEV(\"mesh\", {\n      position: [0, 0, 0.001],\n      children: [/*#__PURE__*/_jsxDEV(\"planeGeometry\", {\n        args: [size * 0.95, size * 0.95]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 213,\n        columnNumber: 159\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: \"black\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 213,\n        columnNumber: 206\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 213,\n      columnNumber: 128\n    }, this), /*#__PURE__*/_jsxDEV(\"mesh\", {\n      position: [0, 0, 0.002],\n      children: [/*#__PURE__*/_jsxDEV(\"planeGeometry\", {\n        args: [size * 0.9, size * 0.9]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 213,\n        columnNumber: 279\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: \"green\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 213,\n        columnNumber: 324\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 213,\n      columnNumber: 248\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 213,\n    columnNumber: 11\n  }, this),\n  // Square\n  () => /*#__PURE__*/_jsxDEV(\"group\", {\n    position: [0, 0, 0.012],\n    children: [/*#__PURE__*/_jsxDEV(\"mesh\", {\n      children: [/*#__PURE__*/_jsxDEV(\"planeGeometry\", {\n        args: [size, size]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 49\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: \"orange\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 86\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 214,\n      columnNumber: 43\n    }, this), /*#__PURE__*/_jsxDEV(\"mesh\", {\n      position: [0, 0, 0.001],\n      children: [/*#__PURE__*/_jsxDEV(\"planeGeometry\", {\n        args: [size * 0.95, size * 0.95]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 160\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: \"black\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 207\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 214,\n      columnNumber: 129\n    }, this), /*#__PURE__*/_jsxDEV(\"mesh\", {\n      position: [0, 0, 0.002],\n      children: [/*#__PURE__*/_jsxDEV(\"planeGeometry\", {\n        args: [size * 0.9, size * 0.9]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 280\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: \"orange\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 325\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 214,\n      columnNumber: 249\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 214,\n    columnNumber: 11\n  }, this),\n  // Square\n  () => /*#__PURE__*/_jsxDEV(\"group\", {\n    position: [0, 0, 0.012],\n    children: [/*#__PURE__*/_jsxDEV(\"mesh\", {\n      children: [/*#__PURE__*/_jsxDEV(\"planeGeometry\", {\n        args: [size, size]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 215,\n        columnNumber: 49\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: \"purple\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 215,\n        columnNumber: 86\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 215,\n      columnNumber: 43\n    }, this), /*#__PURE__*/_jsxDEV(\"mesh\", {\n      position: [0, 0, 0.001],\n      children: [/*#__PURE__*/_jsxDEV(\"planeGeometry\", {\n        args: [size * 0.95, size * 0.95]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 215,\n        columnNumber: 160\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: \"black\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 215,\n        columnNumber: 207\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 215,\n      columnNumber: 129\n    }, this), /*#__PURE__*/_jsxDEV(\"mesh\", {\n      position: [0, 0, 0.002],\n      children: [/*#__PURE__*/_jsxDEV(\"planeGeometry\", {\n        args: [size * 0.9, size * 0.9]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 215,\n        columnNumber: 280\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: \"purple\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 215,\n        columnNumber: 325\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 215,\n      columnNumber: 249\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 215,\n    columnNumber: 11\n  }, this),\n  // Square\n\n  // 5-9: Circles\n  () => /*#__PURE__*/_jsxDEV(\"group\", {\n    position: [0, 0, 0.012],\n    children: [/*#__PURE__*/_jsxDEV(\"mesh\", {\n      children: [/*#__PURE__*/_jsxDEV(\"circleGeometry\", {\n        args: [size / 2, 32]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 218,\n        columnNumber: 49\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: \"red\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 218,\n        columnNumber: 87\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 218,\n      columnNumber: 43\n    }, this), /*#__PURE__*/_jsxDEV(\"mesh\", {\n      position: [0, 0, 0.001],\n      children: [/*#__PURE__*/_jsxDEV(\"circleGeometry\", {\n        args: [size * 0.45, 32]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 218,\n        columnNumber: 158\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: \"black\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 218,\n        columnNumber: 199\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 218,\n      columnNumber: 127\n    }, this), /*#__PURE__*/_jsxDEV(\"mesh\", {\n      position: [0, 0, 0.002],\n      children: [/*#__PURE__*/_jsxDEV(\"circleGeometry\", {\n        args: [size * 0.4, 32]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 218,\n        columnNumber: 272\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: \"red\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 218,\n        columnNumber: 312\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 218,\n      columnNumber: 241\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 218,\n    columnNumber: 11\n  }, this),\n  // Circle\n  () => /*#__PURE__*/_jsxDEV(\"group\", {\n    position: [0, 0, 0.012],\n    children: [/*#__PURE__*/_jsxDEV(\"mesh\", {\n      children: [/*#__PURE__*/_jsxDEV(\"circleGeometry\", {\n        args: [size / 2, 32]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 219,\n        columnNumber: 49\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: \"blue\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 219,\n        columnNumber: 87\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 219,\n      columnNumber: 43\n    }, this), /*#__PURE__*/_jsxDEV(\"mesh\", {\n      position: [0, 0, 0.001],\n      children: [/*#__PURE__*/_jsxDEV(\"circleGeometry\", {\n        args: [size * 0.45, 32]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 219,\n        columnNumber: 159\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: \"black\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 219,\n        columnNumber: 200\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 219,\n      columnNumber: 128\n    }, this), /*#__PURE__*/_jsxDEV(\"mesh\", {\n      position: [0, 0, 0.002],\n      children: [/*#__PURE__*/_jsxDEV(\"circleGeometry\", {\n        args: [size * 0.4, 32]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 219,\n        columnNumber: 273\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: \"blue\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 219,\n        columnNumber: 313\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 219,\n      columnNumber: 242\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 219,\n    columnNumber: 11\n  }, this),\n  // Circle\n  () => /*#__PURE__*/_jsxDEV(\"group\", {\n    position: [0, 0, 0.012],\n    children: [/*#__PURE__*/_jsxDEV(\"mesh\", {\n      children: [/*#__PURE__*/_jsxDEV(\"circleGeometry\", {\n        args: [size / 2, 32]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 220,\n        columnNumber: 49\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: \"green\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 220,\n        columnNumber: 87\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 220,\n      columnNumber: 43\n    }, this), /*#__PURE__*/_jsxDEV(\"mesh\", {\n      position: [0, 0, 0.001],\n      children: [/*#__PURE__*/_jsxDEV(\"circleGeometry\", {\n        args: [size * 0.45, 32]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 220,\n        columnNumber: 160\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: \"black\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 220,\n        columnNumber: 201\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 220,\n      columnNumber: 129\n    }, this), /*#__PURE__*/_jsxDEV(\"mesh\", {\n      position: [0, 0, 0.002],\n      children: [/*#__PURE__*/_jsxDEV(\"circleGeometry\", {\n        args: [size * 0.4, 32]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 220,\n        columnNumber: 274\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: \"green\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 220,\n        columnNumber: 314\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 220,\n      columnNumber: 243\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 220,\n    columnNumber: 11\n  }, this),\n  // Circle\n  () => /*#__PURE__*/_jsxDEV(\"group\", {\n    position: [0, 0, 0.012],\n    children: [/*#__PURE__*/_jsxDEV(\"mesh\", {\n      children: [/*#__PURE__*/_jsxDEV(\"circleGeometry\", {\n        args: [size / 2, 32]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 221,\n        columnNumber: 49\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: \"orange\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 221,\n        columnNumber: 87\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 221,\n      columnNumber: 43\n    }, this), /*#__PURE__*/_jsxDEV(\"mesh\", {\n      position: [0, 0, 0.001],\n      children: [/*#__PURE__*/_jsxDEV(\"circleGeometry\", {\n        args: [size * 0.45, 32]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 221,\n        columnNumber: 161\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: \"black\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 221,\n        columnNumber: 202\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 221,\n      columnNumber: 130\n    }, this), /*#__PURE__*/_jsxDEV(\"mesh\", {\n      position: [0, 0, 0.002],\n      children: [/*#__PURE__*/_jsxDEV(\"circleGeometry\", {\n        args: [size * 0.4, 32]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 221,\n        columnNumber: 275\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: \"orange\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 221,\n        columnNumber: 315\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 221,\n      columnNumber: 244\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 221,\n    columnNumber: 11\n  }, this),\n  // Circle\n  () => /*#__PURE__*/_jsxDEV(\"group\", {\n    position: [0, 0, 0.012],\n    children: [/*#__PURE__*/_jsxDEV(\"mesh\", {\n      children: [/*#__PURE__*/_jsxDEV(\"circleGeometry\", {\n        args: [size / 2, 32]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 222,\n        columnNumber: 49\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: \"yellow\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 222,\n        columnNumber: 87\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 222,\n      columnNumber: 43\n    }, this), /*#__PURE__*/_jsxDEV(\"mesh\", {\n      position: [0, 0, 0.001],\n      children: [/*#__PURE__*/_jsxDEV(\"circleGeometry\", {\n        args: [size * 0.45, 32]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 222,\n        columnNumber: 161\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: \"black\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 222,\n        columnNumber: 202\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 222,\n      columnNumber: 130\n    }, this), /*#__PURE__*/_jsxDEV(\"mesh\", {\n      position: [0, 0, 0.002],\n      children: [/*#__PURE__*/_jsxDEV(\"circleGeometry\", {\n        args: [size * 0.4, 32]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 222,\n        columnNumber: 275\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: \"yellow\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 222,\n        columnNumber: 315\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 222,\n      columnNumber: 244\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 222,\n    columnNumber: 11\n  }, this),\n  // Circle\n\n  // 10-14: Triangles (flat cones to create triangle shapes)\n  () => /*#__PURE__*/_jsxDEV(\"group\", {\n    position: [0, 0, 0.012],\n    children: [/*#__PURE__*/_jsxDEV(\"mesh\", {\n      rotation: [Math.PI / 2, 0, 0],\n      children: [/*#__PURE__*/_jsxDEV(\"coneGeometry\", {\n        args: [size / 2, 0.01, 3]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 225,\n        columnNumber: 78\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: \"cyan\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 225,\n        columnNumber: 119\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 225,\n      columnNumber: 43\n    }, this), /*#__PURE__*/_jsxDEV(\"mesh\", {\n      position: [0, 0, 0.001],\n      rotation: [Math.PI / 2, 0, 0],\n      children: [/*#__PURE__*/_jsxDEV(\"coneGeometry\", {\n        args: [size * 0.45, 0.01, 3]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 225,\n        columnNumber: 220\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: \"black\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 225,\n        columnNumber: 264\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 225,\n      columnNumber: 160\n    }, this), /*#__PURE__*/_jsxDEV(\"mesh\", {\n      position: [0, 0, 0.002],\n      rotation: [Math.PI / 2, 0, 0],\n      children: [/*#__PURE__*/_jsxDEV(\"coneGeometry\", {\n        args: [size * 0.4, 0.01, 3]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 225,\n        columnNumber: 366\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: \"cyan\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 225,\n        columnNumber: 409\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 225,\n      columnNumber: 306\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 225,\n    columnNumber: 11\n  }, this),\n  // Triangle\n  () => /*#__PURE__*/_jsxDEV(\"group\", {\n    position: [0, 0, 0.012],\n    children: [/*#__PURE__*/_jsxDEV(\"mesh\", {\n      rotation: [Math.PI / 2, 0, 0],\n      children: [/*#__PURE__*/_jsxDEV(\"coneGeometry\", {\n        args: [size / 2, 0.01, 3]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 226,\n        columnNumber: 78\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: \"magenta\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 226,\n        columnNumber: 119\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 226,\n      columnNumber: 43\n    }, this), /*#__PURE__*/_jsxDEV(\"mesh\", {\n      position: [0, 0, 0.001],\n      rotation: [Math.PI / 2, 0, 0],\n      children: [/*#__PURE__*/_jsxDEV(\"coneGeometry\", {\n        args: [size * 0.45, 0.01, 3]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 226,\n        columnNumber: 223\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: \"black\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 226,\n        columnNumber: 267\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 226,\n      columnNumber: 163\n    }, this), /*#__PURE__*/_jsxDEV(\"mesh\", {\n      position: [0, 0, 0.002],\n      rotation: [Math.PI / 2, 0, 0],\n      children: [/*#__PURE__*/_jsxDEV(\"coneGeometry\", {\n        args: [size * 0.4, 0.01, 3]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 226,\n        columnNumber: 369\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: \"magenta\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 226,\n        columnNumber: 412\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 226,\n      columnNumber: 309\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 226,\n    columnNumber: 11\n  }, this),\n  // Triangle\n  () => /*#__PURE__*/_jsxDEV(\"group\", {\n    position: [0, 0, 0.012],\n    children: [/*#__PURE__*/_jsxDEV(\"mesh\", {\n      rotation: [Math.PI / 2, 0, 0],\n      children: [/*#__PURE__*/_jsxDEV(\"coneGeometry\", {\n        args: [size / 2, 0.01, 3]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 227,\n        columnNumber: 78\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: \"lime\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 227,\n        columnNumber: 119\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 227,\n      columnNumber: 43\n    }, this), /*#__PURE__*/_jsxDEV(\"mesh\", {\n      position: [0, 0, 0.001],\n      rotation: [Math.PI / 2, 0, 0],\n      children: [/*#__PURE__*/_jsxDEV(\"coneGeometry\", {\n        args: [size * 0.45, 0.01, 3]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 227,\n        columnNumber: 220\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: \"black\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 227,\n        columnNumber: 264\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 227,\n      columnNumber: 160\n    }, this), /*#__PURE__*/_jsxDEV(\"mesh\", {\n      position: [0, 0, 0.002],\n      rotation: [Math.PI / 2, 0, 0],\n      children: [/*#__PURE__*/_jsxDEV(\"coneGeometry\", {\n        args: [size * 0.4, 0.01, 3]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 227,\n        columnNumber: 366\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: \"lime\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 227,\n        columnNumber: 409\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 227,\n      columnNumber: 306\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 227,\n    columnNumber: 11\n  }, this),\n  // Triangle\n  () => /*#__PURE__*/_jsxDEV(\"group\", {\n    position: [0, 0, 0.012],\n    children: [/*#__PURE__*/_jsxDEV(\"mesh\", {\n      rotation: [Math.PI / 2, 0, 0],\n      children: [/*#__PURE__*/_jsxDEV(\"coneGeometry\", {\n        args: [size / 2, 0.01, 3]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 228,\n        columnNumber: 78\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: \"pink\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 228,\n        columnNumber: 119\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 228,\n      columnNumber: 43\n    }, this), /*#__PURE__*/_jsxDEV(\"mesh\", {\n      position: [0, 0, 0.001],\n      rotation: [Math.PI / 2, 0, 0],\n      children: [/*#__PURE__*/_jsxDEV(\"coneGeometry\", {\n        args: [size * 0.45, 0.01, 3]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 228,\n        columnNumber: 220\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: \"black\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 228,\n        columnNumber: 264\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 228,\n      columnNumber: 160\n    }, this), /*#__PURE__*/_jsxDEV(\"mesh\", {\n      position: [0, 0, 0.002],\n      rotation: [Math.PI / 2, 0, 0],\n      children: [/*#__PURE__*/_jsxDEV(\"coneGeometry\", {\n        args: [size * 0.4, 0.01, 3]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 228,\n        columnNumber: 366\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: \"pink\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 228,\n        columnNumber: 409\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 228,\n      columnNumber: 306\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 228,\n    columnNumber: 11\n  }, this),\n  // Triangle\n  () => /*#__PURE__*/_jsxDEV(\"group\", {\n    position: [0, 0, 0.012],\n    children: [/*#__PURE__*/_jsxDEV(\"mesh\", {\n      rotation: [0, 0, Math.PI / 4],\n      children: [/*#__PURE__*/_jsxDEV(\"planeGeometry\", {\n        args: [size, size]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 229,\n        columnNumber: 78\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: \"purple\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 229,\n        columnNumber: 115\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 229,\n      columnNumber: 43\n    }, this), /*#__PURE__*/_jsxDEV(\"mesh\", {\n      position: [0, 0, 0.001],\n      rotation: [0, 0, Math.PI / 4],\n      children: [/*#__PURE__*/_jsxDEV(\"planeGeometry\", {\n        args: [size * 0.95, size * 0.95]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 229,\n        columnNumber: 218\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: \"black\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 229,\n        columnNumber: 265\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 229,\n      columnNumber: 158\n    }, this), /*#__PURE__*/_jsxDEV(\"mesh\", {\n      position: [0, 0, 0.002],\n      rotation: [0, 0, Math.PI / 4],\n      children: [/*#__PURE__*/_jsxDEV(\"planeGeometry\", {\n        args: [size * 0.9, size * 0.9]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 229,\n        columnNumber: 367\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: \"purple\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 229,\n        columnNumber: 412\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 229,\n      columnNumber: 307\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 229,\n    columnNumber: 11\n  }, this),\n  // Diamond\n\n  // 15-19: Diamonds (rotated squares)\n  () => /*#__PURE__*/_jsxDEV(\"group\", {\n    position: [0, 0, 0.012],\n    children: [/*#__PURE__*/_jsxDEV(\"mesh\", {\n      rotation: [0, 0, Math.PI / 4],\n      children: [/*#__PURE__*/_jsxDEV(\"planeGeometry\", {\n        args: [size, size]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 232,\n        columnNumber: 78\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: \"red\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 232,\n        columnNumber: 115\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 232,\n      columnNumber: 43\n    }, this), /*#__PURE__*/_jsxDEV(\"mesh\", {\n      position: [0, 0, 0.001],\n      rotation: [0, 0, Math.PI / 4],\n      children: [/*#__PURE__*/_jsxDEV(\"planeGeometry\", {\n        args: [size * 0.95, size * 0.95]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 232,\n        columnNumber: 215\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: \"black\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 232,\n        columnNumber: 262\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 232,\n      columnNumber: 155\n    }, this), /*#__PURE__*/_jsxDEV(\"mesh\", {\n      position: [0, 0, 0.002],\n      rotation: [0, 0, Math.PI / 4],\n      children: [/*#__PURE__*/_jsxDEV(\"planeGeometry\", {\n        args: [size * 0.9, size * 0.9]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 232,\n        columnNumber: 364\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: \"red\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 232,\n        columnNumber: 409\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 232,\n      columnNumber: 304\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 232,\n    columnNumber: 11\n  }, this),\n  // Diamond\n  () => /*#__PURE__*/_jsxDEV(\"group\", {\n    position: [0, 0, 0.012],\n    children: [/*#__PURE__*/_jsxDEV(\"mesh\", {\n      rotation: [0, 0, Math.PI / 4],\n      children: [/*#__PURE__*/_jsxDEV(\"planeGeometry\", {\n        args: [size, size]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 233,\n        columnNumber: 78\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: \"blue\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 233,\n        columnNumber: 115\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 233,\n      columnNumber: 43\n    }, this), /*#__PURE__*/_jsxDEV(\"mesh\", {\n      position: [0, 0, 0.001],\n      rotation: [0, 0, Math.PI / 4],\n      children: [/*#__PURE__*/_jsxDEV(\"planeGeometry\", {\n        args: [size * 0.95, size * 0.95]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 233,\n        columnNumber: 216\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: \"black\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 233,\n        columnNumber: 263\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 233,\n      columnNumber: 156\n    }, this), /*#__PURE__*/_jsxDEV(\"mesh\", {\n      position: [0, 0, 0.002],\n      rotation: [0, 0, Math.PI / 4],\n      children: [/*#__PURE__*/_jsxDEV(\"planeGeometry\", {\n        args: [size * 0.9, size * 0.9]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 233,\n        columnNumber: 365\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: \"blue\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 233,\n        columnNumber: 410\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 233,\n      columnNumber: 305\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 233,\n    columnNumber: 11\n  }, this),\n  // Diamond\n  () => /*#__PURE__*/_jsxDEV(\"group\", {\n    position: [0, 0, 0.012],\n    children: [/*#__PURE__*/_jsxDEV(\"mesh\", {\n      rotation: [0, 0, Math.PI / 4],\n      children: [/*#__PURE__*/_jsxDEV(\"planeGeometry\", {\n        args: [size, size]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 234,\n        columnNumber: 78\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: \"green\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 234,\n        columnNumber: 115\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 234,\n      columnNumber: 43\n    }, this), /*#__PURE__*/_jsxDEV(\"mesh\", {\n      position: [0, 0, 0.001],\n      rotation: [0, 0, Math.PI / 4],\n      children: [/*#__PURE__*/_jsxDEV(\"planeGeometry\", {\n        args: [size * 0.95, size * 0.95]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 234,\n        columnNumber: 217\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: \"black\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 234,\n        columnNumber: 264\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 234,\n      columnNumber: 157\n    }, this), /*#__PURE__*/_jsxDEV(\"mesh\", {\n      position: [0, 0, 0.002],\n      rotation: [0, 0, Math.PI / 4],\n      children: [/*#__PURE__*/_jsxDEV(\"planeGeometry\", {\n        args: [size * 0.9, size * 0.9]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 234,\n        columnNumber: 366\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: \"green\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 234,\n        columnNumber: 411\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 234,\n      columnNumber: 306\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 234,\n    columnNumber: 11\n  }, this),\n  // Diamond\n  () => /*#__PURE__*/_jsxDEV(\"group\", {\n    position: [0, 0, 0.012],\n    children: [/*#__PURE__*/_jsxDEV(\"mesh\", {\n      rotation: [0, 0, Math.PI / 4],\n      children: [/*#__PURE__*/_jsxDEV(\"planeGeometry\", {\n        args: [size, size]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 235,\n        columnNumber: 78\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: \"orange\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 235,\n        columnNumber: 115\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 235,\n      columnNumber: 43\n    }, this), /*#__PURE__*/_jsxDEV(\"mesh\", {\n      position: [0, 0, 0.001],\n      rotation: [0, 0, Math.PI / 4],\n      children: [/*#__PURE__*/_jsxDEV(\"planeGeometry\", {\n        args: [size * 0.95, size * 0.95]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 235,\n        columnNumber: 218\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: \"black\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 235,\n        columnNumber: 265\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 235,\n      columnNumber: 158\n    }, this), /*#__PURE__*/_jsxDEV(\"mesh\", {\n      position: [0, 0, 0.002],\n      rotation: [0, 0, Math.PI / 4],\n      children: [/*#__PURE__*/_jsxDEV(\"planeGeometry\", {\n        args: [size * 0.9, size * 0.9]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 235,\n        columnNumber: 367\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: \"orange\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 235,\n        columnNumber: 412\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 235,\n      columnNumber: 307\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 235,\n    columnNumber: 11\n  }, this),\n  // Diamond\n  () => /*#__PURE__*/_jsxDEV(\"group\", {\n    position: [0, 0, 0.012],\n    children: [/*#__PURE__*/_jsxDEV(\"mesh\", {\n      rotation: [0, 0, Math.PI / 4],\n      children: [/*#__PURE__*/_jsxDEV(\"planeGeometry\", {\n        args: [size, size]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 236,\n        columnNumber: 78\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: \"purple\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 236,\n        columnNumber: 115\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 236,\n      columnNumber: 43\n    }, this), /*#__PURE__*/_jsxDEV(\"mesh\", {\n      position: [0, 0, 0.001],\n      rotation: [0, 0, Math.PI / 4],\n      children: [/*#__PURE__*/_jsxDEV(\"planeGeometry\", {\n        args: [size * 0.95, size * 0.95]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 236,\n        columnNumber: 218\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: \"black\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 236,\n        columnNumber: 265\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 236,\n      columnNumber: 158\n    }, this), /*#__PURE__*/_jsxDEV(\"mesh\", {\n      position: [0, 0, 0.002],\n      rotation: [0, 0, Math.PI / 4],\n      children: [/*#__PURE__*/_jsxDEV(\"planeGeometry\", {\n        args: [size * 0.9, size * 0.9]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 236,\n        columnNumber: 367\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: \"purple\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 236,\n        columnNumber: 412\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 236,\n      columnNumber: 307\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 236,\n    columnNumber: 11\n  }, this),\n  // Diamond\n\n  // 20-25: Triangles (flat cones to create triangle shapes)\n  () => /*#__PURE__*/_jsxDEV(\"group\", {\n    position: [0, 0, 0.012],\n    children: [/*#__PURE__*/_jsxDEV(\"mesh\", {\n      rotation: [Math.PI / 2, 0, 0],\n      children: [/*#__PURE__*/_jsxDEV(\"coneGeometry\", {\n        args: [size / 2, 0.01, 3]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 239,\n        columnNumber: 78\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: \"cyan\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 239,\n        columnNumber: 119\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 239,\n      columnNumber: 43\n    }, this), /*#__PURE__*/_jsxDEV(\"mesh\", {\n      position: [0, 0, 0.001],\n      rotation: [Math.PI / 2, 0, 0],\n      children: [/*#__PURE__*/_jsxDEV(\"coneGeometry\", {\n        args: [size * 0.45, 0.01, 3]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 239,\n        columnNumber: 220\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: \"black\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 239,\n        columnNumber: 264\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 239,\n      columnNumber: 160\n    }, this), /*#__PURE__*/_jsxDEV(\"mesh\", {\n      position: [0, 0, 0.002],\n      rotation: [Math.PI / 2, 0, 0],\n      children: [/*#__PURE__*/_jsxDEV(\"coneGeometry\", {\n        args: [size * 0.4, 0.01, 3]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 239,\n        columnNumber: 366\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: \"cyan\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 239,\n        columnNumber: 409\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 239,\n      columnNumber: 306\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 239,\n    columnNumber: 11\n  }, this),\n  // Triangle\n  () => /*#__PURE__*/_jsxDEV(\"group\", {\n    position: [0, 0, 0.012],\n    children: [/*#__PURE__*/_jsxDEV(\"mesh\", {\n      rotation: [Math.PI / 2, 0, 0],\n      children: [/*#__PURE__*/_jsxDEV(\"coneGeometry\", {\n        args: [size / 2, 0.01, 3]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 240,\n        columnNumber: 78\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: \"magenta\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 240,\n        columnNumber: 119\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 240,\n      columnNumber: 43\n    }, this), /*#__PURE__*/_jsxDEV(\"mesh\", {\n      position: [0, 0, 0.001],\n      rotation: [Math.PI / 2, 0, 0],\n      children: [/*#__PURE__*/_jsxDEV(\"coneGeometry\", {\n        args: [size * 0.45, 0.01, 3]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 240,\n        columnNumber: 223\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: \"black\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 240,\n        columnNumber: 267\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 240,\n      columnNumber: 163\n    }, this), /*#__PURE__*/_jsxDEV(\"mesh\", {\n      position: [0, 0, 0.002],\n      rotation: [Math.PI / 2, 0, 0],\n      children: [/*#__PURE__*/_jsxDEV(\"coneGeometry\", {\n        args: [size * 0.4, 0.01, 3]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 240,\n        columnNumber: 369\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: \"magenta\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 240,\n        columnNumber: 412\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 240,\n      columnNumber: 309\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 240,\n    columnNumber: 11\n  }, this),\n  // Triangle\n  () => /*#__PURE__*/_jsxDEV(\"group\", {\n    position: [0, 0, 0.012],\n    children: [/*#__PURE__*/_jsxDEV(\"mesh\", {\n      rotation: [Math.PI / 2, 0, 0],\n      children: [/*#__PURE__*/_jsxDEV(\"coneGeometry\", {\n        args: [size / 2, 0.01, 3]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 241,\n        columnNumber: 78\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: \"lime\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 241,\n        columnNumber: 119\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 241,\n      columnNumber: 43\n    }, this), /*#__PURE__*/_jsxDEV(\"mesh\", {\n      position: [0, 0, 0.001],\n      rotation: [Math.PI / 2, 0, 0],\n      children: [/*#__PURE__*/_jsxDEV(\"coneGeometry\", {\n        args: [size * 0.45, 0.01, 3]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 241,\n        columnNumber: 220\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: \"black\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 241,\n        columnNumber: 264\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 241,\n      columnNumber: 160\n    }, this), /*#__PURE__*/_jsxDEV(\"mesh\", {\n      position: [0, 0, 0.002],\n      rotation: [Math.PI / 2, 0, 0],\n      children: [/*#__PURE__*/_jsxDEV(\"coneGeometry\", {\n        args: [size * 0.4, 0.01, 3]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 241,\n        columnNumber: 366\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: \"lime\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 241,\n        columnNumber: 409\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 241,\n      columnNumber: 306\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 241,\n    columnNumber: 11\n  }, this),\n  // Triangle\n  () => /*#__PURE__*/_jsxDEV(\"group\", {\n    position: [0, 0, 0.012],\n    children: [/*#__PURE__*/_jsxDEV(\"mesh\", {\n      rotation: [Math.PI / 2, 0, 0],\n      children: [/*#__PURE__*/_jsxDEV(\"coneGeometry\", {\n        args: [size / 2, 0.01, 3]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 242,\n        columnNumber: 78\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: \"pink\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 242,\n        columnNumber: 119\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 242,\n      columnNumber: 43\n    }, this), /*#__PURE__*/_jsxDEV(\"mesh\", {\n      position: [0, 0, 0.001],\n      rotation: [Math.PI / 2, 0, 0],\n      children: [/*#__PURE__*/_jsxDEV(\"coneGeometry\", {\n        args: [size * 0.45, 0.01, 3]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 242,\n        columnNumber: 220\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: \"black\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 242,\n        columnNumber: 264\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 242,\n      columnNumber: 160\n    }, this), /*#__PURE__*/_jsxDEV(\"mesh\", {\n      position: [0, 0, 0.002],\n      rotation: [Math.PI / 2, 0, 0],\n      children: [/*#__PURE__*/_jsxDEV(\"coneGeometry\", {\n        args: [size * 0.4, 0.01, 3]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 242,\n        columnNumber: 366\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: \"pink\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 242,\n        columnNumber: 409\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 242,\n      columnNumber: 306\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 242,\n    columnNumber: 11\n  }, this),\n  // Triangle\n  () => /*#__PURE__*/_jsxDEV(\"group\", {\n    position: [0, 0, 0.012],\n    children: [/*#__PURE__*/_jsxDEV(\"mesh\", {\n      rotation: [Math.PI / 2, 0, 0],\n      children: [/*#__PURE__*/_jsxDEV(\"coneGeometry\", {\n        args: [size / 2, 0.01, 3]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 243,\n        columnNumber: 78\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: \"purple\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 243,\n        columnNumber: 119\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 243,\n      columnNumber: 43\n    }, this), /*#__PURE__*/_jsxDEV(\"mesh\", {\n      position: [0, 0, 0.001],\n      rotation: [Math.PI / 2, 0, 0],\n      children: [/*#__PURE__*/_jsxDEV(\"coneGeometry\", {\n        args: [size * 0.45, 0.01, 3]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 243,\n        columnNumber: 222\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: \"black\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 243,\n        columnNumber: 266\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 243,\n      columnNumber: 162\n    }, this), /*#__PURE__*/_jsxDEV(\"mesh\", {\n      position: [0, 0, 0.002],\n      rotation: [Math.PI / 2, 0, 0],\n      children: [/*#__PURE__*/_jsxDEV(\"coneGeometry\", {\n        args: [size * 0.4, 0.01, 3]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 243,\n        columnNumber: 368\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: \"purple\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 243,\n        columnNumber: 411\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 243,\n      columnNumber: 308\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 243,\n    columnNumber: 11\n  }, this),\n  // Triangle\n  () => /*#__PURE__*/_jsxDEV(\"group\", {\n    position: [0, 0, 0.012],\n    children: [/*#__PURE__*/_jsxDEV(\"mesh\", {\n      rotation: [Math.PI / 2, 0, 0],\n      children: [/*#__PURE__*/_jsxDEV(\"coneGeometry\", {\n        args: [size / 2, 0.01, 3]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 244,\n        columnNumber: 78\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: \"yellow\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 244,\n        columnNumber: 119\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 244,\n      columnNumber: 43\n    }, this), /*#__PURE__*/_jsxDEV(\"mesh\", {\n      position: [0, 0, 0.001],\n      rotation: [Math.PI / 2, 0, 0],\n      children: [/*#__PURE__*/_jsxDEV(\"coneGeometry\", {\n        args: [size * 0.45, 0.01, 3]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 244,\n        columnNumber: 222\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: \"black\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 244,\n        columnNumber: 266\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 244,\n      columnNumber: 162\n    }, this), /*#__PURE__*/_jsxDEV(\"mesh\", {\n      position: [0, 0, 0.002],\n      rotation: [Math.PI / 2, 0, 0],\n      children: [/*#__PURE__*/_jsxDEV(\"coneGeometry\", {\n        args: [size * 0.4, 0.01, 3]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 244,\n        columnNumber: 368\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: \"yellow\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 244,\n        columnNumber: 411\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 244,\n      columnNumber: 308\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 244,\n    columnNumber: 11\n  }, this) // Triangle\n  ];\n  const shapeIndex = pieceId; // Changed from pieceId % shapes.length\n  return shapes[shapeIndex]();\n}\n\n// Individual cube piece component with smooth rotation\nfunction CubePiece({\n  position,\n  colors,\n  size = 0.95,\n  pieceId = 0,\n  isHighlighted = false,\n  highlightInfo = null,\n  rotatingFace = null,\n  rotationProgress = 0\n}) {\n  _s();\n  const meshRef = useRef();\n  const groupRef = useRef();\n\n  // Log piece information for debugging\n  React.useEffect(() => {\n    const shapeTypes = ['Square', 'Square', 'Square', 'Square', 'Square', 'Circle', 'Circle', 'Circle', 'Circle', 'Circle', 'Triangle', 'Triangle', 'Triangle', 'Triangle', 'Diamond', 'Diamond', 'Diamond', 'Diamond', 'Diamond', 'Diamond', 'Triangle', 'Triangle', 'Triangle', 'Triangle', 'Triangle', 'Triangle'];\n    const shapeColors = ['Red', 'Blue', 'Green', 'Orange', 'Purple', 'Red', 'Blue', 'Green', 'Orange', 'Yellow', 'Cyan', 'Magenta', 'Lime', 'Pink', 'Purple', 'Red', 'Blue', 'Green', 'Orange', 'Purple', 'Cyan', 'Magenta', 'Lime', 'Pink', 'Purple', 'Yellow'];\n    const shapeType = shapeTypes[pieceId] || 'Unknown'; // Changed from pieceId % shapeTypes.length\n    const shapeColor = shapeColors[pieceId] || 'Unknown'; // Changed from pieceId % shapeColors.length\n\n    // Debug specific pieces only\n    if (pieceId === 0 || pieceId === 17 || pieceId === 25 || pieceId === 1 || pieceId === 11) {\n      console.log(`🔍 ${shapeColor} ${shapeType} Piece ${pieceId} at position [${position.join(', ')}]`);\n      console.log(`  Stored Colors:`, colors);\n\n      // Show what colors should be visible based on position\n      const [x, y, z] = position;\n      const visibleFaces = [];\n      if (x === 1) visibleFaces.push('right');\n      if (x === -1) visibleFaces.push('left');\n      if (y === 1) visibleFaces.push('top');\n      if (y === -1) visibleFaces.push('bottom');\n      if (z === 1) visibleFaces.push('front');\n      if (z === -1) visibleFaces.push('back');\n      console.log(`  Visible faces:`, visibleFaces);\n      console.log(`  Colors on visible faces:`, visibleFaces.map(face => `${face}: ${colors[face]}`));\n    }\n  }, [pieceId, position, colors]);\n\n  // Color mapping\n  const colorMap = {\n    'white': '#FFFFFF',\n    'yellow': '#FFD700',\n    'red': '#DC143C',\n    // More vibrant red (crimson)\n    'orange': '#FF8C00',\n    // More vibrant orange\n    'blue': '#0000FF',\n    'green': '#00FF00',\n    'purple': '#800080',\n    'cyan': '#00FFFF',\n    'magenta': '#FF00FF',\n    'lime': '#00FF00',\n    'pink': '#FFC0CB',\n    'black': '#000000' // Keep black as black\n  };\n\n  // Create cube geometry\n  const cubeGeometry = useMemo(() => new THREE.BoxGeometry(size, size, size), [size]);\n\n  // Create face geometry\n  const faceGeometry = useMemo(() => {\n    const geometry = new THREE.PlaneGeometry(size, size);\n    return geometry;\n  }, [size]);\n\n  // Get the color for a face based on the face index - always use original colors\n  const getFaceColor = faceIndex => {\n    // Always use the piece's stored colors - no rotation needed\n    switch (faceIndex) {\n      case 0:\n        return colors.front;\n      case 1:\n        return colors.back;\n      case 2:\n        return colors.right;\n      case 3:\n        return colors.left;\n      case 4:\n        return colors.top;\n      case 5:\n        return colors.bottom;\n      default:\n        return 'black';\n    }\n  };\n\n  // Check if a face should be visible based on the piece's original position\n  const isFaceVisible = faceIndex => {\n    const [x, y, z] = position;\n\n    // Determine which faces are visible based on original position\n    const visibleFaces = [];\n    if (x === 1) visibleFaces.push(2); // Right face visible\n    if (x === -1) visibleFaces.push(3); // Left face visible\n    if (y === 1) visibleFaces.push(4); // Top face visible\n    if (y === -1) visibleFaces.push(5); // Bottom face visible\n    if (z === 1) visibleFaces.push(0); // Front face visible\n    if (z === -1) visibleFaces.push(1); // Back face visible\n\n    return visibleFaces.includes(faceIndex);\n  };\n\n  // Check if this piece is part of the currently rotating face\n  const isPartOfRotatingFace = useCallback(() => {\n    if (!rotatingFace) return false;\n    const [x, y, z] = position;\n    const {\n      face\n    } = rotatingFace;\n    switch (face) {\n      case 'F':\n        return z === 1;\n      case 'B':\n        return z === -1;\n      case 'R':\n        return x === 1;\n      case 'L':\n        return x === -1;\n      case 'U':\n        return y === 1;\n      case 'D':\n        return y === -1;\n      default:\n        return false;\n    }\n  }, [position, rotatingFace]);\n\n  // Calculate group rotation for smooth animation\n  const getGroupRotationAngle = () => {\n    if (!rotatingFace || !isPartOfRotatingFace()) {\n      return {\n        x: 0,\n        y: 0,\n        z: 0\n      };\n    }\n    const {\n      face,\n      direction\n    } = rotatingFace;\n    const sign = direction === 'clockwise' ? 1 : -1;\n    const angle = Math.PI / 2 * rotationProgress * sign; // 90 degrees total\n\n    switch (face) {\n      case 'F':\n        return {\n          x: 0,\n          y: 0,\n          z: angle\n        };\n      case 'B':\n        return {\n          x: 0,\n          y: 0,\n          z: -angle\n        };\n      case 'R':\n        return {\n          x: angle,\n          y: 0,\n          z: 0\n        };\n      case 'L':\n        return {\n          x: -angle,\n          y: 0,\n          z: 0\n        };\n      case 'U':\n        return {\n          x: 0,\n          y: angle,\n          z: 0\n        };\n      case 'D':\n        return {\n          x: 0,\n          y: -angle,\n          z: 0\n        };\n      default:\n        return {\n          x: 0,\n          y: 0,\n          z: 0\n        };\n    }\n  };\n\n  // Calculate position offset for group rotation\n  const getGroupPositionOffset = () => {\n    if (!rotatingFace || !isPartOfRotatingFace()) {\n      return {\n        x: 0,\n        y: 0,\n        z: 0\n      };\n    }\n    const {\n      face,\n      direction\n    } = rotatingFace;\n    const sign = direction === 'clockwise' ? 1 : -1;\n    const progress = rotationProgress;\n\n    // Calculate the offset needed to rotate around face center\n    const [x, y, z] = position;\n    let offsetX = 0,\n      offsetY = 0,\n      offsetZ = 0;\n\n    // Apply rotation around face center\n    const angle = Math.PI / 2 * progress * sign;\n    switch (face) {\n      case 'F':\n        // Rotate around Z axis at face center (0, 0, 1)\n        offsetX = x * (Math.cos(angle) - 1) - y * Math.sin(angle);\n        offsetY = x * Math.sin(angle) + y * (Math.cos(angle) - 1);\n        break;\n      case 'B':\n        // Rotate around Z axis at face center (0, 0, -1)\n        offsetX = x * (Math.cos(-angle) - 1) - y * Math.sin(-angle);\n        offsetY = x * Math.sin(-angle) + y * (Math.cos(-angle) - 1);\n        break;\n      case 'R':\n        // Rotate around X axis at face center (1, 0, 0)\n        offsetY = y * (Math.cos(angle) - 1) - z * Math.sin(angle);\n        offsetZ = y * Math.sin(angle) + z * (Math.cos(angle) - 1);\n        break;\n      case 'L':\n        // Rotate around X axis at face center (-1, 0, 0)\n        offsetY = y * (Math.cos(-angle) - 1) - z * Math.sin(-angle);\n        offsetZ = y * Math.sin(-angle) + z * (Math.cos(-angle) - 1);\n        break;\n      case 'U':\n        // Rotate around Y axis at face center (0, 1, 0)\n        offsetX = x * (Math.cos(angle) - 1) - z * Math.sin(angle);\n        offsetZ = x * Math.sin(angle) + z * (Math.cos(angle) - 1);\n        break;\n      case 'D':\n        // Rotate around Y axis at face center (0, -1, 0)\n        offsetX = x * (Math.cos(-angle) - 1) - z * Math.sin(-angle);\n        offsetZ = x * Math.sin(-angle) + z * (Math.cos(-angle) - 1);\n        break;\n    }\n    return {\n      x: offsetX,\n      y: offsetY,\n      z: offsetZ\n    };\n  };\n  const groupRotationAngle = getGroupRotationAngle();\n  const groupPositionOffset = getGroupPositionOffset();\n\n  // Calculate final position with group rotation offset\n  const finalPosition = [position[0] + groupPositionOffset.x, position[1] + groupPositionOffset.y, position[2] + groupPositionOffset.z];\n  return /*#__PURE__*/_jsxDEV(\"group\", {\n    ref: groupRef,\n    position: finalPosition,\n    rotation: [groupRotationAngle.x, groupRotationAngle.y, groupRotationAngle.z],\n    children: [/*#__PURE__*/_jsxDEV(\"mesh\", {\n      geometry: cubeGeometry,\n      children: /*#__PURE__*/_jsxDEV(\"meshPhongMaterial\", {\n        color: isPartOfRotatingFace() ? \"#666666\" : \"#333333\",\n        emissive: isPartOfRotatingFace() ? \"#444444\" : \"#000000\",\n        emissiveIntensity: isPartOfRotatingFace() ? 0.3 : 0\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 443,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 442,\n      columnNumber: 7\n    }, this), [0, 1, 2, 3, 4, 5].map(faceIndex => {\n      // Only render faces that should be visible based on original position\n      if (!isFaceVisible(faceIndex)) {\n        return null;\n      }\n      const faceColor = getFaceColor(faceIndex);\n\n      // Define face positions and rotations correctly\n      let facePosition, faceRotation;\n      switch (faceIndex) {\n        case 0:\n          // Front face (Z+)\n          facePosition = [0, 0, size / 2 + 0.001];\n          faceRotation = [0, 0, 0];\n          break;\n        case 1:\n          // Back face (Z-)\n          facePosition = [0, 0, -size / 2 - 0.001];\n          faceRotation = [0, Math.PI, 0];\n          break;\n        case 2:\n          // Right face (X+)\n          facePosition = [size / 2 + 0.001, 0, 0];\n          faceRotation = [0, Math.PI / 2, 0];\n          break;\n        case 3:\n          // Left face (X-)\n          facePosition = [-size / 2 - 0.001, 0, 0];\n          faceRotation = [0, -Math.PI / 2, 0];\n          break;\n        case 4:\n          // Top face (Y+)\n          facePosition = [0, size / 2 + 0.001, 0];\n          faceRotation = [-Math.PI / 2, 0, 0];\n          break;\n        case 5:\n          // Bottom face (Y-)\n          facePosition = [0, -size / 2 - 0.001, 0];\n          faceRotation = [Math.PI / 2, 0, 0];\n          break;\n        default:\n          facePosition = [0, 0, 0];\n          faceRotation = [0, 0, 0];\n      }\n\n      // Check if this face should be highlighted (painted pink)\n      const faceNames = ['front', 'back', 'right', 'left', 'top', 'bottom'];\n      const currentFaceName = faceNames[faceIndex];\n      const shouldHighlight = isHighlighted && highlightInfo && highlightInfo.blackVisibleFaces && highlightInfo.blackVisibleFaces.includes(currentFaceName);\n\n      // If this face should be highlighted, paint it bright pink\n      const displayColor = shouldHighlight ? '#FF1493' : colorMap[faceColor] || '#000000';\n      return /*#__PURE__*/_jsxDEV(\"mesh\", {\n        position: facePosition,\n        rotation: faceRotation,\n        geometry: faceGeometry,\n        children: /*#__PURE__*/_jsxDEV(\"meshPhongMaterial\", {\n          color: displayColor,\n          side: THREE.FrontSide,\n          emissive: isPartOfRotatingFace() ? displayColor : \"#000000\",\n          emissiveIntensity: isPartOfRotatingFace() ? 0.5 : 0.1\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 509,\n          columnNumber: 13\n        }, this)\n      }, faceIndex, false, {\n        fileName: _jsxFileName,\n        lineNumber: 503,\n        columnNumber: 11\n      }, this);\n    }), [0, 1, 2, 3, 4, 5].map(faceIndex => {\n      // Only render shapes on faces that should be visible based on original position\n      if (!isFaceVisible(faceIndex)) {\n        return null;\n      }\n\n      // Define face positions and rotations correctly (same as colored faces)\n      let facePosition, faceRotation;\n      switch (faceIndex) {\n        case 0:\n          // Front face (Z+)\n          facePosition = [0, 0, size / 2 + 0.002];\n          faceRotation = [0, 0, 0];\n          break;\n        case 1:\n          // Back face (Z-)\n          facePosition = [0, 0, -size / 2 - 0.002];\n          faceRotation = [0, Math.PI, 0];\n          break;\n        case 2:\n          // Right face (X+)\n          facePosition = [size / 2 + 0.002, 0, 0];\n          faceRotation = [0, Math.PI / 2, 0];\n          break;\n        case 3:\n          // Left face (X-)\n          facePosition = [-size / 2 - 0.002, 0, 0];\n          faceRotation = [0, -Math.PI / 2, 0];\n          break;\n        case 4:\n          // Top face (Y+)\n          facePosition = [0, size / 2 + 0.002, 0];\n          faceRotation = [-Math.PI / 2, 0, 0];\n          break;\n        case 5:\n          // Bottom face (Y-)\n          facePosition = [0, -size / 2 - 0.002, 0];\n          faceRotation = [Math.PI / 2, 0, 0];\n          break;\n        default:\n          facePosition = [0, 0, 0];\n          faceRotation = [0, 0, 0];\n      }\n\n      // Get the face color for this specific face\n      const faceColor = getFaceColor(faceIndex);\n      return /*#__PURE__*/_jsxDEV(\"group\", {\n        position: facePosition,\n        rotation: faceRotation,\n        children: createShapeWithFaceBorder(pieceId, size * 0.3, faceIndex)\n      }, `shape-${faceIndex}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 563,\n        columnNumber: 11\n      }, this);\n    })]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 436,\n    columnNumber: 5\n  }, this);\n}\n\n// Function to get the original solved colors for a piece based on its pieceId\n_s(CubePiece, \"+tYIy54zh/FRg917VQN/JOakoT0=\");\n_c = CubePiece;\nfunction getOriginalColors(pieceId) {\n  // Map pieceId to original solved position\n  const positions = [];\n  for (let x = -1; x <= 1; x++) {\n    for (let y = -1; y <= 1; y++) {\n      for (let z = -1; z <= 1; z++) {\n        if (x === 0 && y === 0 && z === 0) continue;\n        positions.push([x, y, z]);\n      }\n    }\n  }\n  const originalPosition = positions[pieceId];\n  const [x, y, z] = originalPosition;\n\n  // Assign colors based on original solved position\n  // All faces should have proper colors, not black\n  let colors = {\n    front: 'white',\n    // Default to white for front\n    back: 'yellow',\n    // Default to yellow for back\n    right: 'red',\n    // Default to red for right\n    left: 'orange',\n    // Default to orange for left\n    top: 'blue',\n    // Default to blue for top\n    bottom: 'green' // Default to green for bottom\n  };\n\n  // Override with correct colors based on position in solved state\n  if (x === -1) colors.left = 'orange';\n  if (x === 1) colors.right = 'red';\n  if (y === -1) colors.bottom = 'green';\n  if (y === 1) colors.top = 'blue';\n  if (z === -1) colors.back = 'yellow';\n  if (z === 1) colors.front = 'white';\n  return colors;\n}\n\n// Custom hook for cube state management\nfunction useCubeState() {\n  _s2();\n  // Debug: Log when useCubeState hook is called\n  logToTerminal('🔄 useCubeState hook called', null, 'WARNING');\n\n  // Use useMemo to ensure the initial state is only created once\n  const initialCubeState = useMemo(() => {\n    console.log('🔄 INITIALIZING CUBE STATE - This should only happen once!');\n    logToTerminal('🔄 INITIALIZING CUBE STATE - This should only happen once!', null, 'INFO');\n    const state = [];\n\n    // Create 26 pieces (3x3x3 minus center)\n    for (let x = -1; x <= 1; x++) {\n      for (let y = -1; y <= 1; y++) {\n        for (let z = -1; z <= 1; z++) {\n          // Skip the center piece\n          if (x === 0 && y === 0 && z === 0) continue;\n\n          // Get pieceId based on position in solved state\n          const pieceId = state.length;\n\n          // Get original colors for this piece\n          const colors = getOriginalColors(pieceId);\n\n          // Debug logging for initial state\n          console.log(`Initial piece ${pieceId} at [${x}, ${y}, ${z}]:`, colors);\n          state.push({\n            position: [x, y, z],\n            colors,\n            rotationHistory: [],\n            // Track all rotations this piece has undergone\n            pieceId: pieceId // Store the pieceId for reference\n          });\n        }\n      }\n    }\n\n    // Log the complete initial cube state as JSON\n    console.log('🎯 INITIAL CUBE STATE (End of Initial Load):');\n    console.log(JSON.stringify(state, null, 2));\n\n    // Also log to terminal (this will show in the terminal where npm start is running)\n    logToTerminal('🎯 INITIAL CUBE STATE (End of Initial Load)', state, 'INFO');\n    return state;\n  }, []); // Empty dependency array ensures this only runs once\n\n  const [cubeState, setCubeState] = useState(initialCubeState);\n  const [isAnimating, setIsAnimating] = useState(false);\n  const [rotatingFace, setRotatingFace] = useState(null);\n  const [rotationProgress, setRotationProgress] = useState(0);\n  const [moveHistory, setMoveHistory] = useState([]); // Simple move history for solve\n\n  // Debug cube state changes\n  React.useEffect(() => {\n    console.log('🔄 CUBE STATE CHANGED:', cubeState.map(p => `${p.pieceId}: [${p.position.join(', ')}] colors: ${JSON.stringify(p.colors)}`));\n\n    // Log to terminal: cube state changes\n    logToTerminal(`🔄 CUBE STATE CHANGED`, cubeState.map(p => `${p.pieceId}: [${p.position.join(', ')}] colors: ${JSON.stringify(p.colors)}`), 'INFO');\n\n    // Check if colors are being reset to original\n    const hasOriginalColors = cubeState.every((piece, index) => {\n      const originalColors = getOriginalColors(index);\n      return JSON.stringify(piece.colors) === JSON.stringify(originalColors);\n    });\n    if (hasOriginalColors && cubeState.length > 0) {\n      console.log('⚠️ WARNING: All pieces have original colors - this might indicate a reset!');\n      logToTerminal('⚠️ WARNING: All pieces have original colors - this might indicate a reset!', null, 'WARNING');\n    }\n  }, [cubeState]);\n\n  // Consolidated rotation logic\n  const applyRotation = useCallback((pieces, face, direction) => {\n    logToTerminal(`🎯 applyRotation called: ${face} ${direction}`, null, 'INFO');\n    logToTerminal(`📊 applyRotation: Input pieces colors:`, pieces.map(p => `${p.pieceId}: ${JSON.stringify(p.colors)}`), 'INFO');\n    pieces.forEach(piece => {\n      const [x, y, z] = piece.position;\n      let newX = x,\n        newY = y,\n        newZ = z;\n      // Apply 3D transformation\n      switch (face) {\n        case 'F':\n          // Front face rotation (Z+ plane)\n          if (z === 1) {\n            // Only pieces on the front face\n            if (direction === 'clockwise') {\n              newX = -y;\n              newY = x;\n            } else {\n              newX = y;\n              newY = -x;\n            }\n          }\n          break;\n        case 'B':\n          // Back face rotation (Z- plane)\n          if (z === -1) {\n            // Only pieces on the back face\n            if (direction === 'clockwise') {\n              newX = y;\n              newY = -x;\n            } else {\n              newX = -y;\n              newY = x;\n            }\n          }\n          break;\n        case 'R':\n          // Right face rotation (X+ plane)\n          if (x === 1) {\n            // Only pieces on the right face\n            if (direction === 'clockwise') {\n              newY = -z;\n              newZ = y;\n            } else {\n              newY = z;\n              newZ = -y;\n            }\n          }\n          break;\n        case 'L':\n          // Left face rotation (X- plane)\n          if (x === -1) {\n            // Only pieces on the left face\n            if (direction === 'clockwise') {\n              newY = z;\n              newZ = -y;\n            } else {\n              newY = -z;\n              newZ = y;\n            }\n          }\n          break;\n        case 'U':\n          // Up face rotation (Y+ plane)\n          if (y === 1) {\n            // Only pieces on the up face\n            if (direction === 'clockwise') {\n              newX = z;\n              newZ = -x;\n            } else {\n              newX = -z;\n              newZ = x;\n            }\n          }\n          break;\n        case 'D':\n          // Down face rotation (Y- plane)\n          if (y === -1) {\n            // Only pieces on the down face\n            if (direction === 'clockwise') {\n              newX = -z;\n              newZ = x;\n            } else {\n              newX = z;\n              newZ = -x;\n            }\n          }\n          break;\n      }\n\n      // Only apply changes if the piece actually moved\n      const positionChanged = x !== newX || y !== newY || z !== newZ;\n      if (positionChanged) {\n        console.log(`🔄 Piece ${piece.pieceId} moving from [${x}, ${y}, ${z}] to [${newX}, ${newY}, ${newZ}]`);\n\n        // Update position only - colors stay the same\n        piece.position = [newX, newY, newZ];\n\n        // Add to rotation history\n        piece.rotationHistory.push({\n          move: face,\n          direction: direction,\n          fromPosition: [x, y, z],\n          toPosition: [newX, newY, newZ],\n          timestamp: new Date().toISOString()\n        });\n      }\n    });\n    logToTerminal(`📊 applyRotation: Output pieces colors:`, pieces.map(p => `${p.pieceId}: ${JSON.stringify(p.colors)}`), 'INFO');\n    logToTerminal(`✅ applyRotation completed: ${face} ${direction}`, null, 'SUCCESS');\n  }, []);\n\n  // Function to rotate a face with smooth 3D animation\n  const rotateFaceWithAnimation = useCallback((face, direction, onComplete) => {\n    console.log(`🎯 Rotating face ${face} ${direction} with smooth animation`);\n\n    // Log rotation start to terminal\n    logToTerminal(`🎯 rotateFaceWithAnimation called: ${face} ${direction}`, null, 'INFO');\n    logToTerminal(`🔄 ROTATION STARTED: ${face} ${direction}`, null, 'INFO');\n\n    // Record the move for solve (same as manual rotation)\n    setMoveHistory(prev => {\n      const newHistory = [...prev, {\n        face,\n        direction,\n        timestamp: Date.now()\n      }];\n      console.log(`📝 RECORDED MOVE: ${face} ${direction} (Total moves: ${newHistory.length})`);\n      return newHistory;\n    });\n\n    // Set the rotating face for visual feedback\n    setRotatingFace({\n      face,\n      direction\n    });\n    setRotationProgress(0);\n\n    // Smooth animation using requestAnimationFrame\n    const animationDuration = 500; // 500ms for smooth rotation\n    const startTime = performance.now();\n    const animate = currentTime => {\n      const elapsed = currentTime - startTime;\n      const progress = Math.min(elapsed / animationDuration, 1);\n\n      // Ease out animation for smoother feel\n      const easedProgress = 1 - Math.pow(1 - progress, 3);\n      setRotationProgress(easedProgress);\n      if (progress < 1) {\n        requestAnimationFrame(animate);\n      } else {\n        // Animation complete - apply the actual position changes\n        setCubeState(prevState => {\n          console.log(`🔄 Applying position changes for ${face} ${direction}`);\n          console.log('Previous state colors:', prevState.map(p => `${p.pieceId}: ${JSON.stringify(p.colors)}`));\n\n          // Log to terminal: rotation completion and state update\n          logToTerminal(`✅ ROTATION COMPLETED: ${face} ${direction}`, null, 'SUCCESS');\n          logToTerminal(`📊 BEFORE STATE UPDATE - Colors:`, prevState.map(p => `${p.pieceId}: ${JSON.stringify(p.colors)}`), 'INFO');\n          const newState = [...prevState];\n          const pieces = newState.map((piece, index) => ({\n            ...piece,\n            pieceId: index\n          }));\n\n          // Log positions before rotation\n          console.log('📍 Positions before rotation:', pieces.map(p => `${p.pieceId}: [${p.position.join(', ')}]`));\n          logToTerminal(`📍 BEFORE ROTATION - Positions:`, pieces.map(p => `${p.pieceId}: [${p.position.join(', ')}]`), 'INFO');\n\n          // Apply rotation using consolidated logic\n          applyRotation(pieces, face, direction);\n\n          // Log positions after rotation\n          console.log('📍 Positions after rotation:', pieces.map(p => `${p.pieceId}: [${p.position.join(', ')}]`));\n          logToTerminal(`📍 AFTER ROTATION - Positions:`, pieces.map(p => `${p.pieceId}: [${p.position.join(', ')}]`), 'INFO');\n\n          // Update the newState with the modified pieces\n          pieces.forEach((piece, index) => {\n            newState[index] = {\n              position: piece.position,\n              colors: piece.colors,\n              rotationHistory: piece.rotationHistory\n            };\n          });\n          console.log('✅ Position changes applied to cube state');\n          console.log('New state colors:', newState.map(p => `${p.pieceId}: ${JSON.stringify(p.colors)}`));\n\n          // Log to terminal: final state after update\n          logToTerminal(`📊 AFTER STATE UPDATE - Colors:`, newState.map(p => `${p.pieceId}: ${JSON.stringify(p.colors)}`), 'INFO');\n          return newState;\n        });\n\n        // Reset animation state\n        setRotatingFace(null);\n        setRotationProgress(0);\n        if (onComplete) onComplete();\n      }\n    };\n    requestAnimationFrame(animate);\n  }, [applyRotation]);\n\n  // Function to execute moves with realistic face rotation animations\n  const executeMovesWithAnimation = useCallback((moves, onComplete) => {\n    let currentMoveIndex = 0;\n    const executeNextMove = () => {\n      if (currentMoveIndex >= moves.length) {\n        if (onComplete) onComplete();\n        return;\n      }\n      const move = moves[currentMoveIndex];\n      console.log(`🔄 Executing move ${currentMoveIndex + 1}/${moves.length}: ${move.face} ${move.direction}`);\n\n      // Execute the move with realistic face rotation\n      rotateFaceWithAnimation(move.face, move.direction, () => {\n        currentMoveIndex++;\n        // Small delay between moves for visual clarity\n        setTimeout(executeNextMove, 25);\n      });\n    };\n    executeNextMove();\n  }, [rotateFaceWithAnimation]);\n\n  // Generate optimal solve sequence using beginner's method\n  const generateOptimalSolve = useCallback(currentState => {\n    // This is a simplified version - in reality, you'd use proper algorithms like CFOP\n    // For now, we'll use the reverse of all moves, but optimize the sequence\n\n    const allMoves = [];\n    currentState.forEach(piece => {\n      piece.rotationHistory.forEach(move => {\n        allMoves.push({\n          face: move.move,\n          direction: move.direction,\n          timestamp: move.timestamp\n        });\n      });\n    });\n    console.log(`?? DEBUG: Found ${allMoves.length} moves in rotation history`);\n\n    // Sort moves by timestamp\n    allMoves.sort((a, b) => new Date(a.timestamp) - new Date(b.timestamp));\n    console.log('?? DEBUG: Original moves:', allMoves.map(m => `${m.face} ${m.direction}`));\n\n    // Reverse the moves and optimize\n    const reversedMoves = allMoves.reverse().map(move => ({\n      face: move.face,\n      direction: move.direction === 'clockwise' ? 'counterclockwise' : 'clockwise'\n    }));\n    console.log('?? DEBUG: Reversed moves:', reversedMoves.map(m => `${m.face} ${m.direction}`));\n\n    // Optimize the sequence by removing redundant moves\n    const optimizedMoves = optimizeMoveSequence(reversedMoves);\n    console.log(`?? DEBUG: Optimized moves: ${optimizedMoves.length}`, optimizedMoves.map(m => `${m.face} ${m.direction}`));\n    return optimizedMoves;\n  }, []);\n\n  // Optimize move sequence by removing redundant moves\n  const optimizeMoveSequence = useCallback(moves => {\n    // For now, don't optimize too aggressively to ensure we don't break the solve\n    // Just return the original moves to ensure the cube gets solved\n    return moves;\n  }, []);\n\n  // Rotate a face of the cube with smooth animation\n  const rotateFace = useCallback((face, direction) => {\n    logToTerminal(`🎯 rotateFace called: ${face} ${direction}`, null, 'INFO');\n    if (isAnimating) {\n      logToTerminal(`⚠️ rotateFace: Already animating, skipping`, null, 'WARNING');\n      return;\n    }\n    logToTerminal(`✅ rotateFace: Starting rotation`, null, 'SUCCESS');\n    setIsAnimating(true);\n\n    // Use the smooth animation function\n    rotateFaceWithAnimation(face, direction, () => {\n      logToTerminal(`✅ rotateFace: Animation completed`, null, 'SUCCESS');\n      setIsAnimating(false);\n    });\n  }, [isAnimating, rotateFaceWithAnimation]);\n\n  // Scramble the cube with realistic face rotations\n  const scramble = useCallback(() => {\n    if (isAnimating) return;\n    setIsAnimating(true);\n\n    // DON'T clear move history - keep all previous moves (manual + scramble)\n    console.log(`🎲 SCRAMBLING CUBE - Current move history: ${moveHistory.length} moves`);\n    const moves = ['F', 'B', 'R', 'L', 'U', 'D'];\n    const directions = ['clockwise', 'counterclockwise'];\n    const scrambleSequence = [];\n\n    // Generate 20 random moves\n    for (let i = 0; i < 20; i++) {\n      const move = moves[Math.floor(Math.random() * moves.length)];\n      const direction = directions[Math.floor(Math.random() * directions.length)];\n      scrambleSequence.push({\n        face: move,\n        direction\n      });\n    }\n    console.log('🎲 SCRAMBLING CUBE with sequence:', scrambleSequence.map(m => `${m.face} ${m.direction}`));\n\n    // Execute scramble moves with realistic animations\n    executeMovesWithAnimation(scrambleSequence, () => {\n      setIsAnimating(false);\n      console.log('✅ CUBE SCRAMBLED!');\n\n      // Log final state\n      setCubeState(currentState => {\n        console.log('🎯 CUBE STATE AFTER SCRAMBLE:');\n        console.log(JSON.stringify(currentState, null, 2));\n        logToTerminal('CUBE STATE AFTER SCRAMBLE', currentState);\n        return currentState;\n      });\n    });\n  }, [isAnimating, executeMovesWithAnimation, moveHistory]);\n\n  // Reset the cube to solved state\n  const reset = useCallback(() => {\n    // Clear move history when resetting\n    setMoveHistory([]);\n    setCubeState(() => {\n      const state = [];\n\n      // Create 26 pieces (3x3x3 minus center)\n      for (let x = -1; x <= 1; x++) {\n        for (let y = -1; y <= 1; y++) {\n          for (let z = -1; z <= 1; z++) {\n            // Skip the center piece\n            if (x === 0 && y === 0 && z === 0) continue;\n\n            // Get pieceId based on position in solved state\n            const pieceId = state.length;\n\n            // Get original colors for this piece\n            const colors = getOriginalColors(pieceId);\n\n            // Debug logging for initial state\n            console.log(`Initial piece ${pieceId} at [${x}, ${y}, ${z}]:`, colors);\n            state.push({\n              position: [x, y, z],\n              colors,\n              rotationHistory: [],\n              // Track all rotations this piece has undergone\n              pieceId: pieceId // Store the pieceId for reference\n            });\n          }\n        }\n      }\n\n      // Log the complete initial cube state as JSON\n      console.log('🎯 INITIAL CUBE STATE (End of Initial Load):');\n      console.log(JSON.stringify(state, null, 2));\n\n      // Also log to terminal (this will show in the terminal where npm start is running)\n      logToTerminal('INITIAL CUBE STATE (End of Initial Load)', state);\n      return state;\n    });\n  }, []);\n\n  // Simple solve function that reverses all recorded moves\n  const solve = useCallback(() => {\n    if (isAnimating) return;\n    setIsAnimating(true);\n    console.log(`🎯 SOLVING CUBE: Reversing ${moveHistory.length} moves`);\n    console.log('📋 Move history:', moveHistory.map(m => `${m.face} ${m.direction}`));\n    console.log('📋 Full move history object:', moveHistory);\n    if (moveHistory.length === 0) {\n      console.log('⚠️ No moves to reverse - cube might already be solved or no moves were recorded');\n      setIsAnimating(false);\n      return;\n    }\n\n    // Create reverse sequence (last move first, opposite direction)\n    const solveSequence = moveHistory.slice().reverse().map(move => ({\n      face: move.face,\n      direction: move.direction === 'clockwise' ? 'counterclockwise' : 'clockwise'\n    }));\n    console.log('🔄 Reversed sequence:', solveSequence.map(m => `${m.face} ${m.direction}`));\n    console.log(`🚀 Starting solve with ${solveSequence.length} moves...`);\n\n    // Execute moves with realistic face rotations\n    executeMovesWithAnimation(solveSequence, () => {\n      // Clear move history after solving\n      setMoveHistory([]);\n      setIsAnimating(false);\n      console.log('✅ CUBE SOLVED!');\n    });\n  }, [isAnimating, moveHistory, executeMovesWithAnimation]);\n  return {\n    cubeState,\n    isAnimating,\n    rotatingFace,\n    rotationProgress,\n    rotateFace,\n    scramble,\n    reset,\n    solve\n  };\n}\n\n// Main cube group component with enhanced structure\n_s2(useCubeState, \"AOeofiJrWtJ279PKonpcy89TzKI=\");\nfunction CubeGroup({\n  isRotating,\n  autoRotate = false,\n  onScramble,\n  onReset,\n  onSolve,\n  onRotateFace,\n  onCubeStateChange,\n  highlightedPieces = []\n}) {\n  _s3();\n  const groupRef = useRef();\n  const [rotationSpeed] = useState({\n    x: 0.005,\n    y: 0.01\n  });\n\n  // Debug: Log when CubeGroup re-renders\n  React.useEffect(() => {\n    logToTerminal('🔄 CubeGroup component re-rendered', null, 'WARNING');\n  });\n  const {\n    cubeState,\n    isAnimating,\n    rotatingFace,\n    rotationProgress,\n    rotateFace,\n    scramble,\n    reset,\n    solve\n  } = useCubeState();\n\n  // Helper functions for enhanced debugging\n  const getShapeType = pieceId => {\n    const shapeTypes = ['Square', 'Square', 'Square', 'Square', 'Square', 'Circle', 'Circle', 'Circle', 'Circle', 'Circle', 'Triangle', 'Triangle', 'Triangle', 'Triangle', 'Diamond', 'Diamond', 'Diamond', 'Diamond', 'Diamond', 'Diamond', 'Triangle', 'Triangle', 'Triangle', 'Triangle', 'Triangle', 'Triangle'];\n    return shapeTypes[pieceId] || 'Unknown';\n  };\n  const getShapeColor = pieceId => {\n    const shapeColors = ['Red', 'Red', 'Red', 'Red', 'Red', 'Blue', 'Blue', 'Blue', 'Blue', 'Blue', 'Green', 'Green', 'Green', 'Green', 'Yellow', 'Yellow', 'Yellow', 'Yellow', 'Yellow', 'Yellow', 'Orange', 'Orange', 'Orange', 'Orange', 'Orange', 'Orange'];\n    return shapeColors[pieceId] || 'Unknown';\n  };\n\n  // Auto-rotation effect\n  useEffect(() => {\n    let animationId;\n    if (autoRotate && groupRef.current) {\n      const animate = () => {\n        if (groupRef.current && autoRotate) {\n          groupRef.current.rotation.x += rotationSpeed.x;\n          groupRef.current.rotation.y += rotationSpeed.y;\n          animationId = requestAnimationFrame(animate);\n        }\n      };\n      animate();\n    }\n\n    // Cleanup function to stop animation when autoRotate becomes false\n    return () => {\n      if (animationId) {\n        cancelAnimationFrame(animationId);\n      }\n    };\n  }, [autoRotate, rotationSpeed]);\n\n  // Handle cube state changes\n  useEffect(() => {\n    if (onCubeStateChange) {\n      onCubeStateChange(cubeState);\n    }\n  }, [cubeState, onCubeStateChange]);\n\n  // Handle scramble\n  useEffect(() => {\n    if (onScramble) {\n      onScramble(scramble);\n    }\n  }, [scramble, onScramble]);\n\n  // Handle reset\n  useEffect(() => {\n    if (onReset) {\n      onReset(reset);\n    }\n  }, [reset, onReset]);\n\n  // Handle solve\n  useEffect(() => {\n    if (onSolve) {\n      onSolve(solve);\n    }\n  }, [solve, onSolve]);\n\n  // Handle rotate face\n  useEffect(() => {\n    if (onRotateFace) {\n      onRotateFace(rotateFace);\n    }\n  }, [rotateFace, onRotateFace]);\n  return /*#__PURE__*/_jsxDEV(\"group\", {\n    ref: groupRef,\n    children: cubeState.map((piece, index) => {\n      const isHighlighted = highlightedPieces.some(hp => hp.pieceId === index);\n      const highlightInfo = highlightedPieces.find(hp => hp.pieceId === index);\n      return /*#__PURE__*/_jsxDEV(CubePiece, {\n        position: piece.position,\n        colors: piece.colors,\n        pieceId: index,\n        isHighlighted: isHighlighted,\n        highlightInfo: highlightInfo,\n        rotatingFace: rotatingFace,\n        rotationProgress: rotationProgress\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1179,\n        columnNumber: 11\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 1173,\n    columnNumber: 5\n  }, this);\n}\n\n// Main Rubik's Cube component\n_s3(CubeGroup, \"h7Npqj7UQTPEaccOVW/LPi0/ab4=\", false, function () {\n  return [useCubeState];\n});\n_c2 = CubeGroup;\nfunction RubiksCube({\n  isRotating,\n  autoRotate = false,\n  onScramble,\n  onReset,\n  onSolve,\n  onRotateFace,\n  onCubeStateChange,\n  highlightedPieces = []\n}) {\n  return /*#__PURE__*/_jsxDEV(Canvas, {\n    camera: {\n      position: [5, 5, 5],\n      fov: 50\n    },\n    style: {\n      background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"ambientLight\", {\n      intensity: 0.6\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1202,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"directionalLight\", {\n      position: [10, 10, 5],\n      intensity: 1\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1203,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"pointLight\", {\n      position: [-10, -10, -5],\n      intensity: 0.5\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1204,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CubeGroup, {\n      isRotating: isRotating,\n      autoRotate: autoRotate,\n      onScramble: onScramble,\n      onReset: onReset,\n      onSolve: onSolve,\n      onRotateFace: onRotateFace,\n      onCubeStateChange: onCubeStateChange,\n      highlightedPieces: highlightedPieces\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1206,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 1198,\n    columnNumber: 5\n  }, this);\n}\n_c3 = RubiksCube;\nexport default RubiksCube;\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"CubePiece\");\n$RefreshReg$(_c2, \"CubeGroup\");\n$RefreshReg$(_c3, \"RubiksCube\");","map":{"version":3,"names":["React","useState","useRef","useMemo","useCallback","useEffect","Canvas","useFrame","OrbitControls","Environment","THREE","jsxDEV","_jsxDEV","logToTerminal","message","data","type","timestamp","Date","toLocaleTimeString","prefix","fullMessage","console","log","JSON","stringify","repeat","fetch","method","headers","body","then","response","ok","Error","status","catch","error","createShapeWithFaceBorder","pieceId","size","faceIndex","borderColors","borderColor","shapes","position","children","args","fileName","_jsxFileName","lineNumber","columnNumber","color","rotation","Math","PI","shapeIndex","createShape","CubePiece","colors","isHighlighted","highlightInfo","rotatingFace","rotationProgress","_s","meshRef","groupRef","shapeTypes","shapeColors","shapeType","shapeColor","join","x","y","z","visibleFaces","push","map","face","colorMap","cubeGeometry","BoxGeometry","faceGeometry","geometry","PlaneGeometry","getFaceColor","front","back","right","left","top","bottom","isFaceVisible","includes","isPartOfRotatingFace","getGroupRotationAngle","direction","sign","angle","getGroupPositionOffset","progress","offsetX","offsetY","offsetZ","cos","sin","groupRotationAngle","groupPositionOffset","finalPosition","ref","emissive","emissiveIntensity","faceColor","facePosition","faceRotation","faceNames","currentFaceName","shouldHighlight","blackVisibleFaces","displayColor","side","FrontSide","_c","getOriginalColors","positions","originalPosition","useCubeState","_s2","initialCubeState","state","length","rotationHistory","cubeState","setCubeState","isAnimating","setIsAnimating","setRotatingFace","setRotationProgress","moveHistory","setMoveHistory","p","hasOriginalColors","every","piece","index","originalColors","applyRotation","pieces","forEach","newX","newY","newZ","positionChanged","move","fromPosition","toPosition","toISOString","rotateFaceWithAnimation","onComplete","prev","newHistory","now","animationDuration","startTime","performance","animate","currentTime","elapsed","min","easedProgress","pow","requestAnimationFrame","prevState","newState","executeMovesWithAnimation","moves","currentMoveIndex","executeNextMove","setTimeout","generateOptimalSolve","currentState","allMoves","sort","a","b","m","reversedMoves","reverse","optimizedMoves","optimizeMoveSequence","rotateFace","scramble","directions","scrambleSequence","i","floor","random","reset","solve","solveSequence","slice","CubeGroup","isRotating","autoRotate","onScramble","onReset","onSolve","onRotateFace","onCubeStateChange","highlightedPieces","_s3","rotationSpeed","getShapeType","getShapeColor","animationId","current","cancelAnimationFrame","some","hp","find","_c2","RubiksCube","camera","fov","style","background","intensity","_c3","$RefreshReg$"],"sources":["C:/Repo/GitHub/rubiks-cube/src/components/RubiksCube.js"],"sourcesContent":["import React, { useState, useRef, useMemo, useCallback, useEffect } from 'react';\r\nimport { Canvas, useFrame } from '@react-three/fiber';\r\nimport { OrbitControls, Environment } from '@react-three/drei';\r\nimport * as THREE from 'three';\r\n\r\n// Enhanced logging function that will be visible in terminal\r\nconst logToTerminal = (message, data = null, type = 'INFO') => {\r\n  const timestamp = new Date().toLocaleTimeString();\r\n  const prefix = type === 'ERROR' ? '❌' : type === 'WARNING' ? '⚠️' : type === 'SUCCESS' ? '✅' : '🎯';\r\n  const fullMessage = `${prefix} [${timestamp}] ${message}`;\r\n  \r\n  // Log to browser console with enhanced formatting\r\n  console.log(`\\n${fullMessage}`);\r\n  if (data) {\r\n    if (typeof data === 'object') {\r\n      console.log(JSON.stringify(data, null, 2));\r\n    } else {\r\n      console.log(data);\r\n    }\r\n  }\r\n  console.log('='.repeat(80) + '\\n');\r\n  \r\n  // Send to log server to print in terminal\r\n  fetch('http://localhost:3001/log', {\r\n    method: 'POST',\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n    },\r\n    body: JSON.stringify({\r\n      message: fullMessage,\r\n      data: data,\r\n      type: type\r\n    })\r\n  })\r\n  .then(response => {\r\n    if (!response.ok) {\r\n      throw new Error(`HTTP error! status: ${response.status}`);\r\n    }\r\n    console.log('✅ Log sent to terminal successfully');\r\n  })\r\n  .catch(error => {\r\n    console.error('❌ Could not send log to terminal server:', error);\r\n    console.log('💡 Make sure the log server is running with: npm run log-server');\r\n  });\r\n};\r\n\r\n// Function to create unique shapes for each piece with different border colors per face\r\nfunction createShapeWithFaceBorder(pieceId, size, faceIndex) {\r\n  // Use the 6 standard Rubik's cube colors for borders\r\n  const borderColors = [\r\n    '#FFFFFF', // Face 0 (front) - White\r\n    '#FF8C00', // Face 1 (back) - Orange  \r\n    '#00FF00', // Face 2 (right) - Green\r\n    '#DC143C', // Face 3 (left) - Red\r\n    '#0000FF', // Face 4 (top) - Blue\r\n    '#FFD700'  // Face 5 (bottom) - Yellow\r\n  ];\r\n  \r\n  const borderColor = borderColors[faceIndex] || '#000000';\r\n\r\n  const shapes = [\r\n    // 0-4: Basic geometric shapes (Squares) with individual face border colors\r\n    () => <group position={[0, 0, 0.012]}>\r\n      <mesh><planeGeometry args={[size, size]} /><meshBasicMaterial color=\"red\" /></mesh>\r\n      <mesh position={[0, 0, 0.001]}><planeGeometry args={[size*0.95, size*0.95]} /><meshBasicMaterial color={borderColor} /></mesh>\r\n      <mesh position={[0, 0, 0.002]}><planeGeometry args={[size*0.9, size*0.9]} /><meshBasicMaterial color=\"red\" /></mesh>\r\n    </group>, // Square\r\n    () => <group position={[0, 0, 0.012]}>\r\n      <mesh><planeGeometry args={[size, size]} /><meshBasicMaterial color=\"blue\" /></mesh>\r\n      <mesh position={[0, 0, 0.001]}><planeGeometry args={[size*0.95, size*0.95]} /><meshBasicMaterial color={borderColor} /></mesh>\r\n      <mesh position={[0, 0, 0.002]}><planeGeometry args={[size*0.9, size*0.9]} /><meshBasicMaterial color=\"blue\" /></mesh>\r\n    </group>, // Square\r\n    () => <group position={[0, 0, 0.012]}>\r\n      <mesh><planeGeometry args={[size, size]} /><meshBasicMaterial color=\"green\" /></mesh>\r\n      <mesh position={[0, 0, 0.001]}><planeGeometry args={[size*0.95, size*0.95]} /><meshBasicMaterial color={borderColor} /></mesh>\r\n      <mesh position={[0, 0, 0.002]}><planeGeometry args={[size*0.9, size*0.9]} /><meshBasicMaterial color=\"green\" /></mesh>\r\n    </group>, // Square\r\n    () => <group position={[0, 0, 0.012]}>\r\n      <mesh><planeGeometry args={[size, size]} /><meshBasicMaterial color=\"orange\" /></mesh>\r\n      <mesh position={[0, 0, 0.001]}><planeGeometry args={[size*0.95, size*0.95]} /><meshBasicMaterial color={borderColor} /></mesh>\r\n      <mesh position={[0, 0, 0.002]}><planeGeometry args={[size*0.9, size*0.9]} /><meshBasicMaterial color=\"orange\" /></mesh>\r\n    </group>, // Square\r\n    () => <group position={[0, 0, 0.012]}>\r\n      <mesh><planeGeometry args={[size, size]} /><meshBasicMaterial color=\"purple\" /></mesh>\r\n      <mesh position={[0, 0, 0.001]}><planeGeometry args={[size*0.95, size*0.95]} /><meshBasicMaterial color={borderColor} /></mesh>\r\n      <mesh position={[0, 0, 0.002]}><planeGeometry args={[size*0.9, size*0.9]} /><meshBasicMaterial color=\"purple\" /></mesh>\r\n    </group>, // Square\r\n\r\n    // 5-9: Circles with individual face border colors\r\n    () => <group position={[0, 0, 0.012]}>\r\n      <mesh><circleGeometry args={[size/2, 32]} /><meshBasicMaterial color=\"red\" /></mesh>\r\n      <mesh position={[0, 0, 0.001]}><circleGeometry args={[size*0.45, 32]} /><meshBasicMaterial color={borderColor} /></mesh>\r\n      <mesh position={[0, 0, 0.002]}><circleGeometry args={[size*0.4, 32]} /><meshBasicMaterial color=\"red\" /></mesh>\r\n    </group>, // Circle\r\n    () => <group position={[0, 0, 0.012]}>\r\n      <mesh><circleGeometry args={[size/2, 32]} /><meshBasicMaterial color=\"blue\" /></mesh>\r\n      <mesh position={[0, 0, 0.001]}><circleGeometry args={[size*0.45, 32]} /><meshBasicMaterial color={borderColor} /></mesh>\r\n      <mesh position={[0, 0, 0.002]}><circleGeometry args={[size*0.4, 32]} /><meshBasicMaterial color=\"blue\" /></mesh>\r\n    </group>, // Circle\r\n    () => <group position={[0, 0, 0.012]}>\r\n      <mesh><circleGeometry args={[size/2, 32]} /><meshBasicMaterial color=\"green\" /></mesh>\r\n      <mesh position={[0, 0, 0.001]}><circleGeometry args={[size*0.45, 32]} /><meshBasicMaterial color={borderColor} /></mesh>\r\n      <mesh position={[0, 0, 0.002]}><circleGeometry args={[size*0.4, 32]} /><meshBasicMaterial color=\"green\" /></mesh>\r\n    </group>, // Circle\r\n    () => <group position={[0, 0, 0.012]}>\r\n      <mesh><circleGeometry args={[size/2, 32]} /><meshBasicMaterial color=\"orange\" /></mesh>\r\n      <mesh position={[0, 0, 0.001]}><circleGeometry args={[size*0.45, 32]} /><meshBasicMaterial color={borderColor} /></mesh>\r\n      <mesh position={[0, 0, 0.002]}><circleGeometry args={[size*0.4, 32]} /><meshBasicMaterial color=\"orange\" /></mesh>\r\n    </group>, // Circle\r\n    () => <group position={[0, 0, 0.012]}>\r\n      <mesh><circleGeometry args={[size/2, 32]} /><meshBasicMaterial color=\"yellow\" /></mesh>\r\n      <mesh position={[0, 0, 0.001]}><circleGeometry args={[size*0.45, 32]} /><meshBasicMaterial color={borderColor} /></mesh>\r\n      <mesh position={[0, 0, 0.002]}><circleGeometry args={[size*0.4, 32]} /><meshBasicMaterial color=\"yellow\" /></mesh>\r\n    </group>, // Circle\r\n\r\n    // 10-14: Triangles (flat cones to create triangle shapes) with individual face border colors\r\n    () => <group position={[0, 0, 0.012]}>\r\n      <mesh rotation={[Math.PI/2, 0, 0]}><coneGeometry args={[size/2, 0.01, 3]} /><meshBasicMaterial color=\"cyan\" /></mesh>\r\n      <mesh position={[0, 0, 0.001]} rotation={[Math.PI/2, 0, 0]}><coneGeometry args={[size*0.45, 0.01, 3]} /><meshBasicMaterial color={borderColor} /></mesh>\r\n      <mesh position={[0, 0, 0.002]} rotation={[Math.PI/2, 0, 0]}><coneGeometry args={[size*0.4, 0.01, 3]} /><meshBasicMaterial color=\"cyan\" /></mesh>\r\n    </group>, // Triangle\r\n    () => <group position={[0, 0, 0.012]}>\r\n      <mesh rotation={[Math.PI/2, 0, 0]}><coneGeometry args={[size/2, 0.01, 3]} /><meshBasicMaterial color=\"magenta\" /></mesh>\r\n      <mesh position={[0, 0, 0.001]} rotation={[Math.PI/2, 0, 0]}><coneGeometry args={[size*0.45, 0.01, 3]} /><meshBasicMaterial color={borderColor} /></mesh>\r\n      <mesh position={[0, 0, 0.002]} rotation={[Math.PI/2, 0, 0]}><coneGeometry args={[size*0.4, 0.01, 3]} /><meshBasicMaterial color=\"magenta\" /></mesh>\r\n    </group>, // Triangle\r\n    () => <group position={[0, 0, 0.012]}>\r\n      <mesh rotation={[Math.PI/2, 0, 0]}><coneGeometry args={[size/2, 0.01, 3]} /><meshBasicMaterial color=\"lime\" /></mesh>\r\n      <mesh position={[0, 0, 0.001]} rotation={[Math.PI/2, 0, 0]}><coneGeometry args={[size*0.45, 0.01, 3]} /><meshBasicMaterial color={borderColor} /></mesh>\r\n      <mesh position={[0, 0, 0.002]} rotation={[Math.PI/2, 0, 0]}><coneGeometry args={[size*0.4, 0.01, 3]} /><meshBasicMaterial color=\"lime\" /></mesh>\r\n    </group>, // Triangle\r\n    () => <group position={[0, 0, 0.012]}>\r\n      <mesh rotation={[Math.PI/2, 0, 0]}><coneGeometry args={[size/2, 0.01, 3]} /><meshBasicMaterial color=\"pink\" /></mesh>\r\n      <mesh position={[0, 0, 0.001]} rotation={[Math.PI/2, 0, 0]}><coneGeometry args={[size*0.45, 0.01, 3]} /><meshBasicMaterial color={borderColor} /></mesh>\r\n      <mesh position={[0, 0, 0.002]} rotation={[Math.PI/2, 0, 0]}><coneGeometry args={[size*0.4, 0.01, 3]} /><meshBasicMaterial color=\"pink\" /></mesh>\r\n    </group>, // Triangle\r\n    () => <group position={[0, 0, 0.012]}>\r\n      <mesh rotation={[0, 0, Math.PI/4]}><planeGeometry args={[size, size]} /><meshBasicMaterial color=\"purple\" /></mesh>\r\n      <mesh position={[0, 0, 0.001]} rotation={[0, 0, Math.PI/4]}><planeGeometry args={[size*0.95, size*0.95]} /><meshBasicMaterial color={borderColor} /></mesh>\r\n      <mesh position={[0, 0, 0.002]} rotation={[0, 0, Math.PI/4]}><planeGeometry args={[size*0.9, size*0.9]} /><meshBasicMaterial color=\"purple\" /></mesh>\r\n    </group>, // Diamond\r\n\r\n    // 15-19: Diamonds (rotated squares) with individual face border colors\r\n    () => <group position={[0, 0, 0.012]}>\r\n      <mesh rotation={[0, 0, Math.PI/4]}><planeGeometry args={[size, size]} /><meshBasicMaterial color=\"red\" /></mesh>\r\n      <mesh position={[0, 0, 0.001]} rotation={[0, 0, Math.PI/4]}><planeGeometry args={[size*0.95, size*0.95]} /><meshBasicMaterial color={borderColor} /></mesh>\r\n      <mesh position={[0, 0, 0.002]} rotation={[0, 0, Math.PI/4]}><planeGeometry args={[size*0.9, size*0.9]} /><meshBasicMaterial color=\"red\" /></mesh>\r\n    </group>, // Diamond\r\n    () => <group position={[0, 0, 0.012]}>\r\n      <mesh rotation={[0, 0, Math.PI/4]}><planeGeometry args={[size, size]} /><meshBasicMaterial color=\"blue\" /></mesh>\r\n      <mesh position={[0, 0, 0.001]} rotation={[0, 0, Math.PI/4]}><planeGeometry args={[size*0.95, size*0.95]} /><meshBasicMaterial color={borderColor} /></mesh>\r\n      <mesh position={[0, 0, 0.002]} rotation={[0, 0, Math.PI/4]}><planeGeometry args={[size*0.9, size*0.9]} /><meshBasicMaterial color=\"blue\" /></mesh>\r\n    </group>, // Diamond\r\n    () => <group position={[0, 0, 0.012]}>\r\n      <mesh rotation={[0, 0, Math.PI/4]}><planeGeometry args={[size, size]} /><meshBasicMaterial color=\"green\" /></mesh>\r\n      <mesh position={[0, 0, 0.001]} rotation={[0, 0, Math.PI/4]}><planeGeometry args={[size*0.95, size*0.95]} /><meshBasicMaterial color={borderColor} /></mesh>\r\n      <mesh position={[0, 0, 0.002]} rotation={[0, 0, Math.PI/4]}><planeGeometry args={[size*0.9, size*0.9]} /><meshBasicMaterial color=\"green\" /></mesh>\r\n    </group>, // Diamond\r\n    () => <group position={[0, 0, 0.012]}>\r\n      <mesh rotation={[0, 0, Math.PI/4]}><planeGeometry args={[size, size]} /><meshBasicMaterial color=\"orange\" /></mesh>\r\n      <mesh position={[0, 0, 0.001]} rotation={[0, 0, Math.PI/4]}><planeGeometry args={[size*0.95, size*0.95]} /><meshBasicMaterial color={borderColor} /></mesh>\r\n      <mesh position={[0, 0, 0.002]} rotation={[0, 0, Math.PI/4]}><planeGeometry args={[size*0.9, size*0.9]} /><meshBasicMaterial color=\"orange\" /></mesh>\r\n    </group>, // Diamond\r\n    () => <group position={[0, 0, 0.012]}>\r\n      <mesh rotation={[0, 0, Math.PI/4]}><planeGeometry args={[size, size]} /><meshBasicMaterial color=\"purple\" /></mesh>\r\n      <mesh position={[0, 0, 0.001]} rotation={[0, 0, Math.PI/4]}><planeGeometry args={[size*0.95, size*0.95]} /><meshBasicMaterial color={borderColor} /></mesh>\r\n      <mesh position={[0, 0, 0.002]} rotation={[0, 0, Math.PI/4]}><planeGeometry args={[size*0.9, size*0.9]} /><meshBasicMaterial color=\"purple\" /></mesh>\r\n    </group>, // Diamond\r\n\r\n    // 20-25: Triangles (flat cones to create triangle shapes) with individual face border colors\r\n    () => <group position={[0, 0, 0.012]}>\r\n      <mesh rotation={[Math.PI/2, 0, 0]}><coneGeometry args={[size/2, 0.01, 3]} /><meshBasicMaterial color=\"cyan\" /></mesh>\r\n      <mesh position={[0, 0, 0.001]} rotation={[Math.PI/2, 0, 0]}><coneGeometry args={[size*0.45, 0.01, 3]} /><meshBasicMaterial color={borderColor} /></mesh>\r\n      <mesh position={[0, 0, 0.002]} rotation={[Math.PI/2, 0, 0]}><coneGeometry args={[size*0.4, 0.01, 3]} /><meshBasicMaterial color=\"cyan\" /></mesh>\r\n    </group>, // Triangle\r\n    () => <group position={[0, 0, 0.012]}>\r\n      <mesh rotation={[Math.PI/2, 0, 0]}><coneGeometry args={[size/2, 0.01, 3]} /><meshBasicMaterial color=\"magenta\" /></mesh>\r\n      <mesh position={[0, 0, 0.001]} rotation={[Math.PI/2, 0, 0]}><coneGeometry args={[size*0.45, 0.01, 3]} /><meshBasicMaterial color={borderColor} /></mesh>\r\n      <mesh position={[0, 0, 0.002]} rotation={[Math.PI/2, 0, 0]}><coneGeometry args={[size*0.4, 0.01, 3]} /><meshBasicMaterial color=\"magenta\" /></mesh>\r\n    </group>, // Triangle\r\n    () => <group position={[0, 0, 0.012]}>\r\n      <mesh rotation={[Math.PI/2, 0, 0]}><coneGeometry args={[size/2, 0.01, 3]} /><meshBasicMaterial color=\"lime\" /></mesh>\r\n      <mesh position={[0, 0, 0.001]} rotation={[Math.PI/2, 0, 0]}><coneGeometry args={[size*0.45, 0.01, 3]} /><meshBasicMaterial color={borderColor} /></mesh>\r\n      <mesh position={[0, 0, 0.002]} rotation={[Math.PI/2, 0, 0]}><coneGeometry args={[size*0.4, 0.01, 3]} /><meshBasicMaterial color=\"lime\" /></mesh>\r\n    </group>, // Triangle\r\n    () => <group position={[0, 0, 0.012]}>\r\n      <mesh rotation={[Math.PI/2, 0, 0]}><coneGeometry args={[size/2, 0.01, 3]} /><meshBasicMaterial color=\"pink\" /></mesh>\r\n      <mesh position={[0, 0, 0.001]} rotation={[Math.PI/2, 0, 0]}><coneGeometry args={[size*0.45, 0.01, 3]} /><meshBasicMaterial color={borderColor} /></mesh>\r\n      <mesh position={[0, 0, 0.002]} rotation={[Math.PI/2, 0, 0]}><coneGeometry args={[size*0.4, 0.01, 3]} /><meshBasicMaterial color=\"pink\" /></mesh>\r\n    </group>, // Triangle\r\n    () => <group position={[0, 0, 0.012]}>\r\n      <mesh rotation={[Math.PI/2, 0, 0]}><coneGeometry args={[size/2, 0.01, 3]} /><meshBasicMaterial color=\"purple\" /></mesh>\r\n      <mesh position={[0, 0, 0.001]} rotation={[Math.PI/2, 0, 0]}><coneGeometry args={[size*0.45, 0.01, 3]} /><meshBasicMaterial color={borderColor} /></mesh>\r\n      <mesh position={[0, 0, 0.002]} rotation={[Math.PI/2, 0, 0]}><coneGeometry args={[size*0.4, 0.01, 3]} /><meshBasicMaterial color=\"purple\" /></mesh>\r\n    </group>, // Triangle\r\n    () => <group position={[0, 0, 0.012]}>\r\n      <mesh rotation={[Math.PI/2, 0, 0]}><coneGeometry args={[size/2, 0.01, 3]} /><meshBasicMaterial color=\"yellow\" /></mesh>\r\n      <mesh position={[0, 0, 0.001]} rotation={[Math.PI/2, 0, 0]}><coneGeometry args={[size*0.45, 0.01, 3]} /><meshBasicMaterial color={borderColor} /></mesh>\r\n      <mesh position={[0, 0, 0.002]} rotation={[Math.PI/2, 0, 0]}><coneGeometry args={[size*0.4, 0.01, 3]} /><meshBasicMaterial color=\"yellow\" /></mesh>\r\n    </group> // Triangle\r\n  ];\r\n  \r\n  const shapeIndex = pieceId;\r\n  return shapes[shapeIndex]();\r\n}\r\n\r\n// Function to create unique shapes for each piece\r\nfunction createShape(pieceId, size) {\r\n  const shapes = [\r\n    // 0-4: Basic geometric shapes (Squares)\r\n    () => <group position={[0, 0, 0.012]}><mesh><planeGeometry args={[size, size]} /><meshBasicMaterial color=\"red\" /></mesh><mesh position={[0, 0, 0.001]}><planeGeometry args={[size*0.95, size*0.95]} /><meshBasicMaterial color=\"black\" /></mesh><mesh position={[0, 0, 0.002]}><planeGeometry args={[size*0.9, size*0.9]} /><meshBasicMaterial color=\"red\" /></mesh></group>, // Square\r\n    () => <group position={[0, 0, 0.012]}><mesh><planeGeometry args={[size, size]} /><meshBasicMaterial color=\"blue\" /></mesh><mesh position={[0, 0, 0.001]}><planeGeometry args={[size*0.95, size*0.95]} /><meshBasicMaterial color=\"black\" /></mesh><mesh position={[0, 0, 0.002]}><planeGeometry args={[size*0.9, size*0.9]} /><meshBasicMaterial color=\"blue\" /></mesh></group>, // Square\r\n    () => <group position={[0, 0, 0.012]}><mesh><planeGeometry args={[size, size]} /><meshBasicMaterial color=\"green\" /></mesh><mesh position={[0, 0, 0.001]}><planeGeometry args={[size*0.95, size*0.95]} /><meshBasicMaterial color=\"black\" /></mesh><mesh position={[0, 0, 0.002]}><planeGeometry args={[size*0.9, size*0.9]} /><meshBasicMaterial color=\"green\" /></mesh></group>, // Square\r\n    () => <group position={[0, 0, 0.012]}><mesh><planeGeometry args={[size, size]} /><meshBasicMaterial color=\"orange\" /></mesh><mesh position={[0, 0, 0.001]}><planeGeometry args={[size*0.95, size*0.95]} /><meshBasicMaterial color=\"black\" /></mesh><mesh position={[0, 0, 0.002]}><planeGeometry args={[size*0.9, size*0.9]} /><meshBasicMaterial color=\"orange\" /></mesh></group>, // Square\r\n    () => <group position={[0, 0, 0.012]}><mesh><planeGeometry args={[size, size]} /><meshBasicMaterial color=\"purple\" /></mesh><mesh position={[0, 0, 0.001]}><planeGeometry args={[size*0.95, size*0.95]} /><meshBasicMaterial color=\"black\" /></mesh><mesh position={[0, 0, 0.002]}><planeGeometry args={[size*0.9, size*0.9]} /><meshBasicMaterial color=\"purple\" /></mesh></group>, // Square\r\n\r\n    // 5-9: Circles\r\n    () => <group position={[0, 0, 0.012]}><mesh><circleGeometry args={[size/2, 32]} /><meshBasicMaterial color=\"red\" /></mesh><mesh position={[0, 0, 0.001]}><circleGeometry args={[size*0.45, 32]} /><meshBasicMaterial color=\"black\" /></mesh><mesh position={[0, 0, 0.002]}><circleGeometry args={[size*0.4, 32]} /><meshBasicMaterial color=\"red\" /></mesh></group>, // Circle\r\n    () => <group position={[0, 0, 0.012]}><mesh><circleGeometry args={[size/2, 32]} /><meshBasicMaterial color=\"blue\" /></mesh><mesh position={[0, 0, 0.001]}><circleGeometry args={[size*0.45, 32]} /><meshBasicMaterial color=\"black\" /></mesh><mesh position={[0, 0, 0.002]}><circleGeometry args={[size*0.4, 32]} /><meshBasicMaterial color=\"blue\" /></mesh></group>, // Circle\r\n    () => <group position={[0, 0, 0.012]}><mesh><circleGeometry args={[size/2, 32]} /><meshBasicMaterial color=\"green\" /></mesh><mesh position={[0, 0, 0.001]}><circleGeometry args={[size*0.45, 32]} /><meshBasicMaterial color=\"black\" /></mesh><mesh position={[0, 0, 0.002]}><circleGeometry args={[size*0.4, 32]} /><meshBasicMaterial color=\"green\" /></mesh></group>, // Circle\r\n    () => <group position={[0, 0, 0.012]}><mesh><circleGeometry args={[size/2, 32]} /><meshBasicMaterial color=\"orange\" /></mesh><mesh position={[0, 0, 0.001]}><circleGeometry args={[size*0.45, 32]} /><meshBasicMaterial color=\"black\" /></mesh><mesh position={[0, 0, 0.002]}><circleGeometry args={[size*0.4, 32]} /><meshBasicMaterial color=\"orange\" /></mesh></group>, // Circle\r\n    () => <group position={[0, 0, 0.012]}><mesh><circleGeometry args={[size/2, 32]} /><meshBasicMaterial color=\"yellow\" /></mesh><mesh position={[0, 0, 0.001]}><circleGeometry args={[size*0.45, 32]} /><meshBasicMaterial color=\"black\" /></mesh><mesh position={[0, 0, 0.002]}><circleGeometry args={[size*0.4, 32]} /><meshBasicMaterial color=\"yellow\" /></mesh></group>, // Circle\r\n\r\n    // 10-14: Triangles (flat cones to create triangle shapes)\r\n    () => <group position={[0, 0, 0.012]}><mesh rotation={[Math.PI/2, 0, 0]}><coneGeometry args={[size/2, 0.01, 3]} /><meshBasicMaterial color=\"cyan\" /></mesh><mesh position={[0, 0, 0.001]} rotation={[Math.PI/2, 0, 0]}><coneGeometry args={[size*0.45, 0.01, 3]} /><meshBasicMaterial color=\"black\" /></mesh><mesh position={[0, 0, 0.002]} rotation={[Math.PI/2, 0, 0]}><coneGeometry args={[size*0.4, 0.01, 3]} /><meshBasicMaterial color=\"cyan\" /></mesh></group>, // Triangle\r\n    () => <group position={[0, 0, 0.012]}><mesh rotation={[Math.PI/2, 0, 0]}><coneGeometry args={[size/2, 0.01, 3]} /><meshBasicMaterial color=\"magenta\" /></mesh><mesh position={[0, 0, 0.001]} rotation={[Math.PI/2, 0, 0]}><coneGeometry args={[size*0.45, 0.01, 3]} /><meshBasicMaterial color=\"black\" /></mesh><mesh position={[0, 0, 0.002]} rotation={[Math.PI/2, 0, 0]}><coneGeometry args={[size*0.4, 0.01, 3]} /><meshBasicMaterial color=\"magenta\" /></mesh></group>, // Triangle\r\n    () => <group position={[0, 0, 0.012]}><mesh rotation={[Math.PI/2, 0, 0]}><coneGeometry args={[size/2, 0.01, 3]} /><meshBasicMaterial color=\"lime\" /></mesh><mesh position={[0, 0, 0.001]} rotation={[Math.PI/2, 0, 0]}><coneGeometry args={[size*0.45, 0.01, 3]} /><meshBasicMaterial color=\"black\" /></mesh><mesh position={[0, 0, 0.002]} rotation={[Math.PI/2, 0, 0]}><coneGeometry args={[size*0.4, 0.01, 3]} /><meshBasicMaterial color=\"lime\" /></mesh></group>, // Triangle\r\n    () => <group position={[0, 0, 0.012]}><mesh rotation={[Math.PI/2, 0, 0]}><coneGeometry args={[size/2, 0.01, 3]} /><meshBasicMaterial color=\"pink\" /></mesh><mesh position={[0, 0, 0.001]} rotation={[Math.PI/2, 0, 0]}><coneGeometry args={[size*0.45, 0.01, 3]} /><meshBasicMaterial color=\"black\" /></mesh><mesh position={[0, 0, 0.002]} rotation={[Math.PI/2, 0, 0]}><coneGeometry args={[size*0.4, 0.01, 3]} /><meshBasicMaterial color=\"pink\" /></mesh></group>, // Triangle\r\n    () => <group position={[0, 0, 0.012]}><mesh rotation={[0, 0, Math.PI/4]}><planeGeometry args={[size, size]} /><meshBasicMaterial color=\"purple\" /></mesh><mesh position={[0, 0, 0.001]} rotation={[0, 0, Math.PI/4]}><planeGeometry args={[size*0.95, size*0.95]} /><meshBasicMaterial color=\"black\" /></mesh><mesh position={[0, 0, 0.002]} rotation={[0, 0, Math.PI/4]}><planeGeometry args={[size*0.9, size*0.9]} /><meshBasicMaterial color=\"purple\" /></mesh></group>, // Diamond\r\n\r\n    // 15-19: Diamonds (rotated squares)\r\n    () => <group position={[0, 0, 0.012]}><mesh rotation={[0, 0, Math.PI/4]}><planeGeometry args={[size, size]} /><meshBasicMaterial color=\"red\" /></mesh><mesh position={[0, 0, 0.001]} rotation={[0, 0, Math.PI/4]}><planeGeometry args={[size*0.95, size*0.95]} /><meshBasicMaterial color=\"black\" /></mesh><mesh position={[0, 0, 0.002]} rotation={[0, 0, Math.PI/4]}><planeGeometry args={[size*0.9, size*0.9]} /><meshBasicMaterial color=\"red\" /></mesh></group>, // Diamond\r\n    () => <group position={[0, 0, 0.012]}><mesh rotation={[0, 0, Math.PI/4]}><planeGeometry args={[size, size]} /><meshBasicMaterial color=\"blue\" /></mesh><mesh position={[0, 0, 0.001]} rotation={[0, 0, Math.PI/4]}><planeGeometry args={[size*0.95, size*0.95]} /><meshBasicMaterial color=\"black\" /></mesh><mesh position={[0, 0, 0.002]} rotation={[0, 0, Math.PI/4]}><planeGeometry args={[size*0.9, size*0.9]} /><meshBasicMaterial color=\"blue\" /></mesh></group>, // Diamond\r\n    () => <group position={[0, 0, 0.012]}><mesh rotation={[0, 0, Math.PI/4]}><planeGeometry args={[size, size]} /><meshBasicMaterial color=\"green\" /></mesh><mesh position={[0, 0, 0.001]} rotation={[0, 0, Math.PI/4]}><planeGeometry args={[size*0.95, size*0.95]} /><meshBasicMaterial color=\"black\" /></mesh><mesh position={[0, 0, 0.002]} rotation={[0, 0, Math.PI/4]}><planeGeometry args={[size*0.9, size*0.9]} /><meshBasicMaterial color=\"green\" /></mesh></group>, // Diamond\r\n    () => <group position={[0, 0, 0.012]}><mesh rotation={[0, 0, Math.PI/4]}><planeGeometry args={[size, size]} /><meshBasicMaterial color=\"orange\" /></mesh><mesh position={[0, 0, 0.001]} rotation={[0, 0, Math.PI/4]}><planeGeometry args={[size*0.95, size*0.95]} /><meshBasicMaterial color=\"black\" /></mesh><mesh position={[0, 0, 0.002]} rotation={[0, 0, Math.PI/4]}><planeGeometry args={[size*0.9, size*0.9]} /><meshBasicMaterial color=\"orange\" /></mesh></group>, // Diamond\r\n    () => <group position={[0, 0, 0.012]}><mesh rotation={[0, 0, Math.PI/4]}><planeGeometry args={[size, size]} /><meshBasicMaterial color=\"purple\" /></mesh><mesh position={[0, 0, 0.001]} rotation={[0, 0, Math.PI/4]}><planeGeometry args={[size*0.95, size*0.95]} /><meshBasicMaterial color=\"black\" /></mesh><mesh position={[0, 0, 0.002]} rotation={[0, 0, Math.PI/4]}><planeGeometry args={[size*0.9, size*0.9]} /><meshBasicMaterial color=\"purple\" /></mesh></group>, // Diamond\r\n\r\n    // 20-25: Triangles (flat cones to create triangle shapes)\r\n    () => <group position={[0, 0, 0.012]}><mesh rotation={[Math.PI/2, 0, 0]}><coneGeometry args={[size/2, 0.01, 3]} /><meshBasicMaterial color=\"cyan\" /></mesh><mesh position={[0, 0, 0.001]} rotation={[Math.PI/2, 0, 0]}><coneGeometry args={[size*0.45, 0.01, 3]} /><meshBasicMaterial color=\"black\" /></mesh><mesh position={[0, 0, 0.002]} rotation={[Math.PI/2, 0, 0]}><coneGeometry args={[size*0.4, 0.01, 3]} /><meshBasicMaterial color=\"cyan\" /></mesh></group>, // Triangle\r\n    () => <group position={[0, 0, 0.012]}><mesh rotation={[Math.PI/2, 0, 0]}><coneGeometry args={[size/2, 0.01, 3]} /><meshBasicMaterial color=\"magenta\" /></mesh><mesh position={[0, 0, 0.001]} rotation={[Math.PI/2, 0, 0]}><coneGeometry args={[size*0.45, 0.01, 3]} /><meshBasicMaterial color=\"black\" /></mesh><mesh position={[0, 0, 0.002]} rotation={[Math.PI/2, 0, 0]}><coneGeometry args={[size*0.4, 0.01, 3]} /><meshBasicMaterial color=\"magenta\" /></mesh></group>, // Triangle\r\n    () => <group position={[0, 0, 0.012]}><mesh rotation={[Math.PI/2, 0, 0]}><coneGeometry args={[size/2, 0.01, 3]} /><meshBasicMaterial color=\"lime\" /></mesh><mesh position={[0, 0, 0.001]} rotation={[Math.PI/2, 0, 0]}><coneGeometry args={[size*0.45, 0.01, 3]} /><meshBasicMaterial color=\"black\" /></mesh><mesh position={[0, 0, 0.002]} rotation={[Math.PI/2, 0, 0]}><coneGeometry args={[size*0.4, 0.01, 3]} /><meshBasicMaterial color=\"lime\" /></mesh></group>, // Triangle\r\n    () => <group position={[0, 0, 0.012]}><mesh rotation={[Math.PI/2, 0, 0]}><coneGeometry args={[size/2, 0.01, 3]} /><meshBasicMaterial color=\"pink\" /></mesh><mesh position={[0, 0, 0.001]} rotation={[Math.PI/2, 0, 0]}><coneGeometry args={[size*0.45, 0.01, 3]} /><meshBasicMaterial color=\"black\" /></mesh><mesh position={[0, 0, 0.002]} rotation={[Math.PI/2, 0, 0]}><coneGeometry args={[size*0.4, 0.01, 3]} /><meshBasicMaterial color=\"pink\" /></mesh></group>, // Triangle\r\n    () => <group position={[0, 0, 0.012]}><mesh rotation={[Math.PI/2, 0, 0]}><coneGeometry args={[size/2, 0.01, 3]} /><meshBasicMaterial color=\"purple\" /></mesh><mesh position={[0, 0, 0.001]} rotation={[Math.PI/2, 0, 0]}><coneGeometry args={[size*0.45, 0.01, 3]} /><meshBasicMaterial color=\"black\" /></mesh><mesh position={[0, 0, 0.002]} rotation={[Math.PI/2, 0, 0]}><coneGeometry args={[size*0.4, 0.01, 3]} /><meshBasicMaterial color=\"purple\" /></mesh></group>, // Triangle\r\n    () => <group position={[0, 0, 0.012]}><mesh rotation={[Math.PI/2, 0, 0]}><coneGeometry args={[size/2, 0.01, 3]} /><meshBasicMaterial color=\"yellow\" /></mesh><mesh position={[0, 0, 0.001]} rotation={[Math.PI/2, 0, 0]}><coneGeometry args={[size*0.45, 0.01, 3]} /><meshBasicMaterial color=\"black\" /></mesh><mesh position={[0, 0, 0.002]} rotation={[Math.PI/2, 0, 0]}><coneGeometry args={[size*0.4, 0.01, 3]} /><meshBasicMaterial color=\"yellow\" /></mesh></group> // Triangle\r\n  ];\r\n  \r\n  const shapeIndex = pieceId; // Changed from pieceId % shapes.length\r\n  return shapes[shapeIndex]();\r\n}\r\n\r\n// Individual cube piece component with smooth rotation\r\nfunction CubePiece({ position, colors, size = 0.95, pieceId = 0, isHighlighted = false, highlightInfo = null, rotatingFace = null, rotationProgress = 0 }) {\r\n  const meshRef = useRef();\r\n  const groupRef = useRef();\r\n  \r\n  // Log piece information for debugging\r\n  React.useEffect(() => {\r\n    const shapeTypes = ['Square', 'Square', 'Square', 'Square', 'Square', 'Circle', 'Circle', 'Circle', 'Circle', 'Circle', 'Triangle', 'Triangle', 'Triangle', 'Triangle', 'Diamond', 'Diamond', 'Diamond', 'Diamond', 'Diamond', 'Diamond', 'Triangle', 'Triangle', 'Triangle', 'Triangle', 'Triangle', 'Triangle'];\r\n    const shapeColors = ['Red', 'Blue', 'Green', 'Orange', 'Purple', 'Red', 'Blue', 'Green', 'Orange', 'Yellow', 'Cyan', 'Magenta', 'Lime', 'Pink', 'Purple', 'Red', 'Blue', 'Green', 'Orange', 'Purple', 'Cyan', 'Magenta', 'Lime', 'Pink', 'Purple', 'Yellow'];\r\n    \r\n    const shapeType = shapeTypes[pieceId] || 'Unknown'; // Changed from pieceId % shapeTypes.length\r\n    const shapeColor = shapeColors[pieceId] || 'Unknown'; // Changed from pieceId % shapeColors.length\r\n    \r\n    // Debug specific pieces only\r\n    if (pieceId === 0 || pieceId === 17 || pieceId === 25 || pieceId === 1 || pieceId === 11) {\r\n      console.log(`🔍 ${shapeColor} ${shapeType} Piece ${pieceId} at position [${position.join(', ')}]`);\r\n      console.log(`  Stored Colors:`, colors);\r\n      \r\n      // Show what colors should be visible based on position\r\n      const [x, y, z] = position;\r\n      const visibleFaces = [];\r\n      if (x === 1) visibleFaces.push('right');\r\n      if (x === -1) visibleFaces.push('left');\r\n      if (y === 1) visibleFaces.push('top');\r\n      if (y === -1) visibleFaces.push('bottom');\r\n      if (z === 1) visibleFaces.push('front');\r\n      if (z === -1) visibleFaces.push('back');\r\n      \r\n      console.log(`  Visible faces:`, visibleFaces);\r\n      console.log(`  Colors on visible faces:`, visibleFaces.map(face => `${face}: ${colors[face]}`));\r\n    }\r\n  }, [pieceId, position, colors]);\r\n\r\n  // Color mapping\r\n  const colorMap = {\r\n    'white': '#FFFFFF',\r\n    'yellow': '#FFD700',\r\n    'red': '#DC143C', // More vibrant red (crimson)\r\n    'orange': '#FF8C00', // More vibrant orange\r\n    'blue': '#0000FF',\r\n    'green': '#00FF00',\r\n    'purple': '#800080',\r\n    'cyan': '#00FFFF',\r\n    'magenta': '#FF00FF',\r\n    'lime': '#00FF00',\r\n    'pink': '#FFC0CB',\r\n    'black': '#000000' // Keep black as black\r\n  };\r\n\r\n  // Create cube geometry\r\n  const cubeGeometry = useMemo(() => new THREE.BoxGeometry(size, size, size), [size]);\r\n  \r\n  // Create face geometry\r\n  const faceGeometry = useMemo(() => {\r\n    const geometry = new THREE.PlaneGeometry(size, size);\r\n    return geometry;\r\n  }, [size]);\r\n\r\n  // Get the color for a face based on the face index - always use original colors\r\n  const getFaceColor = (faceIndex) => {\r\n    // Always use the piece's stored colors - no rotation needed\r\n    switch (faceIndex) {\r\n      case 0: return colors.front;\r\n      case 1: return colors.back;\r\n      case 2: return colors.right;\r\n      case 3: return colors.left;\r\n      case 4: return colors.top;\r\n      case 5: return colors.bottom;\r\n      default: return 'black';\r\n    }\r\n  };\r\n\r\n  // Check if a face should be visible based on the piece's original position\r\n  const isFaceVisible = (faceIndex) => {\r\n    const [x, y, z] = position;\r\n    \r\n    // Determine which faces are visible based on original position\r\n    const visibleFaces = [];\r\n    if (x === 1) visibleFaces.push(2); // Right face visible\r\n    if (x === -1) visibleFaces.push(3); // Left face visible\r\n    if (y === 1) visibleFaces.push(4); // Top face visible\r\n    if (y === -1) visibleFaces.push(5); // Bottom face visible\r\n    if (z === 1) visibleFaces.push(0); // Front face visible\r\n    if (z === -1) visibleFaces.push(1); // Back face visible\r\n    \r\n    return visibleFaces.includes(faceIndex);\r\n  };\r\n\r\n  // Check if this piece is part of the currently rotating face\r\n  const isPartOfRotatingFace = useCallback(() => {\r\n    if (!rotatingFace) return false;\r\n    \r\n    const [x, y, z] = position;\r\n    const { face } = rotatingFace;\r\n    \r\n    switch (face) {\r\n      case 'F': return z === 1;\r\n      case 'B': return z === -1;\r\n      case 'R': return x === 1;\r\n      case 'L': return x === -1;\r\n      case 'U': return y === 1;\r\n      case 'D': return y === -1;\r\n      default: return false;\r\n    }\r\n  }, [position, rotatingFace]);\r\n\r\n  // Calculate group rotation for smooth animation\r\n  const getGroupRotationAngle = () => {\r\n    if (!rotatingFace || !isPartOfRotatingFace()) {\r\n      return { x: 0, y: 0, z: 0 };\r\n    }\r\n\r\n    const { face, direction } = rotatingFace;\r\n    const sign = direction === 'clockwise' ? 1 : -1;\r\n    const angle = (Math.PI / 2) * rotationProgress * sign; // 90 degrees total\r\n\r\n    switch (face) {\r\n      case 'F': return { x: 0, y: 0, z: angle };\r\n      case 'B': return { x: 0, y: 0, z: -angle };\r\n      case 'R': return { x: angle, y: 0, z: 0 };\r\n      case 'L': return { x: -angle, y: 0, z: 0 };\r\n      case 'U': return { x: 0, y: angle, z: 0 };\r\n      case 'D': return { x: 0, y: -angle, z: 0 };\r\n      default: return { x: 0, y: 0, z: 0 };\r\n    }\r\n  };\r\n\r\n  // Calculate position offset for group rotation\r\n  const getGroupPositionOffset = () => {\r\n    if (!rotatingFace || !isPartOfRotatingFace()) {\r\n      return { x: 0, y: 0, z: 0 };\r\n    }\r\n\r\n    const { face, direction } = rotatingFace;\r\n    const sign = direction === 'clockwise' ? 1 : -1;\r\n    const progress = rotationProgress;\r\n    \r\n    // Calculate the offset needed to rotate around face center\r\n    const [x, y, z] = position;\r\n    let offsetX = 0, offsetY = 0, offsetZ = 0;\r\n    \r\n    // Apply rotation around face center\r\n    const angle = (Math.PI / 2) * progress * sign;\r\n    \r\n    switch (face) {\r\n      case 'F': // Rotate around Z axis at face center (0, 0, 1)\r\n        offsetX = x * (Math.cos(angle) - 1) - y * Math.sin(angle);\r\n        offsetY = x * Math.sin(angle) + y * (Math.cos(angle) - 1);\r\n        break;\r\n      case 'B': // Rotate around Z axis at face center (0, 0, -1)\r\n        offsetX = x * (Math.cos(-angle) - 1) - y * Math.sin(-angle);\r\n        offsetY = x * Math.sin(-angle) + y * (Math.cos(-angle) - 1);\r\n        break;\r\n      case 'R': // Rotate around X axis at face center (1, 0, 0)\r\n        offsetY = y * (Math.cos(angle) - 1) - z * Math.sin(angle);\r\n        offsetZ = y * Math.sin(angle) + z * (Math.cos(angle) - 1);\r\n        break;\r\n      case 'L': // Rotate around X axis at face center (-1, 0, 0)\r\n        offsetY = y * (Math.cos(-angle) - 1) - z * Math.sin(-angle);\r\n        offsetZ = y * Math.sin(-angle) + z * (Math.cos(-angle) - 1);\r\n        break;\r\n      case 'U': // Rotate around Y axis at face center (0, 1, 0)\r\n        offsetX = x * (Math.cos(angle) - 1) - z * Math.sin(angle);\r\n        offsetZ = x * Math.sin(angle) + z * (Math.cos(angle) - 1);\r\n        break;\r\n      case 'D': // Rotate around Y axis at face center (0, -1, 0)\r\n        offsetX = x * (Math.cos(-angle) - 1) - z * Math.sin(-angle);\r\n        offsetZ = x * Math.sin(-angle) + z * (Math.cos(-angle) - 1);\r\n        break;\r\n    }\r\n    \r\n    return { x: offsetX, y: offsetY, z: offsetZ };\r\n  };\r\n\r\n  const groupRotationAngle = getGroupRotationAngle();\r\n  const groupPositionOffset = getGroupPositionOffset();\r\n\r\n  // Calculate final position with group rotation offset\r\n  const finalPosition = [\r\n    position[0] + groupPositionOffset.x,\r\n    position[1] + groupPositionOffset.y,\r\n    position[2] + groupPositionOffset.z\r\n  ];\r\n\r\n  return (\r\n    <group \r\n      ref={groupRef}\r\n      position={finalPosition}\r\n      rotation={[groupRotationAngle.x, groupRotationAngle.y, groupRotationAngle.z]}\r\n    >\r\n      {/* Solid cube base */}\r\n      <mesh geometry={cubeGeometry}>\r\n        <meshPhongMaterial \r\n          color={isPartOfRotatingFace() ? \"#666666\" : \"#333333\"}\r\n          emissive={isPartOfRotatingFace() ? \"#444444\" : \"#000000\"}\r\n          emissiveIntensity={isPartOfRotatingFace() ? 0.3 : 0}\r\n        />\r\n      </mesh>\r\n      \r\n      {/* Colored faces - only show visible faces */}\r\n      {[0, 1, 2, 3, 4, 5].map((faceIndex) => {\r\n        // Only render faces that should be visible based on original position\r\n        if (!isFaceVisible(faceIndex)) {\r\n          return null;\r\n        }\r\n\r\n        const faceColor = getFaceColor(faceIndex);\r\n        \r\n        // Define face positions and rotations correctly\r\n        let facePosition, faceRotation;\r\n        \r\n        switch (faceIndex) {\r\n          case 0: // Front face (Z+)\r\n            facePosition = [0, 0, size/2 + 0.001];\r\n            faceRotation = [0, 0, 0];\r\n            break;\r\n          case 1: // Back face (Z-)\r\n            facePosition = [0, 0, -size/2 - 0.001];\r\n            faceRotation = [0, Math.PI, 0];\r\n            break;\r\n          case 2: // Right face (X+)\r\n            facePosition = [size/2 + 0.001, 0, 0];\r\n            faceRotation = [0, Math.PI/2, 0];\r\n            break;\r\n          case 3: // Left face (X-)\r\n            facePosition = [-size/2 - 0.001, 0, 0];\r\n            faceRotation = [0, -Math.PI/2, 0];\r\n            break;\r\n          case 4: // Top face (Y+)\r\n            facePosition = [0, size/2 + 0.001, 0];\r\n            faceRotation = [-Math.PI/2, 0, 0];\r\n            break;\r\n          case 5: // Bottom face (Y-)\r\n            facePosition = [0, -size/2 - 0.001, 0];\r\n            faceRotation = [Math.PI/2, 0, 0];\r\n            break;\r\n          default:\r\n            facePosition = [0, 0, 0];\r\n            faceRotation = [0, 0, 0];\r\n        }\r\n        \r\n        // Check if this face should be highlighted (painted pink)\r\n        const faceNames = ['front', 'back', 'right', 'left', 'top', 'bottom'];\r\n        const currentFaceName = faceNames[faceIndex];\r\n        const shouldHighlight = isHighlighted && highlightInfo && \r\n          highlightInfo.blackVisibleFaces && \r\n          highlightInfo.blackVisibleFaces.includes(currentFaceName);\r\n        \r\n        // If this face should be highlighted, paint it bright pink\r\n        const displayColor = shouldHighlight ? '#FF1493' : (colorMap[faceColor] || '#000000');\r\n        \r\n        return (\r\n          <mesh\r\n            key={faceIndex}\r\n            position={facePosition}\r\n            rotation={faceRotation}\r\n            geometry={faceGeometry}\r\n          >\r\n            <meshPhongMaterial \r\n              color={displayColor} \r\n              side={THREE.FrontSide}\r\n              emissive={isPartOfRotatingFace() ? displayColor : \"#000000\"}\r\n              emissiveIntensity={isPartOfRotatingFace() ? 0.5 : 0.1}\r\n            />\r\n          </mesh>\r\n        );\r\n      })}\r\n      \r\n      {/* Debug shape on visible faces only */}\r\n      {[0, 1, 2, 3, 4, 5].map((faceIndex) => {\r\n        // Only render shapes on faces that should be visible based on original position\r\n        if (!isFaceVisible(faceIndex)) {\r\n          return null;\r\n        }\r\n\r\n        // Define face positions and rotations correctly (same as colored faces)\r\n        let facePosition, faceRotation;\r\n        \r\n        switch (faceIndex) {\r\n          case 0: // Front face (Z+)\r\n            facePosition = [0, 0, size/2 + 0.002];\r\n            faceRotation = [0, 0, 0];\r\n            break;\r\n          case 1: // Back face (Z-)\r\n            facePosition = [0, 0, -size/2 - 0.002];\r\n            faceRotation = [0, Math.PI, 0];\r\n            break;\r\n          case 2: // Right face (X+)\r\n            facePosition = [size/2 + 0.002, 0, 0];\r\n            faceRotation = [0, Math.PI/2, 0];\r\n            break;\r\n          case 3: // Left face (X-)\r\n            facePosition = [-size/2 - 0.002, 0, 0];\r\n            faceRotation = [0, -Math.PI/2, 0];\r\n            break;\r\n          case 4: // Top face (Y+)\r\n            facePosition = [0, size/2 + 0.002, 0];\r\n            faceRotation = [-Math.PI/2, 0, 0];\r\n            break;\r\n          case 5: // Bottom face (Y-)\r\n            facePosition = [0, -size/2 - 0.002, 0];\r\n            faceRotation = [Math.PI/2, 0, 0];\r\n            break;\r\n          default:\r\n            facePosition = [0, 0, 0];\r\n            faceRotation = [0, 0, 0];\r\n        }\r\n        \r\n        // Get the face color for this specific face\r\n        const faceColor = getFaceColor(faceIndex);\r\n        \r\n        return (\r\n          <group key={`shape-${faceIndex}`} position={facePosition} rotation={faceRotation}>\r\n            {createShapeWithFaceBorder(pieceId, size * 0.3, faceIndex)}\r\n          </group>\r\n        );\r\n      })}\r\n    </group>\r\n  );\r\n}\r\n\r\n// Function to get the original solved colors for a piece based on its pieceId\r\nfunction getOriginalColors(pieceId) {\r\n  // Map pieceId to original solved position\r\n  const positions = [];\r\n  for (let x = -1; x <= 1; x++) {\r\n    for (let y = -1; y <= 1; y++) {\r\n      for (let z = -1; z <= 1; z++) {\r\n        if (x === 0 && y === 0 && z === 0) continue;\r\n        positions.push([x, y, z]);\r\n      }\r\n    }\r\n  }\r\n  \r\n  const originalPosition = positions[pieceId];\r\n  const [x, y, z] = originalPosition;\r\n  \r\n  // Assign colors based on original solved position\r\n  // All faces should have proper colors, not black\r\n  let colors = {\r\n    front: 'white',   // Default to white for front\r\n    back: 'yellow',   // Default to yellow for back\r\n    right: 'red',     // Default to red for right\r\n    left: 'orange',   // Default to orange for left\r\n    top: 'blue',      // Default to blue for top\r\n    bottom: 'green'   // Default to green for bottom\r\n  };\r\n  \r\n  // Override with correct colors based on position in solved state\r\n  if (x === -1) colors.left = 'orange';\r\n  if (x === 1) colors.right = 'red';\r\n  if (y === -1) colors.bottom = 'green';\r\n  if (y === 1) colors.top = 'blue';\r\n  if (z === -1) colors.back = 'yellow';\r\n  if (z === 1) colors.front = 'white';\r\n  \r\n  return colors;\r\n}\r\n\r\n// Custom hook for cube state management\r\nfunction useCubeState() {\r\n  // Debug: Log when useCubeState hook is called\r\n  logToTerminal('🔄 useCubeState hook called', null, 'WARNING');\r\n  \r\n  // Use useMemo to ensure the initial state is only created once\r\n  const initialCubeState = useMemo(() => {\r\n    console.log('🔄 INITIALIZING CUBE STATE - This should only happen once!');\r\n    logToTerminal('🔄 INITIALIZING CUBE STATE - This should only happen once!', null, 'INFO');\r\n    const state = [];\r\n    \r\n    // Create 26 pieces (3x3x3 minus center)\r\n    for (let x = -1; x <= 1; x++) {\r\n      for (let y = -1; y <= 1; y++) {\r\n        for (let z = -1; z <= 1; z++) {\r\n          // Skip the center piece\r\n          if (x === 0 && y === 0 && z === 0) continue;\r\n          \r\n          // Get pieceId based on position in solved state\r\n          const pieceId = state.length;\r\n          \r\n          // Get original colors for this piece\r\n          const colors = getOriginalColors(pieceId);\r\n          \r\n          // Debug logging for initial state\r\n          console.log(`Initial piece ${pieceId} at [${x}, ${y}, ${z}]:`, colors);\r\n          \r\n          state.push({ \r\n            position: [x, y, z], \r\n            colors,\r\n            rotationHistory: [], // Track all rotations this piece has undergone\r\n            pieceId: pieceId // Store the pieceId for reference\r\n          });\r\n        }\r\n      }\r\n    }\r\n    \r\n    // Log the complete initial cube state as JSON\r\n    console.log('🎯 INITIAL CUBE STATE (End of Initial Load):');\r\n    console.log(JSON.stringify(state, null, 2));\r\n    \r\n    // Also log to terminal (this will show in the terminal where npm start is running)\r\n    logToTerminal('🎯 INITIAL CUBE STATE (End of Initial Load)', state, 'INFO');\r\n    \r\n    return state;\r\n  }, []); // Empty dependency array ensures this only runs once\r\n  \r\n  const [cubeState, setCubeState] = useState(initialCubeState);\r\n\r\n  const [isAnimating, setIsAnimating] = useState(false);\r\n  const [rotatingFace, setRotatingFace] = useState(null);\r\n  const [rotationProgress, setRotationProgress] = useState(0);\r\n  const [moveHistory, setMoveHistory] = useState([]); // Simple move history for solve\r\n\r\n  // Debug cube state changes\r\n  React.useEffect(() => {\r\n    console.log('🔄 CUBE STATE CHANGED:', cubeState.map(p => `${p.pieceId}: [${p.position.join(', ')}] colors: ${JSON.stringify(p.colors)}`));\r\n    \r\n    // Log to terminal: cube state changes\r\n    logToTerminal(`🔄 CUBE STATE CHANGED`, cubeState.map(p => `${p.pieceId}: [${p.position.join(', ')}] colors: ${JSON.stringify(p.colors)}`), 'INFO');\r\n    \r\n    // Check if colors are being reset to original\r\n    const hasOriginalColors = cubeState.every((piece, index) => {\r\n      const originalColors = getOriginalColors(index);\r\n      return JSON.stringify(piece.colors) === JSON.stringify(originalColors);\r\n    });\r\n    \r\n    if (hasOriginalColors && cubeState.length > 0) {\r\n      console.log('⚠️ WARNING: All pieces have original colors - this might indicate a reset!');\r\n      logToTerminal('⚠️ WARNING: All pieces have original colors - this might indicate a reset!', null, 'WARNING');\r\n    }\r\n  }, [cubeState]);\r\n\r\n  // Consolidated rotation logic\r\n  const applyRotation = useCallback((pieces, face, direction) => {\r\n    logToTerminal(`🎯 applyRotation called: ${face} ${direction}`, null, 'INFO');\r\n    logToTerminal(`📊 applyRotation: Input pieces colors:`, pieces.map(p => `${p.pieceId}: ${JSON.stringify(p.colors)}`), 'INFO');\r\n    \r\n    pieces.forEach(piece => {\r\n      const [x, y, z] = piece.position;\r\n      let newX = x, newY = y, newZ = z;\r\n      // Apply 3D transformation\r\n      switch (face) {\r\n        case 'F': // Front face rotation (Z+ plane)\r\n          if (z === 1) { // Only pieces on the front face\r\n            if (direction === 'clockwise') {\r\n              newX = -y;\r\n              newY = x;\r\n            } else {\r\n              newX = y;\r\n              newY = -x;\r\n            }\r\n          }\r\n          break;\r\n        case 'B': // Back face rotation (Z- plane)\r\n          if (z === -1) { // Only pieces on the back face\r\n            if (direction === 'clockwise') {\r\n              newX = y;\r\n              newY = -x;\r\n            } else {\r\n              newX = -y;\r\n              newY = x;\r\n            }\r\n          }\r\n          break;\r\n        case 'R': // Right face rotation (X+ plane)\r\n          if (x === 1) { // Only pieces on the right face\r\n            if (direction === 'clockwise') {\r\n              newY = -z;\r\n              newZ = y;\r\n            } else {\r\n              newY = z;\r\n              newZ = -y;\r\n            }\r\n          }\r\n          break;\r\n        case 'L': // Left face rotation (X- plane)\r\n          if (x === -1) { // Only pieces on the left face\r\n            if (direction === 'clockwise') {\r\n              newY = z;\r\n              newZ = -y;\r\n            } else {\r\n              newY = -z;\r\n              newZ = y;\r\n            }\r\n          }\r\n          break;\r\n        case 'U': // Up face rotation (Y+ plane)\r\n          if (y === 1) { // Only pieces on the up face\r\n            if (direction === 'clockwise') {\r\n              newX = z;\r\n              newZ = -x;\r\n            } else {\r\n              newX = -z;\r\n              newZ = x;\r\n            }\r\n          }\r\n          break;\r\n        case 'D': // Down face rotation (Y- plane)\r\n          if (y === -1) { // Only pieces on the down face\r\n            if (direction === 'clockwise') {\r\n              newX = -z;\r\n              newZ = x;\r\n            } else {\r\n              newX = z;\r\n              newZ = -x;\r\n            }\r\n          }\r\n          break;\r\n      }\r\n      \r\n      // Only apply changes if the piece actually moved\r\n      const positionChanged = (x !== newX || y !== newY || z !== newZ);\r\n      \r\n      if (positionChanged) {\r\n        console.log(`🔄 Piece ${piece.pieceId} moving from [${x}, ${y}, ${z}] to [${newX}, ${newY}, ${newZ}]`);\r\n        \r\n        // Update position only - colors stay the same\r\n        piece.position = [newX, newY, newZ];\r\n        \r\n        // Add to rotation history\r\n        piece.rotationHistory.push({\r\n          move: face,\r\n          direction: direction,\r\n          fromPosition: [x, y, z],\r\n          toPosition: [newX, newY, newZ],\r\n          timestamp: new Date().toISOString()\r\n        });\r\n      }\r\n    });\r\n    \r\n    logToTerminal(`📊 applyRotation: Output pieces colors:`, pieces.map(p => `${p.pieceId}: ${JSON.stringify(p.colors)}`), 'INFO');\r\n    logToTerminal(`✅ applyRotation completed: ${face} ${direction}`, null, 'SUCCESS');\r\n  }, []);\r\n\r\n  // Function to rotate a face with smooth 3D animation\r\n  const rotateFaceWithAnimation = useCallback((face, direction, onComplete) => {\r\n    console.log(`🎯 Rotating face ${face} ${direction} with smooth animation`);\r\n    \r\n    // Log rotation start to terminal\r\n    logToTerminal(`🎯 rotateFaceWithAnimation called: ${face} ${direction}`, null, 'INFO');\r\n    logToTerminal(`🔄 ROTATION STARTED: ${face} ${direction}`, null, 'INFO');\r\n    \r\n    // Record the move for solve (same as manual rotation)\r\n    setMoveHistory(prev => {\r\n      const newHistory = [...prev, { face, direction, timestamp: Date.now() }];\r\n      console.log(`📝 RECORDED MOVE: ${face} ${direction} (Total moves: ${newHistory.length})`);\r\n      return newHistory;\r\n    });\r\n    \r\n    // Set the rotating face for visual feedback\r\n    setRotatingFace({ face, direction });\r\n    setRotationProgress(0);\r\n    \r\n    // Smooth animation using requestAnimationFrame\r\n    const animationDuration = 500; // 500ms for smooth rotation\r\n    const startTime = performance.now();\r\n    \r\n    const animate = (currentTime) => {\r\n      const elapsed = currentTime - startTime;\r\n      const progress = Math.min(elapsed / animationDuration, 1);\r\n      \r\n      // Ease out animation for smoother feel\r\n      const easedProgress = 1 - Math.pow(1 - progress, 3);\r\n      setRotationProgress(easedProgress);\r\n      \r\n      if (progress < 1) {\r\n        requestAnimationFrame(animate);\r\n      } else {\r\n        // Animation complete - apply the actual position changes\r\n        setCubeState(prevState => {\r\n          console.log(`🔄 Applying position changes for ${face} ${direction}`);\r\n          console.log('Previous state colors:', prevState.map(p => `${p.pieceId}: ${JSON.stringify(p.colors)}`));\r\n          \r\n          // Log to terminal: rotation completion and state update\r\n          logToTerminal(`✅ ROTATION COMPLETED: ${face} ${direction}`, null, 'SUCCESS');\r\n          logToTerminal(`📊 BEFORE STATE UPDATE - Colors:`, prevState.map(p => `${p.pieceId}: ${JSON.stringify(p.colors)}`), 'INFO');\r\n          \r\n          const newState = [...prevState];\r\n          const pieces = newState.map((piece, index) => ({ ...piece, pieceId: index }));\r\n          \r\n          // Log positions before rotation\r\n          console.log('📍 Positions before rotation:', pieces.map(p => `${p.pieceId}: [${p.position.join(', ')}]`));\r\n          logToTerminal(`📍 BEFORE ROTATION - Positions:`, pieces.map(p => `${p.pieceId}: [${p.position.join(', ')}]`), 'INFO');\r\n          \r\n          // Apply rotation using consolidated logic\r\n          applyRotation(pieces, face, direction);\r\n\r\n          // Log positions after rotation\r\n          console.log('📍 Positions after rotation:', pieces.map(p => `${p.pieceId}: [${p.position.join(', ')}]`));\r\n          logToTerminal(`📍 AFTER ROTATION - Positions:`, pieces.map(p => `${p.pieceId}: [${p.position.join(', ')}]`), 'INFO');\r\n\r\n          // Update the newState with the modified pieces\r\n          pieces.forEach((piece, index) => {\r\n            newState[index] = {\r\n              position: piece.position,\r\n              colors: piece.colors,\r\n              rotationHistory: piece.rotationHistory\r\n            };\r\n          });\r\n          \r\n          console.log('✅ Position changes applied to cube state');\r\n          console.log('New state colors:', newState.map(p => `${p.pieceId}: ${JSON.stringify(p.colors)}`));\r\n          \r\n          // Log to terminal: final state after update\r\n          logToTerminal(`📊 AFTER STATE UPDATE - Colors:`, newState.map(p => `${p.pieceId}: ${JSON.stringify(p.colors)}`), 'INFO');\r\n          \r\n          return newState;\r\n        });\r\n        \r\n        // Reset animation state\r\n        setRotatingFace(null);\r\n        setRotationProgress(0);\r\n        if (onComplete) onComplete();\r\n      }\r\n    };\r\n    \r\n    requestAnimationFrame(animate);\r\n  }, [applyRotation]);\r\n\r\n  // Function to execute moves with realistic face rotation animations\r\n  const executeMovesWithAnimation = useCallback((moves, onComplete) => {\r\n    let currentMoveIndex = 0;\r\n    \r\n    const executeNextMove = () => {\r\n      if (currentMoveIndex >= moves.length) {\r\n        if (onComplete) onComplete();\r\n        return;\r\n      }\r\n      \r\n      const move = moves[currentMoveIndex];\r\n      console.log(`🔄 Executing move ${currentMoveIndex + 1}/${moves.length}: ${move.face} ${move.direction}`);\r\n      \r\n      // Execute the move with realistic face rotation\r\n      rotateFaceWithAnimation(move.face, move.direction, () => {\r\n        currentMoveIndex++;\r\n        // Small delay between moves for visual clarity\r\n        setTimeout(executeNextMove, 25);\r\n      });\r\n    };\r\n    \r\n    executeNextMove();\r\n  }, [rotateFaceWithAnimation]);\r\n\r\n  // Generate optimal solve sequence using beginner's method\r\n  const generateOptimalSolve = useCallback((currentState) => {\r\n    // This is a simplified version - in reality, you'd use proper algorithms like CFOP\r\n    // For now, we'll use the reverse of all moves, but optimize the sequence\r\n    \r\n    const allMoves = [];\r\n    currentState.forEach(piece => {\r\n      piece.rotationHistory.forEach(move => {\r\n        allMoves.push({\r\n          face: move.move,\r\n          direction: move.direction,\r\n          timestamp: move.timestamp\r\n        });\r\n      });\r\n    });\r\n    \r\n    console.log(`?? DEBUG: Found ${allMoves.length} moves in rotation history`);\r\n    \r\n    // Sort moves by timestamp\r\n    allMoves.sort((a, b) => new Date(a.timestamp) - new Date(b.timestamp));\r\n    \r\n    console.log('?? DEBUG: Original moves:', allMoves.map(m => `${m.face} ${m.direction}`));\r\n    \r\n    // Reverse the moves and optimize\r\n    const reversedMoves = allMoves.reverse().map(move => ({\r\n      face: move.face,\r\n      direction: move.direction === 'clockwise' ? 'counterclockwise' : 'clockwise'\r\n    }));\r\n    \r\n    console.log('?? DEBUG: Reversed moves:', reversedMoves.map(m => `${m.face} ${m.direction}`));\r\n    \r\n    // Optimize the sequence by removing redundant moves\r\n    const optimizedMoves = optimizeMoveSequence(reversedMoves);\r\n    \r\n    console.log(`?? DEBUG: Optimized moves: ${optimizedMoves.length}`, optimizedMoves.map(m => `${m.face} ${m.direction}`));\r\n    \r\n    return optimizedMoves;\r\n  }, []);\r\n\r\n  // Optimize move sequence by removing redundant moves\r\n  const optimizeMoveSequence = useCallback((moves) => {\r\n    // For now, don't optimize too aggressively to ensure we don't break the solve\r\n    // Just return the original moves to ensure the cube gets solved\r\n    return moves;\r\n  }, []);\r\n\r\n  // Rotate a face of the cube with smooth animation\r\n  const rotateFace = useCallback((face, direction) => {\r\n    logToTerminal(`🎯 rotateFace called: ${face} ${direction}`, null, 'INFO');\r\n    \r\n    if (isAnimating) {\r\n      logToTerminal(`⚠️ rotateFace: Already animating, skipping`, null, 'WARNING');\r\n      return;\r\n    }\r\n    \r\n    logToTerminal(`✅ rotateFace: Starting rotation`, null, 'SUCCESS');\r\n    setIsAnimating(true);\r\n    \r\n    // Use the smooth animation function\r\n    rotateFaceWithAnimation(face, direction, () => {\r\n      logToTerminal(`✅ rotateFace: Animation completed`, null, 'SUCCESS');\r\n      setIsAnimating(false);\r\n    });\r\n  }, [isAnimating, rotateFaceWithAnimation]);\r\n\r\n  // Scramble the cube with realistic face rotations\r\n  const scramble = useCallback(() => {\r\n    if (isAnimating) return;\r\n    \r\n    setIsAnimating(true);\r\n    \r\n    // DON'T clear move history - keep all previous moves (manual + scramble)\r\n    console.log(`🎲 SCRAMBLING CUBE - Current move history: ${moveHistory.length} moves`);\r\n    \r\n    const moves = ['F', 'B', 'R', 'L', 'U', 'D'];\r\n    const directions = ['clockwise', 'counterclockwise'];\r\n    const scrambleSequence = [];\r\n    \r\n    // Generate 20 random moves\r\n    for (let i = 0; i < 20; i++) {\r\n      const move = moves[Math.floor(Math.random() * moves.length)];\r\n      const direction = directions[Math.floor(Math.random() * directions.length)];\r\n      scrambleSequence.push({ face: move, direction });\r\n    }\r\n    \r\n    console.log('🎲 SCRAMBLING CUBE with sequence:', scrambleSequence.map(m => `${m.face} ${m.direction}`));\r\n    \r\n    // Execute scramble moves with realistic animations\r\n    executeMovesWithAnimation(scrambleSequence, () => {\r\n      setIsAnimating(false);\r\n      console.log('✅ CUBE SCRAMBLED!');\r\n      \r\n      // Log final state\r\n      setCubeState(currentState => {\r\n        console.log('🎯 CUBE STATE AFTER SCRAMBLE:');\r\n        console.log(JSON.stringify(currentState, null, 2));\r\n        logToTerminal('CUBE STATE AFTER SCRAMBLE', currentState);\r\n        return currentState;\r\n      });\r\n    });\r\n  }, [isAnimating, executeMovesWithAnimation, moveHistory]);\r\n\r\n  // Reset the cube to solved state\r\n  const reset = useCallback(() => {\r\n    // Clear move history when resetting\r\n    setMoveHistory([]);\r\n    \r\n    setCubeState(() => {\r\n      const state = [];\r\n      \r\n      // Create 26 pieces (3x3x3 minus center)\r\n      for (let x = -1; x <= 1; x++) {\r\n        for (let y = -1; y <= 1; y++) {\r\n          for (let z = -1; z <= 1; z++) {\r\n            // Skip the center piece\r\n            if (x === 0 && y === 0 && z === 0) continue;\r\n            \r\n            // Get pieceId based on position in solved state\r\n            const pieceId = state.length;\r\n            \r\n            // Get original colors for this piece\r\n            const colors = getOriginalColors(pieceId);\r\n            \r\n            // Debug logging for initial state\r\n            console.log(`Initial piece ${pieceId} at [${x}, ${y}, ${z}]:`, colors);\r\n            \r\n            state.push({ \r\n              position: [x, y, z], \r\n              colors,\r\n              rotationHistory: [], // Track all rotations this piece has undergone\r\n              pieceId: pieceId // Store the pieceId for reference\r\n            });\r\n          }\r\n        }\r\n      }\r\n      \r\n      // Log the complete initial cube state as JSON\r\n      console.log('🎯 INITIAL CUBE STATE (End of Initial Load):');\r\n      console.log(JSON.stringify(state, null, 2));\r\n      \r\n      // Also log to terminal (this will show in the terminal where npm start is running)\r\n      logToTerminal('INITIAL CUBE STATE (End of Initial Load)', state);\r\n      \r\n      return state;\r\n    });\r\n  }, []);\r\n\r\n  // Simple solve function that reverses all recorded moves\r\n  const solve = useCallback(() => {\r\n    if (isAnimating) return;\r\n    \r\n    setIsAnimating(true);\r\n    \r\n    console.log(`🎯 SOLVING CUBE: Reversing ${moveHistory.length} moves`);\r\n    console.log('📋 Move history:', moveHistory.map(m => `${m.face} ${m.direction}`));\r\n    console.log('📋 Full move history object:', moveHistory);\r\n    \r\n    if (moveHistory.length === 0) {\r\n      console.log('⚠️ No moves to reverse - cube might already be solved or no moves were recorded');\r\n      setIsAnimating(false);\r\n      return;\r\n    }\r\n    \r\n    // Create reverse sequence (last move first, opposite direction)\r\n    const solveSequence = moveHistory\r\n      .slice()\r\n      .reverse()\r\n      .map(move => ({\r\n        face: move.face,\r\n        direction: move.direction === 'clockwise' ? 'counterclockwise' : 'clockwise'\r\n      }));\r\n    \r\n    console.log('🔄 Reversed sequence:', solveSequence.map(m => `${m.face} ${m.direction}`));\r\n    console.log(`🚀 Starting solve with ${solveSequence.length} moves...`);\r\n    \r\n    // Execute moves with realistic face rotations\r\n    executeMovesWithAnimation(solveSequence, () => {\r\n      // Clear move history after solving\r\n      setMoveHistory([]);\r\n      setIsAnimating(false);\r\n      console.log('✅ CUBE SOLVED!');\r\n    });\r\n    \r\n  }, [isAnimating, moveHistory, executeMovesWithAnimation]);\r\n\r\n  return {\r\n    cubeState,\r\n    isAnimating,\r\n    rotatingFace,\r\n    rotationProgress,\r\n    rotateFace,\r\n    scramble,\r\n    reset,\r\n    solve\r\n  };\r\n}\r\n\r\n// Main cube group component with enhanced structure\r\nfunction CubeGroup({ isRotating, autoRotate = false, onScramble, onReset, onSolve, onRotateFace, onCubeStateChange, highlightedPieces = [] }) {\r\n  const groupRef = useRef();\r\n  const [rotationSpeed] = useState({ x: 0.005, y: 0.01 });\r\n  \r\n  // Debug: Log when CubeGroup re-renders\r\n  React.useEffect(() => {\r\n    logToTerminal('🔄 CubeGroup component re-rendered', null, 'WARNING');\r\n  });\r\n  \r\n  const { cubeState, isAnimating, rotatingFace, rotationProgress, rotateFace, scramble, reset, solve } = useCubeState();\r\n  \r\n  // Helper functions for enhanced debugging\r\n  const getShapeType = (pieceId) => {\r\n    const shapeTypes = ['Square', 'Square', 'Square', 'Square', 'Square', 'Circle', 'Circle', 'Circle', 'Circle', 'Circle', 'Triangle', 'Triangle', 'Triangle', 'Triangle', 'Diamond', 'Diamond', 'Diamond', 'Diamond', 'Diamond', 'Diamond', 'Triangle', 'Triangle', 'Triangle', 'Triangle', 'Triangle', 'Triangle'];\r\n    return shapeTypes[pieceId] || 'Unknown';\r\n  };\r\n\r\n  const getShapeColor = (pieceId) => {\r\n    const shapeColors = ['Red', 'Red', 'Red', 'Red', 'Red', 'Blue', 'Blue', 'Blue', 'Blue', 'Blue', 'Green', 'Green', 'Green', 'Green', 'Yellow', 'Yellow', 'Yellow', 'Yellow', 'Yellow', 'Yellow', 'Orange', 'Orange', 'Orange', 'Orange', 'Orange', 'Orange'];\r\n    return shapeColors[pieceId] || 'Unknown';\r\n  };\r\n\r\n  // Auto-rotation effect\r\n  useEffect(() => {\r\n    let animationId;\r\n    \r\n    if (autoRotate && groupRef.current) {\r\n      const animate = () => {\r\n        if (groupRef.current && autoRotate) {\r\n          groupRef.current.rotation.x += rotationSpeed.x;\r\n          groupRef.current.rotation.y += rotationSpeed.y;\r\n          animationId = requestAnimationFrame(animate);\r\n        }\r\n      };\r\n      animate();\r\n    }\r\n    \r\n    // Cleanup function to stop animation when autoRotate becomes false\r\n    return () => {\r\n      if (animationId) {\r\n        cancelAnimationFrame(animationId);\r\n      }\r\n    };\r\n  }, [autoRotate, rotationSpeed]);\r\n\r\n  // Handle cube state changes\r\n  useEffect(() => {\r\n    if (onCubeStateChange) {\r\n      onCubeStateChange(cubeState);\r\n    }\r\n  }, [cubeState, onCubeStateChange]);\r\n\r\n  // Handle scramble\r\n  useEffect(() => {\r\n    if (onScramble) {\r\n      onScramble(scramble);\r\n    }\r\n  }, [scramble, onScramble]);\r\n\r\n  // Handle reset\r\n  useEffect(() => {\r\n    if (onReset) {\r\n      onReset(reset);\r\n    }\r\n  }, [reset, onReset]);\r\n\r\n  // Handle solve\r\n  useEffect(() => {\r\n    if (onSolve) {\r\n      onSolve(solve);\r\n    }\r\n  }, [solve, onSolve]);\r\n\r\n  // Handle rotate face\r\n  useEffect(() => {\r\n    if (onRotateFace) {\r\n      onRotateFace(rotateFace);\r\n    }\r\n  }, [rotateFace, onRotateFace]);\r\n\r\n  return (\r\n    <group ref={groupRef}>\r\n      {cubeState.map((piece, index) => {\r\n        const isHighlighted = highlightedPieces.some(hp => hp.pieceId === index);\r\n        const highlightInfo = highlightedPieces.find(hp => hp.pieceId === index);\r\n        \r\n        return (\r\n          <CubePiece\r\n            key={index}\r\n            position={piece.position}\r\n            colors={piece.colors}\r\n            pieceId={index}\r\n            isHighlighted={isHighlighted}\r\n            highlightInfo={highlightInfo}\r\n            rotatingFace={rotatingFace}\r\n            rotationProgress={rotationProgress}\r\n          />\r\n        );\r\n      })}\r\n    </group>\r\n  );\r\n}\r\n\r\n// Main Rubik's Cube component\r\nfunction RubiksCube({ isRotating, autoRotate = false, onScramble, onReset, onSolve, onRotateFace, onCubeStateChange, highlightedPieces = [] }) {\r\n  return (\r\n    <Canvas\r\n      camera={{ position: [5, 5, 5], fov: 50 }}\r\n      style={{ background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)' }}\r\n    >\r\n      <ambientLight intensity={0.6} />\r\n      <directionalLight position={[10, 10, 5]} intensity={1} />\r\n      <pointLight position={[-10, -10, -5]} intensity={0.5} />\r\n      \r\n      <CubeGroup\r\n        isRotating={isRotating}\r\n        autoRotate={autoRotate}\r\n        onScramble={onScramble}\r\n        onReset={onReset}\r\n        onSolve={onSolve}\r\n        onRotateFace={onRotateFace}\r\n        onCubeStateChange={onCubeStateChange}\r\n        highlightedPieces={highlightedPieces}\r\n      />\r\n    </Canvas>\r\n  );\r\n}\r\n\r\nexport default RubiksCube;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}