{"ast":null,"code":"var _jsxFileName = \"C:\\\\Repo\\\\GitHub\\\\rubiks-cube\\\\src\\\\components\\\\IdentifyIncorrectShapes.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport styled from 'styled-components';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst IdentifyContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 20px;\n  padding: 20px;\n  background: rgba(255, 255, 255, 0.1);\n  border-radius: 15px;\n  backdrop-filter: blur(10px);\n  border: 1px solid rgba(255, 255, 255, 0.2);\n  box-shadow: 0 4px 16px rgba(0, 0, 0, 0.2);\n  max-height: 500px;\n  overflow-y: auto;\n`;\n_c = IdentifyContainer;\nconst SectionTitle = styled.h3`\n  color: white;\n  text-align: center;\n  margin: 0 0 15px 0;\n  font-size: 1.3rem;\n  font-weight: 600;\n  text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.3);\n`;\n_c2 = SectionTitle;\nconst ButtonGrid = styled.div`\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));\n  gap: 15px;\n  margin-bottom: 20px;\n`;\n_c3 = ButtonGrid;\nconst IdentifyButton = styled.button`\n  padding: 12px 16px;\n  border: 2px solid ${props => {\n  if (props.$isActive) return '#4CAF50';\n  if (props.$hasIncorrect) return '#ff4757';\n  return 'rgba(255, 255, 255, 0.3)';\n}};\n  border-radius: 10px;\n  font-size: 14px;\n  font-weight: 600;\n  cursor: ${props => props.disabled ? 'not-allowed' : 'pointer'};\n  transition: all 0.3s ease;\n  background: ${props => {\n  if (props.disabled) return 'rgba(100, 100, 100, 0.3)';\n  if (props.$isActive) return 'rgba(76, 175, 80, 0.2)';\n  if (props.$hasIncorrect) return 'rgba(255, 71, 87, 0.2)';\n  return 'rgba(255, 255, 255, 0.1)';\n}};\n  color: ${props => {\n  if (props.disabled) return '#666';\n  if (props.$isActive) return '#4CAF50';\n  if (props.$hasIncorrect) return '#ff4757';\n  return 'white';\n}};\n  opacity: ${props => props.disabled ? 0.5 : 1};\n  \n  &:hover {\n    transform: ${props => props.disabled ? 'none' : 'translateY(-2px)'};\n    box-shadow: ${props => props.disabled ? 'none' : '0 4px 12px rgba(0, 0, 0, 0.3)'};\n    background: ${props => {\n  if (props.disabled) return 'rgba(100, 100, 100, 0.3)';\n  if (props.$isActive) return 'rgba(76, 175, 80, 0.3)';\n  if (props.$hasIncorrect) return 'rgba(255, 71, 87, 0.3)';\n  return 'rgba(255, 255, 255, 0.2)';\n}};\n  }\n  \n  &:active {\n    transform: ${props => props.disabled ? 'none' : 'translateY(0)'};\n  }\n`;\n_c4 = IdentifyButton;\nconst ButtonContent = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  gap: 4px;\n`;\n_c5 = ButtonContent;\nconst ButtonTitle = styled.span`\n  font-size: 14px;\n  font-weight: 700;\n`;\n_c6 = ButtonTitle;\nconst ButtonSubtitle = styled.span`\n  font-size: 11px;\n  opacity: 0.8;\n`;\n_c7 = ButtonSubtitle;\nconst CountBadge = styled.span`\n  background: ${props => props.$hasIncorrect ? '#ff4757' : '#4CAF50'};\n  color: white;\n  border-radius: 50%;\n  width: 20px;\n  height: 20px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-size: 10px;\n  font-weight: bold;\n  margin-top: 4px;\n`;\n_c8 = CountBadge;\nconst Instructions = styled.p`\n  color: rgba(255, 255, 255, 0.8);\n  font-size: 13px;\n  text-align: center;\n  margin: 0 0 15px 0;\n  line-height: 1.4;\n`;\n_c9 = Instructions;\nconst StatusMessage = styled.div`\n  padding: 10px;\n  border-radius: 8px;\n  text-align: center;\n  font-size: 12px;\n  font-weight: 600;\n  background: ${props => {\n  if (props.$type === 'success') return 'rgba(76, 175, 80, 0.2)';\n  if (props.$type === 'warning') return 'rgba(255, 193, 7, 0.2)';\n  if (props.$type === 'error') return 'rgba(244, 67, 54, 0.2)';\n  return 'rgba(33, 150, 243, 0.2)';\n}};\n  color: ${props => {\n  if (props.$type === 'success') return '#4CAF50';\n  if (props.$type === 'warning') return '#FFC107';\n  if (props.$type === 'error') return '#f44336';\n  return '#2196F3';\n}};\n  border: 1px solid ${props => {\n  if (props.$type === 'success') return 'rgba(76, 175, 80, 0.3)';\n  if (props.$type === 'warning') return 'rgba(255, 193, 7, 0.3)';\n  if (props.$type === 'error') return 'rgba(244, 67, 54, 0.3)';\n  return 'rgba(33, 150, 243, 0.3)';\n}};\n`;\n\n// Custom logging function\n_c0 = StatusMessage;\nconst logToTerminal = (message, data = null) => {\n  console.log(`\\n🎯 ${message}`);\n  if (data) {\n    console.log(JSON.stringify(data, null, 2));\n  }\n  console.log('='.repeat(80) + '\\n');\n\n  // Send to log server\n  fetch('http://localhost:3001/log', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      message: message,\n      data: data\n    })\n  }).then(response => {\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    console.log('✅ Log sent to terminal successfully');\n  }).catch(error => {\n    console.error('❌ Could not send log to terminal server:', error);\n  });\n};\nfunction IdentifyIncorrectShapes({\n  isScrambling,\n  cubeState,\n  onIdentification\n}) {\n  _s();\n  const [activeIdentification, setActiveIdentification] = useState(null);\n  const [identificationResults, setIdentificationResults] = useState({});\n\n  // Helper functions\n  const getShapeType = pieceId => {\n    const shapeTypes = ['Square', 'Square', 'Square', 'Square', 'Square', 'Circle', 'Circle', 'Circle', 'Circle', 'Circle', 'Triangle', 'Triangle', 'Triangle', 'Triangle', 'Diamond', 'Diamond', 'Diamond', 'Diamond', 'Diamond', 'Diamond', 'Triangle', 'Triangle', 'Triangle', 'Triangle', 'Triangle', 'Triangle'];\n    return shapeTypes[pieceId] || 'Unknown';\n  };\n  const getShapeColor = pieceId => {\n    const shapeColors = ['Red', 'Blue', 'Green', 'Orange', 'Purple', 'Red', 'Blue', 'Green', 'Orange', 'Yellow', 'Cyan', 'Magenta', 'Lime', 'Pink', 'Purple', 'Red', 'Blue', 'Green', 'Orange', 'Purple', 'Cyan', 'Magenta', 'Lime', 'Pink', 'Purple', 'Yellow'];\n    return shapeColors[pieceId] || 'Unknown';\n  };\n  const getExpectedPosition = pieceId => {\n    const positions = [];\n    for (let x = -1; x <= 1; x++) {\n      for (let y = -1; y <= 1; y++) {\n        for (let z = -1; z <= 1; z++) {\n          if (x === 0 && y === 0 && z === 0) continue;\n          positions.push([x, y, z]);\n        }\n      }\n    }\n    return positions[pieceId];\n  };\n  const isPieceInCorrectPosition = (piece, pieceId) => {\n    if (!piece || !piece.position) return false;\n    const expectedPosition = getExpectedPosition(pieceId);\n    return JSON.stringify(piece.position) === JSON.stringify(expectedPosition);\n  };\n  const getExpectedBorderColor = faceIndex => {\n    const borderColors = ['#FFFFFF',\n    // Face 0 (front) - White\n    '#FF8C00',\n    // Face 1 (back) - Orange  \n    '#00FF00',\n    // Face 2 (right) - Green\n    '#DC143C',\n    // Face 3 (left) - Red\n    '#0000FF',\n    // Face 4 (top) - Blue\n    '#FFD700' // Face 5 (bottom) - Yellow\n    ];\n    return borderColors[faceIndex] || '#000000';\n  };\n  const getBorderColorName = faceIndex => {\n    const colorNames = ['White', 'Orange', 'Green', 'Red', 'Blue', 'Yellow'];\n    return colorNames[faceIndex] || 'Unknown';\n  };\n\n  // Get pieces data\n  const getPieces = () => {\n    if (Array.isArray(cubeState)) {\n      return cubeState.map((piece, index) => ({\n        pieceId: index,\n        position: piece.position,\n        colors: piece.colors,\n        rotationHistory: piece.rotationHistory || []\n      }));\n    } else if (cubeState !== null && cubeState !== void 0 && cubeState.pieces) {\n      return cubeState.pieces;\n    }\n    return [];\n  };\n  const pieces = getPieces();\n\n  // Identify incorrect shapes by type\n  const identifyIncorrectShapesByType = shapeType => {\n    const incorrectPieces = pieces.filter(piece => {\n      const pieceId = piece.pieceId;\n      const actualShapeType = getShapeType(pieceId);\n      return actualShapeType === shapeType && !isPieceInCorrectPosition(piece, pieceId);\n    });\n    const result = {\n      type: 'shape',\n      shapeType,\n      incorrectPieces: incorrectPieces.map(piece => ({\n        pieceId: piece.pieceId,\n        shapeType: getShapeType(piece.pieceId),\n        shapeColor: getShapeColor(piece.pieceId),\n        currentPosition: piece.position,\n        expectedPosition: getExpectedPosition(piece.pieceId),\n        colors: piece.colors,\n        rotationHistory: piece.rotationHistory\n      })),\n      count: incorrectPieces.length\n    };\n    setIdentificationResults(prev => ({\n      ...prev,\n      [`shape-${shapeType}`]: result\n    }));\n    logToTerminal(`🔍 IDENTIFIED INCORRECT ${shapeType.toUpperCase()} SHAPES`, result);\n    if (onIdentification) {\n      onIdentification(result);\n    }\n    return result;\n  };\n\n  // Identify incorrect shapes by color\n  const identifyIncorrectShapesByColor = shapeColor => {\n    const incorrectPieces = pieces.filter(piece => {\n      const pieceId = piece.pieceId;\n      const actualShapeColor = getShapeColor(pieceId);\n      return actualShapeColor === shapeColor && !isPieceInCorrectPosition(piece, pieceId);\n    });\n    const result = {\n      type: 'color',\n      shapeColor,\n      incorrectPieces: incorrectPieces.map(piece => ({\n        pieceId: piece.pieceId,\n        shapeType: getShapeType(piece.pieceId),\n        shapeColor: getShapeColor(piece.pieceId),\n        currentPosition: piece.position,\n        expectedPosition: getExpectedPosition(piece.pieceId),\n        colors: piece.colors,\n        rotationHistory: piece.rotationHistory\n      })),\n      count: incorrectPieces.length\n    };\n    setIdentificationResults(prev => ({\n      ...prev,\n      [`color-${shapeColor}`]: result\n    }));\n    logToTerminal(`🎨 IDENTIFIED INCORRECT ${shapeColor.toUpperCase()} SHAPES`, result);\n    if (onIdentification) {\n      onIdentification(result);\n    }\n    return result;\n  };\n\n  // Identify incorrect border colors\n  const identifyIncorrectBorderColors = faceIndex => {\n    const borderColorName = getBorderColorName(faceIndex);\n    const borderColorHex = getExpectedBorderColor(faceIndex);\n    const incorrectPieces = pieces.filter(piece => {\n      const pieceId = piece.pieceId;\n      const isInCorrectPosition = isPieceInCorrectPosition(piece, pieceId);\n\n      // Check if this piece should have this border color in its current position\n      const [x, y, z] = piece.position;\n      let shouldHaveBorderColor = false;\n      switch (faceIndex) {\n        case 0:\n          // Front face (Z+) - White\n          shouldHaveBorderColor = z === 1;\n          break;\n        case 1:\n          // Back face (Z-) - Orange\n          shouldHaveBorderColor = z === -1;\n          break;\n        case 2:\n          // Right face (X+) - Green\n          shouldHaveBorderColor = x === 1;\n          break;\n        case 3:\n          // Left face (X-) - Red\n          shouldHaveBorderColor = x === -1;\n          break;\n        case 4:\n          // Top face (Y+) - Blue\n          shouldHaveBorderColor = y === 1;\n          break;\n        case 5:\n          // Bottom face (Y-) - Yellow\n          shouldHaveBorderColor = y === -1;\n          break;\n      }\n\n      // Piece is incorrect if it should have this border color but is not in correct position\n      return shouldHaveBorderColor && !isInCorrectPosition;\n    });\n    const result = {\n      type: 'border',\n      faceIndex,\n      borderColorName,\n      borderColorHex,\n      incorrectPieces: incorrectPieces.map(piece => ({\n        pieceId: piece.pieceId,\n        shapeType: getShapeType(piece.pieceId),\n        shapeColor: getShapeColor(piece.pieceId),\n        currentPosition: piece.position,\n        expectedPosition: getExpectedPosition(piece.pieceId),\n        colors: piece.colors,\n        rotationHistory: piece.rotationHistory\n      })),\n      count: incorrectPieces.length\n    };\n    setIdentificationResults(prev => ({\n      ...prev,\n      [`border-${faceIndex}`]: result\n    }));\n    logToTerminal(`🎭 IDENTIFIED INCORRECT ${borderColorName.toUpperCase()} BORDER COLORS`, result);\n    if (onIdentification) {\n      onIdentification(result);\n    }\n    return result;\n  };\n  const handleButtonClick = (type, identifier) => {\n    if (isScrambling) return;\n    setActiveIdentification(`${type}-${identifier}`);\n    let result;\n    switch (type) {\n      case 'shape':\n        result = identifyIncorrectShapesByType(identifier);\n        break;\n      case 'color':\n        result = identifyIncorrectShapesByColor(identifier);\n        break;\n      case 'border':\n        result = identifyIncorrectBorderColors(identifier);\n        break;\n    }\n\n    // Reset active state after a short delay\n    setTimeout(() => {\n      setActiveIdentification(null);\n    }, 2000);\n  };\n  const getButtonState = (type, identifier) => {\n    const key = `${type}-${identifier}`;\n    const result = identificationResults[key];\n    const isActive = activeIdentification === key;\n    return {\n      isActive,\n      hasIncorrect: result && result.count > 0,\n      count: result ? result.count : 0\n    };\n  };\n  if (!cubeState || pieces.length === 0) {\n    return /*#__PURE__*/_jsxDEV(IdentifyContainer, {\n      children: [/*#__PURE__*/_jsxDEV(SectionTitle, {\n        children: \"Identify Incorrect Shapes\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 433,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(StatusMessage, {\n        $type: \"warning\",\n        children: \"Loading cube state... Please scramble the cube first to identify incorrect shapes.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 434,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 432,\n      columnNumber: 7\n    }, this);\n  }\n\n  // Get unique shape types and colors\n  const shapeTypes = [...new Set(pieces.map(piece => getShapeType(piece.pieceId)))];\n  const shapeColors = [...new Set(pieces.map(piece => getShapeColor(piece.pieceId)))];\n  return /*#__PURE__*/_jsxDEV(IdentifyContainer, {\n    children: [/*#__PURE__*/_jsxDEV(SectionTitle, {\n      children: \"Identify Incorrect Shapes\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 447,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Instructions, {\n      children: \"Click any button below to identify pieces with incorrect shapes, colors, or border colors. Buttons show the count of incorrect pieces found for each attribute.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 448,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        style: {\n          color: 'white',\n          marginBottom: '10px',\n          fontSize: '16px'\n        },\n        children: \"By Shape Type\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 455,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ButtonGrid, {\n        children: shapeTypes.map(shapeType => {\n          const state = getButtonState('shape', shapeType);\n          return /*#__PURE__*/_jsxDEV(IdentifyButton, {\n            onClick: () => handleButtonClick('shape', shapeType),\n            disabled: isScrambling,\n            $isActive: state.isActive,\n            $hasIncorrect: state.hasIncorrect,\n            children: /*#__PURE__*/_jsxDEV(ButtonContent, {\n              children: [/*#__PURE__*/_jsxDEV(ButtonTitle, {\n                children: [shapeType, \" Shapes\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 468,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(ButtonSubtitle, {\n                children: [\"Identify incorrect \", shapeType.toLowerCase(), \"s\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 469,\n                columnNumber: 19\n              }, this), state.count > 0 && /*#__PURE__*/_jsxDEV(CountBadge, {\n                $hasIncorrect: state.hasIncorrect,\n                children: state.count\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 470,\n                columnNumber: 39\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 467,\n              columnNumber: 17\n            }, this)\n          }, `shape-${shapeType}`, false, {\n            fileName: _jsxFileName,\n            lineNumber: 460,\n            columnNumber: 15\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 456,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 454,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        style: {\n          color: 'white',\n          marginBottom: '10px',\n          fontSize: '16px'\n        },\n        children: \"By Shape Color\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 480,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ButtonGrid, {\n        children: shapeColors.map(shapeColor => {\n          const state = getButtonState('color', shapeColor);\n          return /*#__PURE__*/_jsxDEV(IdentifyButton, {\n            onClick: () => handleButtonClick('color', shapeColor),\n            disabled: isScrambling,\n            $isActive: state.isActive,\n            $hasIncorrect: state.hasIncorrect,\n            children: /*#__PURE__*/_jsxDEV(ButtonContent, {\n              children: [/*#__PURE__*/_jsxDEV(ButtonTitle, {\n                children: [shapeColor, \" Shapes\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 493,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(ButtonSubtitle, {\n                children: [\"Identify incorrect \", shapeColor.toLowerCase(), \" shapes\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 494,\n                columnNumber: 19\n              }, this), state.count > 0 && /*#__PURE__*/_jsxDEV(CountBadge, {\n                $hasIncorrect: state.hasIncorrect,\n                children: state.count\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 495,\n                columnNumber: 39\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 492,\n              columnNumber: 17\n            }, this)\n          }, `color-${shapeColor}`, false, {\n            fileName: _jsxFileName,\n            lineNumber: 485,\n            columnNumber: 15\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 481,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 479,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        style: {\n          color: 'white',\n          marginBottom: '10px',\n          fontSize: '16px'\n        },\n        children: \"By Border Color\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 505,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ButtonGrid, {\n        children: [0, 1, 2, 3, 4, 5].map(faceIndex => {\n          const state = getButtonState('border', faceIndex);\n          const borderColorName = getBorderColorName(faceIndex);\n          const borderColorHex = getExpectedBorderColor(faceIndex);\n          return /*#__PURE__*/_jsxDEV(IdentifyButton, {\n            onClick: () => handleButtonClick('border', faceIndex),\n            disabled: isScrambling,\n            $isActive: state.isActive,\n            $hasIncorrect: state.hasIncorrect,\n            style: {\n              borderColor: state.hasIncorrect ? '#ff4757' : borderColorHex,\n              borderWidth: '3px'\n            },\n            children: /*#__PURE__*/_jsxDEV(ButtonContent, {\n              children: [/*#__PURE__*/_jsxDEV(ButtonTitle, {\n                style: {\n                  color: borderColorHex,\n                  fontWeight: 'bold'\n                },\n                children: [borderColorName, \" Borders\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 525,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(ButtonSubtitle, {\n                children: [\"Identify incorrect \", borderColorName.toLowerCase(), \" border colors\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 528,\n                columnNumber: 19\n              }, this), state.count > 0 && /*#__PURE__*/_jsxDEV(CountBadge, {\n                $hasIncorrect: state.hasIncorrect,\n                children: state.count\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 532,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 524,\n              columnNumber: 17\n            }, this)\n          }, `border-${faceIndex}`, false, {\n            fileName: _jsxFileName,\n            lineNumber: 513,\n            columnNumber: 15\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 506,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 504,\n      columnNumber: 7\n    }, this), activeIdentification && /*#__PURE__*/_jsxDEV(StatusMessage, {\n      $type: \"success\",\n      children: \"Identification complete! Check the terminal for detailed results.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 545,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 446,\n    columnNumber: 5\n  }, this);\n}\n_s(IdentifyIncorrectShapes, \"ii/H1hjjocRwhM9agB/LU82OhuE=\");\n_c1 = IdentifyIncorrectShapes;\nexport default IdentifyIncorrectShapes;\nvar _c, _c2, _c3, _c4, _c5, _c6, _c7, _c8, _c9, _c0, _c1;\n$RefreshReg$(_c, \"IdentifyContainer\");\n$RefreshReg$(_c2, \"SectionTitle\");\n$RefreshReg$(_c3, \"ButtonGrid\");\n$RefreshReg$(_c4, \"IdentifyButton\");\n$RefreshReg$(_c5, \"ButtonContent\");\n$RefreshReg$(_c6, \"ButtonTitle\");\n$RefreshReg$(_c7, \"ButtonSubtitle\");\n$RefreshReg$(_c8, \"CountBadge\");\n$RefreshReg$(_c9, \"Instructions\");\n$RefreshReg$(_c0, \"StatusMessage\");\n$RefreshReg$(_c1, \"IdentifyIncorrectShapes\");","map":{"version":3,"names":["React","useState","styled","jsxDEV","_jsxDEV","IdentifyContainer","div","_c","SectionTitle","h3","_c2","ButtonGrid","_c3","IdentifyButton","button","props","$isActive","$hasIncorrect","disabled","_c4","ButtonContent","_c5","ButtonTitle","span","_c6","ButtonSubtitle","_c7","CountBadge","_c8","Instructions","p","_c9","StatusMessage","$type","_c0","logToTerminal","message","data","console","log","JSON","stringify","repeat","fetch","method","headers","body","then","response","ok","Error","status","catch","error","IdentifyIncorrectShapes","isScrambling","cubeState","onIdentification","_s","activeIdentification","setActiveIdentification","identificationResults","setIdentificationResults","getShapeType","pieceId","shapeTypes","getShapeColor","shapeColors","getExpectedPosition","positions","x","y","z","push","isPieceInCorrectPosition","piece","position","expectedPosition","getExpectedBorderColor","faceIndex","borderColors","getBorderColorName","colorNames","getPieces","Array","isArray","map","index","colors","rotationHistory","pieces","identifyIncorrectShapesByType","shapeType","incorrectPieces","filter","actualShapeType","result","type","shapeColor","currentPosition","count","length","prev","toUpperCase","identifyIncorrectShapesByColor","actualShapeColor","identifyIncorrectBorderColors","borderColorName","borderColorHex","isInCorrectPosition","shouldHaveBorderColor","handleButtonClick","identifier","setTimeout","getButtonState","key","isActive","hasIncorrect","children","fileName","_jsxFileName","lineNumber","columnNumber","Set","style","color","marginBottom","fontSize","state","onClick","toLowerCase","borderColor","borderWidth","fontWeight","_c1","$RefreshReg$"],"sources":["C:/Repo/GitHub/rubiks-cube/src/components/IdentifyIncorrectShapes.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst IdentifyContainer = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 20px;\r\n  padding: 20px;\r\n  background: rgba(255, 255, 255, 0.1);\r\n  border-radius: 15px;\r\n  backdrop-filter: blur(10px);\r\n  border: 1px solid rgba(255, 255, 255, 0.2);\r\n  box-shadow: 0 4px 16px rgba(0, 0, 0, 0.2);\r\n  max-height: 500px;\r\n  overflow-y: auto;\r\n`;\r\n\r\nconst SectionTitle = styled.h3`\r\n  color: white;\r\n  text-align: center;\r\n  margin: 0 0 15px 0;\r\n  font-size: 1.3rem;\r\n  font-weight: 600;\r\n  text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.3);\r\n`;\r\n\r\nconst ButtonGrid = styled.div`\r\n  display: grid;\r\n  grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));\r\n  gap: 15px;\r\n  margin-bottom: 20px;\r\n`;\r\n\r\nconst IdentifyButton = styled.button`\r\n  padding: 12px 16px;\r\n  border: 2px solid ${props => {\r\n    if (props.$isActive) return '#4CAF50';\r\n    if (props.$hasIncorrect) return '#ff4757';\r\n    return 'rgba(255, 255, 255, 0.3)';\r\n  }};\r\n  border-radius: 10px;\r\n  font-size: 14px;\r\n  font-weight: 600;\r\n  cursor: ${props => props.disabled ? 'not-allowed' : 'pointer'};\r\n  transition: all 0.3s ease;\r\n  background: ${props => {\r\n    if (props.disabled) return 'rgba(100, 100, 100, 0.3)';\r\n    if (props.$isActive) return 'rgba(76, 175, 80, 0.2)';\r\n    if (props.$hasIncorrect) return 'rgba(255, 71, 87, 0.2)';\r\n    return 'rgba(255, 255, 255, 0.1)';\r\n  }};\r\n  color: ${props => {\r\n    if (props.disabled) return '#666';\r\n    if (props.$isActive) return '#4CAF50';\r\n    if (props.$hasIncorrect) return '#ff4757';\r\n    return 'white';\r\n  }};\r\n  opacity: ${props => props.disabled ? 0.5 : 1};\r\n  \r\n  &:hover {\r\n    transform: ${props => props.disabled ? 'none' : 'translateY(-2px)'};\r\n    box-shadow: ${props => props.disabled ? 'none' : '0 4px 12px rgba(0, 0, 0, 0.3)'};\r\n    background: ${props => {\r\n      if (props.disabled) return 'rgba(100, 100, 100, 0.3)';\r\n      if (props.$isActive) return 'rgba(76, 175, 80, 0.3)';\r\n      if (props.$hasIncorrect) return 'rgba(255, 71, 87, 0.3)';\r\n      return 'rgba(255, 255, 255, 0.2)';\r\n    }};\r\n  }\r\n  \r\n  &:active {\r\n    transform: ${props => props.disabled ? 'none' : 'translateY(0)'};\r\n  }\r\n`;\r\n\r\nconst ButtonContent = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  gap: 4px;\r\n`;\r\n\r\nconst ButtonTitle = styled.span`\r\n  font-size: 14px;\r\n  font-weight: 700;\r\n`;\r\n\r\nconst ButtonSubtitle = styled.span`\r\n  font-size: 11px;\r\n  opacity: 0.8;\r\n`;\r\n\r\nconst CountBadge = styled.span`\r\n  background: ${props => props.$hasIncorrect ? '#ff4757' : '#4CAF50'};\r\n  color: white;\r\n  border-radius: 50%;\r\n  width: 20px;\r\n  height: 20px;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  font-size: 10px;\r\n  font-weight: bold;\r\n  margin-top: 4px;\r\n`;\r\n\r\nconst Instructions = styled.p`\r\n  color: rgba(255, 255, 255, 0.8);\r\n  font-size: 13px;\r\n  text-align: center;\r\n  margin: 0 0 15px 0;\r\n  line-height: 1.4;\r\n`;\r\n\r\nconst StatusMessage = styled.div`\r\n  padding: 10px;\r\n  border-radius: 8px;\r\n  text-align: center;\r\n  font-size: 12px;\r\n  font-weight: 600;\r\n  background: ${props => {\r\n    if (props.$type === 'success') return 'rgba(76, 175, 80, 0.2)';\r\n    if (props.$type === 'warning') return 'rgba(255, 193, 7, 0.2)';\r\n    if (props.$type === 'error') return 'rgba(244, 67, 54, 0.2)';\r\n    return 'rgba(33, 150, 243, 0.2)';\r\n  }};\r\n  color: ${props => {\r\n    if (props.$type === 'success') return '#4CAF50';\r\n    if (props.$type === 'warning') return '#FFC107';\r\n    if (props.$type === 'error') return '#f44336';\r\n    return '#2196F3';\r\n  }};\r\n  border: 1px solid ${props => {\r\n    if (props.$type === 'success') return 'rgba(76, 175, 80, 0.3)';\r\n    if (props.$type === 'warning') return 'rgba(255, 193, 7, 0.3)';\r\n    if (props.$type === 'error') return 'rgba(244, 67, 54, 0.3)';\r\n    return 'rgba(33, 150, 243, 0.3)';\r\n  }};\r\n`;\r\n\r\n// Custom logging function\r\nconst logToTerminal = (message, data = null) => {\r\n  console.log(`\\n🎯 ${message}`);\r\n  if (data) {\r\n    console.log(JSON.stringify(data, null, 2));\r\n  }\r\n  console.log('='.repeat(80) + '\\n');\r\n  \r\n  // Send to log server\r\n  fetch('http://localhost:3001/log', {\r\n    method: 'POST',\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n    },\r\n    body: JSON.stringify({\r\n      message: message,\r\n      data: data\r\n    })\r\n  })\r\n  .then(response => {\r\n    if (!response.ok) {\r\n      throw new Error(`HTTP error! status: ${response.status}`);\r\n    }\r\n    console.log('✅ Log sent to terminal successfully');\r\n  })\r\n  .catch(error => {\r\n    console.error('❌ Could not send log to terminal server:', error);\r\n  });\r\n};\r\n\r\nfunction IdentifyIncorrectShapes({ isScrambling, cubeState, onIdentification }) {\r\n  const [activeIdentification, setActiveIdentification] = useState(null);\r\n  const [identificationResults, setIdentificationResults] = useState({});\r\n\r\n  // Helper functions\r\n  const getShapeType = (pieceId) => {\r\n    const shapeTypes = [\r\n      'Square', 'Square', 'Square', 'Square', 'Square',\r\n      'Circle', 'Circle', 'Circle', 'Circle', 'Circle',\r\n      'Triangle', 'Triangle', 'Triangle', 'Triangle', 'Diamond',\r\n      'Diamond', 'Diamond', 'Diamond', 'Diamond', 'Diamond',\r\n      'Triangle', 'Triangle', 'Triangle', 'Triangle', 'Triangle', 'Triangle'\r\n    ];\r\n    return shapeTypes[pieceId] || 'Unknown';\r\n  };\r\n\r\n  const getShapeColor = (pieceId) => {\r\n    const shapeColors = [\r\n      'Red', 'Blue', 'Green', 'Orange', 'Purple',\r\n      'Red', 'Blue', 'Green', 'Orange', 'Yellow',\r\n      'Cyan', 'Magenta', 'Lime', 'Pink', 'Purple',\r\n      'Red', 'Blue', 'Green', 'Orange', 'Purple',\r\n      'Cyan', 'Magenta', 'Lime', 'Pink', 'Purple', 'Yellow'\r\n    ];\r\n    return shapeColors[pieceId] || 'Unknown';\r\n  };\r\n\r\n  const getExpectedPosition = (pieceId) => {\r\n    const positions = [];\r\n    for (let x = -1; x <= 1; x++) {\r\n      for (let y = -1; y <= 1; y++) {\r\n        for (let z = -1; z <= 1; z++) {\r\n          if (x === 0 && y === 0 && z === 0) continue;\r\n          positions.push([x, y, z]);\r\n        }\r\n      }\r\n    }\r\n    return positions[pieceId];\r\n  };\r\n\r\n  const isPieceInCorrectPosition = (piece, pieceId) => {\r\n    if (!piece || !piece.position) return false;\r\n    const expectedPosition = getExpectedPosition(pieceId);\r\n    return JSON.stringify(piece.position) === JSON.stringify(expectedPosition);\r\n  };\r\n\r\n  const getExpectedBorderColor = (faceIndex) => {\r\n    const borderColors = [\r\n      '#FFFFFF', // Face 0 (front) - White\r\n      '#FF8C00', // Face 1 (back) - Orange  \r\n      '#00FF00', // Face 2 (right) - Green\r\n      '#DC143C', // Face 3 (left) - Red\r\n      '#0000FF', // Face 4 (top) - Blue\r\n      '#FFD700'  // Face 5 (bottom) - Yellow\r\n    ];\r\n    return borderColors[faceIndex] || '#000000';\r\n  };\r\n\r\n  const getBorderColorName = (faceIndex) => {\r\n    const colorNames = ['White', 'Orange', 'Green', 'Red', 'Blue', 'Yellow'];\r\n    return colorNames[faceIndex] || 'Unknown';\r\n  };\r\n\r\n  // Get pieces data\r\n  const getPieces = () => {\r\n    if (Array.isArray(cubeState)) {\r\n      return cubeState.map((piece, index) => ({\r\n        pieceId: index,\r\n        position: piece.position,\r\n        colors: piece.colors,\r\n        rotationHistory: piece.rotationHistory || []\r\n      }));\r\n    } else if (cubeState?.pieces) {\r\n      return cubeState.pieces;\r\n    }\r\n    return [];\r\n  };\r\n\r\n  const pieces = getPieces();\r\n\r\n  // Identify incorrect shapes by type\r\n  const identifyIncorrectShapesByType = (shapeType) => {\r\n    const incorrectPieces = pieces.filter(piece => {\r\n      const pieceId = piece.pieceId;\r\n      const actualShapeType = getShapeType(pieceId);\r\n      return actualShapeType === shapeType && !isPieceInCorrectPosition(piece, pieceId);\r\n    });\r\n\r\n    const result = {\r\n      type: 'shape',\r\n      shapeType,\r\n      incorrectPieces: incorrectPieces.map(piece => ({\r\n        pieceId: piece.pieceId,\r\n        shapeType: getShapeType(piece.pieceId),\r\n        shapeColor: getShapeColor(piece.pieceId),\r\n        currentPosition: piece.position,\r\n        expectedPosition: getExpectedPosition(piece.pieceId),\r\n        colors: piece.colors,\r\n        rotationHistory: piece.rotationHistory\r\n      })),\r\n      count: incorrectPieces.length\r\n    };\r\n\r\n    setIdentificationResults(prev => ({\r\n      ...prev,\r\n      [`shape-${shapeType}`]: result\r\n    }));\r\n\r\n    logToTerminal(`🔍 IDENTIFIED INCORRECT ${shapeType.toUpperCase()} SHAPES`, result);\r\n    \r\n    if (onIdentification) {\r\n      onIdentification(result);\r\n    }\r\n\r\n    return result;\r\n  };\r\n\r\n  // Identify incorrect shapes by color\r\n  const identifyIncorrectShapesByColor = (shapeColor) => {\r\n    const incorrectPieces = pieces.filter(piece => {\r\n      const pieceId = piece.pieceId;\r\n      const actualShapeColor = getShapeColor(pieceId);\r\n      return actualShapeColor === shapeColor && !isPieceInCorrectPosition(piece, pieceId);\r\n    });\r\n\r\n    const result = {\r\n      type: 'color',\r\n      shapeColor,\r\n      incorrectPieces: incorrectPieces.map(piece => ({\r\n        pieceId: piece.pieceId,\r\n        shapeType: getShapeType(piece.pieceId),\r\n        shapeColor: getShapeColor(piece.pieceId),\r\n        currentPosition: piece.position,\r\n        expectedPosition: getExpectedPosition(piece.pieceId),\r\n        colors: piece.colors,\r\n        rotationHistory: piece.rotationHistory\r\n      })),\r\n      count: incorrectPieces.length\r\n    };\r\n\r\n    setIdentificationResults(prev => ({\r\n      ...prev,\r\n      [`color-${shapeColor}`]: result\r\n    }));\r\n\r\n    logToTerminal(`🎨 IDENTIFIED INCORRECT ${shapeColor.toUpperCase()} SHAPES`, result);\r\n    \r\n    if (onIdentification) {\r\n      onIdentification(result);\r\n    }\r\n\r\n    return result;\r\n  };\r\n\r\n  // Identify incorrect border colors\r\n  const identifyIncorrectBorderColors = (faceIndex) => {\r\n    const borderColorName = getBorderColorName(faceIndex);\r\n    const borderColorHex = getExpectedBorderColor(faceIndex);\r\n    \r\n    const incorrectPieces = pieces.filter(piece => {\r\n      const pieceId = piece.pieceId;\r\n      const isInCorrectPosition = isPieceInCorrectPosition(piece, pieceId);\r\n      \r\n      // Check if this piece should have this border color in its current position\r\n      const [x, y, z] = piece.position;\r\n      let shouldHaveBorderColor = false;\r\n      \r\n      switch (faceIndex) {\r\n        case 0: // Front face (Z+) - White\r\n          shouldHaveBorderColor = z === 1;\r\n          break;\r\n        case 1: // Back face (Z-) - Orange\r\n          shouldHaveBorderColor = z === -1;\r\n          break;\r\n        case 2: // Right face (X+) - Green\r\n          shouldHaveBorderColor = x === 1;\r\n          break;\r\n        case 3: // Left face (X-) - Red\r\n          shouldHaveBorderColor = x === -1;\r\n          break;\r\n        case 4: // Top face (Y+) - Blue\r\n          shouldHaveBorderColor = y === 1;\r\n          break;\r\n        case 5: // Bottom face (Y-) - Yellow\r\n          shouldHaveBorderColor = y === -1;\r\n          break;\r\n      }\r\n      \r\n      // Piece is incorrect if it should have this border color but is not in correct position\r\n      return shouldHaveBorderColor && !isInCorrectPosition;\r\n    });\r\n\r\n    const result = {\r\n      type: 'border',\r\n      faceIndex,\r\n      borderColorName,\r\n      borderColorHex,\r\n      incorrectPieces: incorrectPieces.map(piece => ({\r\n        pieceId: piece.pieceId,\r\n        shapeType: getShapeType(piece.pieceId),\r\n        shapeColor: getShapeColor(piece.pieceId),\r\n        currentPosition: piece.position,\r\n        expectedPosition: getExpectedPosition(piece.pieceId),\r\n        colors: piece.colors,\r\n        rotationHistory: piece.rotationHistory\r\n      })),\r\n      count: incorrectPieces.length\r\n    };\r\n\r\n    setIdentificationResults(prev => ({\r\n      ...prev,\r\n      [`border-${faceIndex}`]: result\r\n    }));\r\n\r\n    logToTerminal(`🎭 IDENTIFIED INCORRECT ${borderColorName.toUpperCase()} BORDER COLORS`, result);\r\n    \r\n    if (onIdentification) {\r\n      onIdentification(result);\r\n    }\r\n\r\n    return result;\r\n  };\r\n\r\n  const handleButtonClick = (type, identifier) => {\r\n    if (isScrambling) return;\r\n\r\n    setActiveIdentification(`${type}-${identifier}`);\r\n\r\n    let result;\r\n    switch (type) {\r\n      case 'shape':\r\n        result = identifyIncorrectShapesByType(identifier);\r\n        break;\r\n      case 'color':\r\n        result = identifyIncorrectShapesByColor(identifier);\r\n        break;\r\n      case 'border':\r\n        result = identifyIncorrectBorderColors(identifier);\r\n        break;\r\n    }\r\n\r\n    // Reset active state after a short delay\r\n    setTimeout(() => {\r\n      setActiveIdentification(null);\r\n    }, 2000);\r\n  };\r\n\r\n  const getButtonState = (type, identifier) => {\r\n    const key = `${type}-${identifier}`;\r\n    const result = identificationResults[key];\r\n    const isActive = activeIdentification === key;\r\n    \r\n    return {\r\n      isActive,\r\n      hasIncorrect: result && result.count > 0,\r\n      count: result ? result.count : 0\r\n    };\r\n  };\r\n\r\n  if (!cubeState || pieces.length === 0) {\r\n    return (\r\n      <IdentifyContainer>\r\n        <SectionTitle>Identify Incorrect Shapes</SectionTitle>\r\n        <StatusMessage $type=\"warning\">\r\n          Loading cube state... Please scramble the cube first to identify incorrect shapes.\r\n        </StatusMessage>\r\n      </IdentifyContainer>\r\n    );\r\n  }\r\n\r\n  // Get unique shape types and colors\r\n  const shapeTypes = [...new Set(pieces.map(piece => getShapeType(piece.pieceId)))];\r\n  const shapeColors = [...new Set(pieces.map(piece => getShapeColor(piece.pieceId)))];\r\n\r\n  return (\r\n    <IdentifyContainer>\r\n      <SectionTitle>Identify Incorrect Shapes</SectionTitle>\r\n      <Instructions>\r\n        Click any button below to identify pieces with incorrect shapes, colors, or border colors.\r\n        Buttons show the count of incorrect pieces found for each attribute.\r\n      </Instructions>\r\n\r\n      {/* Shape Type Identification */}\r\n      <div>\r\n        <h4 style={{ color: 'white', marginBottom: '10px', fontSize: '16px' }}>By Shape Type</h4>\r\n        <ButtonGrid>\r\n          {shapeTypes.map(shapeType => {\r\n            const state = getButtonState('shape', shapeType);\r\n            return (\r\n              <IdentifyButton\r\n                key={`shape-${shapeType}`}\r\n                onClick={() => handleButtonClick('shape', shapeType)}\r\n                disabled={isScrambling}\r\n                $isActive={state.isActive}\r\n                $hasIncorrect={state.hasIncorrect}\r\n              >\r\n                <ButtonContent>\r\n                  <ButtonTitle>{shapeType} Shapes</ButtonTitle>\r\n                  <ButtonSubtitle>Identify incorrect {shapeType.toLowerCase()}s</ButtonSubtitle>\r\n                  {state.count > 0 && <CountBadge $hasIncorrect={state.hasIncorrect}>{state.count}</CountBadge>}\r\n                </ButtonContent>\r\n              </IdentifyButton>\r\n            );\r\n          })}\r\n        </ButtonGrid>\r\n      </div>\r\n\r\n      {/* Shape Color Identification */}\r\n      <div>\r\n        <h4 style={{ color: 'white', marginBottom: '10px', fontSize: '16px' }}>By Shape Color</h4>\r\n        <ButtonGrid>\r\n          {shapeColors.map(shapeColor => {\r\n            const state = getButtonState('color', shapeColor);\r\n            return (\r\n              <IdentifyButton\r\n                key={`color-${shapeColor}`}\r\n                onClick={() => handleButtonClick('color', shapeColor)}\r\n                disabled={isScrambling}\r\n                $isActive={state.isActive}\r\n                $hasIncorrect={state.hasIncorrect}\r\n              >\r\n                <ButtonContent>\r\n                  <ButtonTitle>{shapeColor} Shapes</ButtonTitle>\r\n                  <ButtonSubtitle>Identify incorrect {shapeColor.toLowerCase()} shapes</ButtonSubtitle>\r\n                  {state.count > 0 && <CountBadge $hasIncorrect={state.hasIncorrect}>{state.count}</CountBadge>}\r\n                </ButtonContent>\r\n              </IdentifyButton>\r\n            );\r\n          })}\r\n        </ButtonGrid>\r\n      </div>\r\n\r\n      {/* Border Color Identification */}\r\n      <div>\r\n        <h4 style={{ color: 'white', marginBottom: '10px', fontSize: '16px' }}>By Border Color</h4>\r\n        <ButtonGrid>\r\n          {[0, 1, 2, 3, 4, 5].map(faceIndex => {\r\n            const state = getButtonState('border', faceIndex);\r\n            const borderColorName = getBorderColorName(faceIndex);\r\n            const borderColorHex = getExpectedBorderColor(faceIndex);\r\n            \r\n            return (\r\n              <IdentifyButton\r\n                key={`border-${faceIndex}`}\r\n                onClick={() => handleButtonClick('border', faceIndex)}\r\n                disabled={isScrambling}\r\n                $isActive={state.isActive}\r\n                $hasIncorrect={state.hasIncorrect}\r\n                style={{\r\n                  borderColor: state.hasIncorrect ? '#ff4757' : borderColorHex,\r\n                  borderWidth: '3px'\r\n                }}\r\n              >\r\n                <ButtonContent>\r\n                  <ButtonTitle style={{ color: borderColorHex, fontWeight: 'bold' }}>\r\n                    {borderColorName} Borders\r\n                  </ButtonTitle>\r\n                  <ButtonSubtitle>\r\n                    Identify incorrect {borderColorName.toLowerCase()} border colors\r\n                  </ButtonSubtitle>\r\n                  {state.count > 0 && (\r\n                    <CountBadge $hasIncorrect={state.hasIncorrect}>\r\n                      {state.count}\r\n                    </CountBadge>\r\n                  )}\r\n                </ButtonContent>\r\n              </IdentifyButton>\r\n            );\r\n          })}\r\n        </ButtonGrid>\r\n      </div>\r\n\r\n      {/* Status Message */}\r\n      {activeIdentification && (\r\n        <StatusMessage $type=\"success\">\r\n          Identification complete! Check the terminal for detailed results.\r\n        </StatusMessage>\r\n      )}\r\n    </IdentifyContainer>\r\n  );\r\n}\r\n\r\nexport default IdentifyIncorrectShapes;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}