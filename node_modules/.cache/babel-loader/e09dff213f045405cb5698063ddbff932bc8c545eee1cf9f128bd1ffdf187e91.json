{"ast":null,"code":"var _jsxFileName = \"C:\\\\Repo\\\\GitHub\\\\rubiks-cube\\\\src\\\\components\\\\ShapeButtons.js\";\nimport React from 'react';\nimport styled from 'styled-components';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ShapeButtonsContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 15px;\n  padding: 20px;\n  background: rgba(255, 255, 255, 0.1);\n  border-radius: 15px;\n  backdrop-filter: blur(10px);\n  border: 1px solid rgba(255, 255, 255, 0.2);\n  box-shadow: 0 4px 16px rgba(0, 0, 0, 0.2);\n  max-height: 400px;\n  overflow-y: auto;\n`;\n_c = ShapeButtonsContainer;\nconst SectionTitle = styled.h3`\n  color: white;\n  text-align: center;\n  margin: 0 0 15px 0;\n  font-size: 1.2rem;\n  font-weight: 600;\n`;\n_c2 = SectionTitle;\nconst ShapeGrid = styled.div`\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(120px, 1fr));\n  gap: 10px;\n  max-width: 100%;\n`;\n_c3 = ShapeGrid;\nconst ShapeButton = styled.button`\n  padding: 8px 12px;\n  border: 2px solid ${props => props.$isIncorrect ? '#ff4757' : 'rgba(255, 255, 255, 0.3)'};\n  border-radius: 8px;\n  font-size: 12px;\n  font-weight: 600;\n  cursor: ${props => props.disabled ? 'not-allowed' : 'pointer'};\n  transition: all 0.3s ease;\n  background: ${props => {\n  if (props.disabled) return 'rgba(100, 100, 100, 0.3)';\n  if (props.$isIncorrect) return 'rgba(255, 71, 87, 0.2)';\n  return 'rgba(255, 255, 255, 0.1)';\n}};\n  color: ${props => props.disabled ? '#666' : 'white'};\n  opacity: ${props => props.disabled ? 0.5 : 1};\n  \n  &:hover {\n    transform: ${props => props.disabled ? 'none' : 'translateY(-2px)'};\n    box-shadow: ${props => props.disabled ? 'none' : '0 4px 12px rgba(0, 0, 0, 0.3)'};\n    background: ${props => {\n  if (props.disabled) return 'rgba(100, 100, 100, 0.3)';\n  if (props.$isIncorrect) return 'rgba(255, 71, 87, 0.4)';\n  return 'rgba(255, 255, 255, 0.2)';\n}};\n  }\n  \n  &:active {\n    transform: ${props => props.disabled ? 'none' : 'translateY(0)'};\n  }\n`;\n_c4 = ShapeButton;\nconst ShapeInfo = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  gap: 2px;\n`;\n_c5 = ShapeInfo;\nconst ShapeType = styled.span`\n  font-size: 10px;\n  font-weight: 600;\n`;\n_c6 = ShapeType;\nconst ShapeColor = styled.span`\n  font-size: 9px;\n  opacity: 0.8;\n`;\n_c7 = ShapeColor;\nconst PieceId = styled.span`\n  font-size: 8px;\n  opacity: 0.6;\n  margin-top: 2px;\n`;\n_c8 = PieceId;\nconst Instructions = styled.p`\n  color: rgba(255, 255, 255, 0.8);\n  font-size: 12px;\n  text-align: center;\n  margin: 0 0 10px 0;\n  line-height: 1.4;\n`;\n\n// Custom logging function that will be visible in terminal\n_c9 = Instructions;\nconst logToTerminal = (message, data = null) => {\n  // Log to browser console with enhanced visibility\n  console.log(`\\n🎯 ${message}`);\n  console.log('='.repeat(80));\n  if (data) {\n    console.log(JSON.stringify(data, null, 2));\n  }\n  console.log('='.repeat(80) + '\\n');\n\n  // Show alert for immediate feedback\n  alert(`🎯 ${message}\\n\\nCheck browser console (F12) for detailed information.`);\n\n  // Send to log server to print in terminal\n  fetch('http://localhost:3001/log', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      message: message,\n      data: data\n    })\n  }).then(response => {\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    console.log('✅ Log sent to terminal successfully');\n  }).catch(error => {\n    console.error('❌ Could not send log to terminal server:', error);\n    console.log('💡 Make sure the log server is running with: npm run log-server');\n    console.log('💡 You can also check the browser console (F12) for the logged information');\n  });\n};\nfunction ShapeButtons({\n  isScrambling,\n  cubeState,\n  onShapeClick\n}) {\n  // Helper functions for shape information\n  const getShapeType = pieceId => {\n    const shapeTypes = ['Square', 'Square', 'Square', 'Square', 'Square', 'Circle', 'Circle', 'Circle', 'Circle', 'Circle', 'Triangle', 'Triangle', 'Triangle', 'Triangle', 'Triangle', 'Diamond', 'Diamond', 'Diamond', 'Diamond', 'Diamond', 'Square+White', 'Square+White', 'Square+White', 'Square+White', 'Square+White', 'Square+White'];\n    return shapeTypes[pieceId] || 'Unknown';\n  };\n  const getShapeColor = pieceId => {\n    const shapeColors = ['Red', 'Blue', 'Green', 'Orange', 'Purple', 'Red', 'Blue', 'Green', 'Orange', 'Purple', 'Red', 'Blue', 'Green', 'Orange', 'Purple', 'Red', 'Blue', 'Green', 'Orange', 'Purple', 'Red', 'Blue', 'Green', 'Orange', 'Purple', 'Cyan'];\n    return shapeColors[pieceId] || 'Unknown';\n  };\n  const getExpectedPosition = pieceId => {\n    // Map pieceId to expected solved position\n    const positions = [];\n    for (let x = -1; x <= 1; x++) {\n      for (let y = -1; y <= 1; y++) {\n        for (let z = -1; z <= 1; z++) {\n          if (x === 0 && y === 0 && z === 0) continue;\n          positions.push([x, y, z]);\n        }\n      }\n    }\n    return positions[pieceId];\n  };\n  const isPieceInCorrectPosition = (piece, pieceId) => {\n    if (!piece || !piece.position) return false;\n    const [x, y, z] = piece.position;\n    const expectedPosition = getExpectedPosition(pieceId);\n    return x === expectedPosition[0] && y === expectedPosition[1] && z === expectedPosition[2];\n  };\n  const handleShapeClick = pieceId => {\n    if (isScrambling || !cubeState) return;\n\n    // Get piece information\n    let piece;\n    if (Array.isArray(cubeState)) {\n      // Old format - cubeState is an array\n      piece = cubeState[pieceId];\n    } else {\n      var _cubeState$pieces;\n      // New format - cubeState is an enhanced object\n      piece = (_cubeState$pieces = cubeState.pieces) === null || _cubeState$pieces === void 0 ? void 0 : _cubeState$pieces[pieceId];\n    }\n    if (!piece) {\n      console.error(`Piece ${pieceId} not found in cube state`);\n      return;\n    }\n    const shapeType = getShapeType(pieceId);\n    const shapeColor = getShapeColor(pieceId);\n    const expectedPosition = getExpectedPosition(pieceId);\n    const isInCorrectPosition = isPieceInCorrectPosition(piece, pieceId);\n\n    // Create detailed piece information\n    const pieceInfo = {\n      pieceId,\n      shapeType,\n      shapeColor,\n      currentPosition: piece.position,\n      expectedPosition,\n      isInCorrectPosition,\n      colors: piece.colors,\n      rotationHistory: piece.rotationHistory || [],\n      timestamp: new Date().toISOString()\n    };\n\n    // Log to terminal\n    logToTerminal(`INCORRECT SHAPE IDENTIFIED: ${shapeColor} ${shapeType} (Piece ${pieceId})`, pieceInfo);\n\n    // Call parent callback if provided\n    if (onShapeClick) {\n      onShapeClick(pieceId, pieceInfo);\n    }\n\n    // Visual feedback\n    console.log(`🔍 Clicked on ${shapeColor} ${shapeType} (Piece ${pieceId})`);\n    console.log(`   Current Position: [${piece.position.join(', ')}]`);\n    console.log(`   Expected Position: [${expectedPosition.join(', ')}]`);\n    console.log(`   Is in correct position: ${isInCorrectPosition}`);\n  };\n\n  // Get pieces data\n  let pieces = [];\n  if (Array.isArray(cubeState)) {\n    // Old format - cubeState is an array\n    pieces = cubeState.map((piece, index) => ({\n      pieceId: index,\n      position: piece.position,\n      colors: piece.colors,\n      rotationHistory: piece.rotationHistory || []\n    }));\n  } else if (cubeState !== null && cubeState !== void 0 && cubeState.pieces) {\n    // New format - cubeState is an enhanced object\n    pieces = cubeState.pieces;\n  }\n  return /*#__PURE__*/_jsxDEV(ShapeButtonsContainer, {\n    children: [/*#__PURE__*/_jsxDEV(SectionTitle, {\n      children: \"Identify Incorrect Shapes\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 245,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Instructions, {\n      children: \"Click on any shape button to report it as being in an incorrect position after scrambling. Buttons are only active after scrambling is complete.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 246,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ShapeGrid, {\n      children: Array.from({\n        length: 26\n      }, (_, pieceId) => {\n        const piece = pieces[pieceId];\n        const isInCorrectPosition = piece ? isPieceInCorrectPosition(piece, pieceId) : false;\n        return /*#__PURE__*/_jsxDEV(ShapeButton, {\n          onClick: () => handleShapeClick(pieceId),\n          disabled: isScrambling,\n          $isIncorrect: !isInCorrectPosition && !isScrambling,\n          children: /*#__PURE__*/_jsxDEV(ShapeInfo, {\n            children: [/*#__PURE__*/_jsxDEV(ShapeType, {\n              children: getShapeType(pieceId)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 264,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(ShapeColor, {\n              children: getShapeColor(pieceId)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 265,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(PieceId, {\n              children: [\"#\", pieceId]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 266,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 263,\n            columnNumber: 15\n          }, this)\n        }, pieceId, false, {\n          fileName: _jsxFileName,\n          lineNumber: 257,\n          columnNumber: 13\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 251,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 244,\n    columnNumber: 5\n  }, this);\n}\n_c0 = ShapeButtons;\nexport default ShapeButtons;\nvar _c, _c2, _c3, _c4, _c5, _c6, _c7, _c8, _c9, _c0;\n$RefreshReg$(_c, \"ShapeButtonsContainer\");\n$RefreshReg$(_c2, \"SectionTitle\");\n$RefreshReg$(_c3, \"ShapeGrid\");\n$RefreshReg$(_c4, \"ShapeButton\");\n$RefreshReg$(_c5, \"ShapeInfo\");\n$RefreshReg$(_c6, \"ShapeType\");\n$RefreshReg$(_c7, \"ShapeColor\");\n$RefreshReg$(_c8, \"PieceId\");\n$RefreshReg$(_c9, \"Instructions\");\n$RefreshReg$(_c0, \"ShapeButtons\");","map":{"version":3,"names":["React","styled","jsxDEV","_jsxDEV","ShapeButtonsContainer","div","_c","SectionTitle","h3","_c2","ShapeGrid","_c3","ShapeButton","button","props","$isIncorrect","disabled","_c4","ShapeInfo","_c5","ShapeType","span","_c6","ShapeColor","_c7","PieceId","_c8","Instructions","p","_c9","logToTerminal","message","data","console","log","repeat","JSON","stringify","alert","fetch","method","headers","body","then","response","ok","Error","status","catch","error","ShapeButtons","isScrambling","cubeState","onShapeClick","getShapeType","pieceId","shapeTypes","getShapeColor","shapeColors","getExpectedPosition","positions","x","y","z","push","isPieceInCorrectPosition","piece","position","expectedPosition","handleShapeClick","Array","isArray","_cubeState$pieces","pieces","shapeType","shapeColor","isInCorrectPosition","pieceInfo","currentPosition","colors","rotationHistory","timestamp","Date","toISOString","join","map","index","children","fileName","_jsxFileName","lineNumber","columnNumber","from","length","_","onClick","_c0","$RefreshReg$"],"sources":["C:/Repo/GitHub/rubiks-cube/src/components/ShapeButtons.js"],"sourcesContent":["import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst ShapeButtonsContainer = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 15px;\r\n  padding: 20px;\r\n  background: rgba(255, 255, 255, 0.1);\r\n  border-radius: 15px;\r\n  backdrop-filter: blur(10px);\r\n  border: 1px solid rgba(255, 255, 255, 0.2);\r\n  box-shadow: 0 4px 16px rgba(0, 0, 0, 0.2);\r\n  max-height: 400px;\r\n  overflow-y: auto;\r\n`;\r\n\r\nconst SectionTitle = styled.h3`\r\n  color: white;\r\n  text-align: center;\r\n  margin: 0 0 15px 0;\r\n  font-size: 1.2rem;\r\n  font-weight: 600;\r\n`;\r\n\r\nconst ShapeGrid = styled.div`\r\n  display: grid;\r\n  grid-template-columns: repeat(auto-fit, minmax(120px, 1fr));\r\n  gap: 10px;\r\n  max-width: 100%;\r\n`;\r\n\r\nconst ShapeButton = styled.button`\r\n  padding: 8px 12px;\r\n  border: 2px solid ${props => props.$isIncorrect ? '#ff4757' : 'rgba(255, 255, 255, 0.3)'};\r\n  border-radius: 8px;\r\n  font-size: 12px;\r\n  font-weight: 600;\r\n  cursor: ${props => props.disabled ? 'not-allowed' : 'pointer'};\r\n  transition: all 0.3s ease;\r\n  background: ${props => {\r\n    if (props.disabled) return 'rgba(100, 100, 100, 0.3)';\r\n    if (props.$isIncorrect) return 'rgba(255, 71, 87, 0.2)';\r\n    return 'rgba(255, 255, 255, 0.1)';\r\n  }};\r\n  color: ${props => props.disabled ? '#666' : 'white'};\r\n  opacity: ${props => props.disabled ? 0.5 : 1};\r\n  \r\n  &:hover {\r\n    transform: ${props => props.disabled ? 'none' : 'translateY(-2px)'};\r\n    box-shadow: ${props => props.disabled ? 'none' : '0 4px 12px rgba(0, 0, 0, 0.3)'};\r\n    background: ${props => {\r\n      if (props.disabled) return 'rgba(100, 100, 100, 0.3)';\r\n      if (props.$isIncorrect) return 'rgba(255, 71, 87, 0.4)';\r\n      return 'rgba(255, 255, 255, 0.2)';\r\n    }};\r\n  }\r\n  \r\n  &:active {\r\n    transform: ${props => props.disabled ? 'none' : 'translateY(0)'};\r\n  }\r\n`;\r\n\r\nconst ShapeInfo = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  gap: 2px;\r\n`;\r\n\r\nconst ShapeType = styled.span`\r\n  font-size: 10px;\r\n  font-weight: 600;\r\n`;\r\n\r\nconst ShapeColor = styled.span`\r\n  font-size: 9px;\r\n  opacity: 0.8;\r\n`;\r\n\r\nconst PieceId = styled.span`\r\n  font-size: 8px;\r\n  opacity: 0.6;\r\n  margin-top: 2px;\r\n`;\r\n\r\nconst Instructions = styled.p`\r\n  color: rgba(255, 255, 255, 0.8);\r\n  font-size: 12px;\r\n  text-align: center;\r\n  margin: 0 0 10px 0;\r\n  line-height: 1.4;\r\n`;\r\n\r\n// Custom logging function that will be visible in terminal\r\nconst logToTerminal = (message, data = null) => {\r\n  // Log to browser console with enhanced visibility\r\n  console.log(`\\n🎯 ${message}`);\r\n  console.log('='.repeat(80));\r\n  if (data) {\r\n    console.log(JSON.stringify(data, null, 2));\r\n  }\r\n  console.log('='.repeat(80) + '\\n');\r\n  \r\n  // Show alert for immediate feedback\r\n  alert(`🎯 ${message}\\n\\nCheck browser console (F12) for detailed information.`);\r\n  \r\n  // Send to log server to print in terminal\r\n  fetch('http://localhost:3001/log', {\r\n    method: 'POST',\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n    },\r\n    body: JSON.stringify({\r\n      message: message,\r\n      data: data\r\n    })\r\n  })\r\n  .then(response => {\r\n    if (!response.ok) {\r\n      throw new Error(`HTTP error! status: ${response.status}`);\r\n    }\r\n    console.log('✅ Log sent to terminal successfully');\r\n  })\r\n  .catch(error => {\r\n    console.error('❌ Could not send log to terminal server:', error);\r\n    console.log('💡 Make sure the log server is running with: npm run log-server');\r\n    console.log('💡 You can also check the browser console (F12) for the logged information');\r\n  });\r\n};\r\n\r\nfunction ShapeButtons({ isScrambling, cubeState, onShapeClick }) {\r\n  // Helper functions for shape information\r\n  const getShapeType = (pieceId) => {\r\n    const shapeTypes = [\r\n      'Square', 'Square', 'Square', 'Square', 'Square',\r\n      'Circle', 'Circle', 'Circle', 'Circle', 'Circle',\r\n      'Triangle', 'Triangle', 'Triangle', 'Triangle', 'Triangle',\r\n      'Diamond', 'Diamond', 'Diamond', 'Diamond', 'Diamond',\r\n      'Square+White', 'Square+White', 'Square+White', 'Square+White', 'Square+White', 'Square+White'\r\n    ];\r\n    return shapeTypes[pieceId] || 'Unknown';\r\n  };\r\n\r\n  const getShapeColor = (pieceId) => {\r\n    const shapeColors = [\r\n      'Red', 'Blue', 'Green', 'Orange', 'Purple',\r\n      'Red', 'Blue', 'Green', 'Orange', 'Purple',\r\n      'Red', 'Blue', 'Green', 'Orange', 'Purple',\r\n      'Red', 'Blue', 'Green', 'Orange', 'Purple',\r\n      'Red', 'Blue', 'Green', 'Orange', 'Purple', 'Cyan'\r\n    ];\r\n    return shapeColors[pieceId] || 'Unknown';\r\n  };\r\n\r\n  const getExpectedPosition = (pieceId) => {\r\n    // Map pieceId to expected solved position\r\n    const positions = [];\r\n    for (let x = -1; x <= 1; x++) {\r\n      for (let y = -1; y <= 1; y++) {\r\n        for (let z = -1; z <= 1; z++) {\r\n          if (x === 0 && y === 0 && z === 0) continue;\r\n          positions.push([x, y, z]);\r\n        }\r\n      }\r\n    }\r\n    return positions[pieceId];\r\n  };\r\n\r\n  const isPieceInCorrectPosition = (piece, pieceId) => {\r\n    if (!piece || !piece.position) return false;\r\n    const [x, y, z] = piece.position;\r\n    const expectedPosition = getExpectedPosition(pieceId);\r\n    return x === expectedPosition[0] && y === expectedPosition[1] && z === expectedPosition[2];\r\n  };\r\n\r\n  const handleShapeClick = (pieceId) => {\r\n    if (isScrambling || !cubeState) return;\r\n\r\n    // Get piece information\r\n    let piece;\r\n    if (Array.isArray(cubeState)) {\r\n      // Old format - cubeState is an array\r\n      piece = cubeState[pieceId];\r\n    } else {\r\n      // New format - cubeState is an enhanced object\r\n      piece = cubeState.pieces?.[pieceId];\r\n    }\r\n\r\n    if (!piece) {\r\n      console.error(`Piece ${pieceId} not found in cube state`);\r\n      return;\r\n    }\r\n\r\n    const shapeType = getShapeType(pieceId);\r\n    const shapeColor = getShapeColor(pieceId);\r\n    const expectedPosition = getExpectedPosition(pieceId);\r\n    const isInCorrectPosition = isPieceInCorrectPosition(piece, pieceId);\r\n\r\n    // Create detailed piece information\r\n    const pieceInfo = {\r\n      pieceId,\r\n      shapeType,\r\n      shapeColor,\r\n      currentPosition: piece.position,\r\n      expectedPosition,\r\n      isInCorrectPosition,\r\n      colors: piece.colors,\r\n      rotationHistory: piece.rotationHistory || [],\r\n      timestamp: new Date().toISOString()\r\n    };\r\n\r\n    // Log to terminal\r\n    logToTerminal(`INCORRECT SHAPE IDENTIFIED: ${shapeColor} ${shapeType} (Piece ${pieceId})`, pieceInfo);\r\n\r\n    // Call parent callback if provided\r\n    if (onShapeClick) {\r\n      onShapeClick(pieceId, pieceInfo);\r\n    }\r\n\r\n    // Visual feedback\r\n    console.log(`🔍 Clicked on ${shapeColor} ${shapeType} (Piece ${pieceId})`);\r\n    console.log(`   Current Position: [${piece.position.join(', ')}]`);\r\n    console.log(`   Expected Position: [${expectedPosition.join(', ')}]`);\r\n    console.log(`   Is in correct position: ${isInCorrectPosition}`);\r\n  };\r\n\r\n  // Get pieces data\r\n  let pieces = [];\r\n  if (Array.isArray(cubeState)) {\r\n    // Old format - cubeState is an array\r\n    pieces = cubeState.map((piece, index) => ({\r\n      pieceId: index,\r\n      position: piece.position,\r\n      colors: piece.colors,\r\n      rotationHistory: piece.rotationHistory || []\r\n    }));\r\n  } else if (cubeState?.pieces) {\r\n    // New format - cubeState is an enhanced object\r\n    pieces = cubeState.pieces;\r\n  }\r\n\r\n  return (\r\n    <ShapeButtonsContainer>\r\n      <SectionTitle>Identify Incorrect Shapes</SectionTitle>\r\n      <Instructions>\r\n        Click on any shape button to report it as being in an incorrect position after scrambling.\r\n        Buttons are only active after scrambling is complete.\r\n      </Instructions>\r\n      \r\n      <ShapeGrid>\r\n        {Array.from({ length: 26 }, (_, pieceId) => {\r\n          const piece = pieces[pieceId];\r\n          const isInCorrectPosition = piece ? isPieceInCorrectPosition(piece, pieceId) : false;\r\n          \r\n          return (\r\n            <ShapeButton\r\n              key={pieceId}\r\n              onClick={() => handleShapeClick(pieceId)}\r\n              disabled={isScrambling}\r\n              $isIncorrect={!isInCorrectPosition && !isScrambling}\r\n            >\r\n              <ShapeInfo>\r\n                <ShapeType>{getShapeType(pieceId)}</ShapeType>\r\n                <ShapeColor>{getShapeColor(pieceId)}</ShapeColor>\r\n                <PieceId>#{pieceId}</PieceId>\r\n              </ShapeInfo>\r\n            </ShapeButton>\r\n          );\r\n        })}\r\n      </ShapeGrid>\r\n    </ShapeButtonsContainer>\r\n  );\r\n}\r\n\r\nexport default ShapeButtons;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}