{"ast":null,"code":"var _jsxFileName = \"C:\\\\Repo\\\\GitHub\\\\rubiks-cube\\\\src\\\\components\\\\RubiksCube.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$(),\n  _s3 = $RefreshSig$(),\n  _s4 = $RefreshSig$();\nimport React, { useState, useRef, useMemo, useCallback, useEffect } from 'react';\nimport { Canvas, useFrame } from '@react-three/fiber';\nimport { OrbitControls, Environment } from '@react-three/drei';\nimport * as THREE from 'three';\n\n// Custom logging function that will be visible in terminal\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst logToTerminal = (message, data = null) => {\n  // Log to browser console\n  console.log(`\\n🎯 ${message}`);\n  if (data) {\n    console.log(JSON.stringify(data, null, 2));\n  }\n  console.log('='.repeat(80) + '\\n');\n\n  // Send to log server to print in terminal\n  fetch('http://localhost:3001/log', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      message: message,\n      data: data\n    })\n  }).then(response => {\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    console.log('✅ Log sent to terminal successfully');\n  }).catch(error => {\n    console.error('❌ Could not send log to terminal server:', error);\n    console.log('💡 Make sure the log server is running with: npm run log-server');\n  });\n};\n\n// Function to create unique shapes for each piece\nfunction createShape(pieceId, size) {\n  const shapes = [\n  // 0-4: Basic geometric shapes (Squares)\n  () => /*#__PURE__*/_jsxDEV(\"mesh\", {\n    position: [0, 0, 0.012],\n    children: [/*#__PURE__*/_jsxDEV(\"planeGeometry\", {\n      args: [size, size]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 42\n    }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n      color: \"red\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 79\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 11\n  }, this),\n  // Square\n  () => /*#__PURE__*/_jsxDEV(\"mesh\", {\n    position: [0, 0, 0.012],\n    children: [/*#__PURE__*/_jsxDEV(\"planeGeometry\", {\n      args: [size, size]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 42\n    }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n      color: \"blue\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 79\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 11\n  }, this),\n  // Square\n  () => /*#__PURE__*/_jsxDEV(\"mesh\", {\n    position: [0, 0, 0.012],\n    children: [/*#__PURE__*/_jsxDEV(\"planeGeometry\", {\n      args: [size, size]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 42\n    }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n      color: \"green\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 79\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 11\n  }, this),\n  // Square\n  () => /*#__PURE__*/_jsxDEV(\"mesh\", {\n    position: [0, 0, 0.012],\n    children: [/*#__PURE__*/_jsxDEV(\"planeGeometry\", {\n      args: [size, size]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 42\n    }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n      color: \"orange\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 79\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 11\n  }, this),\n  // Square\n  () => /*#__PURE__*/_jsxDEV(\"mesh\", {\n    position: [0, 0, 0.012],\n    children: [/*#__PURE__*/_jsxDEV(\"planeGeometry\", {\n      args: [size, size]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 42\n    }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n      color: \"purple\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 79\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 11\n  }, this),\n  // Square\n\n  // 5-9: Circles\n  () => /*#__PURE__*/_jsxDEV(\"mesh\", {\n    position: [0, 0, 0.012],\n    children: [/*#__PURE__*/_jsxDEV(\"circleGeometry\", {\n      args: [size / 2, 32]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 42\n    }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n      color: \"red\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 80\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 11\n  }, this),\n  // Circle\n  () => /*#__PURE__*/_jsxDEV(\"mesh\", {\n    position: [0, 0, 0.012],\n    children: [/*#__PURE__*/_jsxDEV(\"circleGeometry\", {\n      args: [size / 2, 32]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 42\n    }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n      color: \"blue\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 80\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 11\n  }, this),\n  // Circle\n  () => /*#__PURE__*/_jsxDEV(\"mesh\", {\n    position: [0, 0, 0.012],\n    children: [/*#__PURE__*/_jsxDEV(\"circleGeometry\", {\n      args: [size / 2, 32]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 42\n    }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n      color: \"green\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 80\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 11\n  }, this),\n  // Circle\n  () => /*#__PURE__*/_jsxDEV(\"mesh\", {\n    position: [0, 0, 0.012],\n    children: [/*#__PURE__*/_jsxDEV(\"circleGeometry\", {\n      args: [size / 2, 32]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 42\n    }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n      color: \"orange\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 80\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 11\n  }, this),\n  // Circle\n  () => /*#__PURE__*/_jsxDEV(\"mesh\", {\n    position: [0, 0, 0.012],\n    children: [/*#__PURE__*/_jsxDEV(\"circleGeometry\", {\n      args: [size / 2, 32]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 42\n    }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n      color: \"yellow\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 80\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 11\n  }, this),\n  // Circle\n\n  // 10-14: Triangles (using planeGeometry for now, ideally custom geometry)\n  () => /*#__PURE__*/_jsxDEV(\"mesh\", {\n    position: [0, 0, 0.012],\n    children: [/*#__PURE__*/_jsxDEV(\"planeGeometry\", {\n      args: [size, size]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 42\n    }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n      color: \"red\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 79\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 11\n  }, this),\n  // Triangle\n  () => /*#__PURE__*/_jsxDEV(\"mesh\", {\n    position: [0, 0, 0.012],\n    children: [/*#__PURE__*/_jsxDEV(\"planeGeometry\", {\n      args: [size, size]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 42\n    }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n      color: \"blue\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 79\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 11\n  }, this),\n  // Triangle\n  () => /*#__PURE__*/_jsxDEV(\"mesh\", {\n    position: [0, 0, 0.012],\n    children: [/*#__PURE__*/_jsxDEV(\"planeGeometry\", {\n      args: [size, size]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 42\n    }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n      color: \"green\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 79\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 11\n  }, this),\n  // Triangle\n  () => /*#__PURE__*/_jsxDEV(\"mesh\", {\n    position: [0, 0, 0.012],\n    children: [/*#__PURE__*/_jsxDEV(\"planeGeometry\", {\n      args: [size, size]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 42\n    }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n      color: \"orange\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 79\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 11\n  }, this),\n  // Triangle\n  () => /*#__PURE__*/_jsxDEV(\"mesh\", {\n    position: [0, 0, 0.012],\n    children: [/*#__PURE__*/_jsxDEV(\"planeGeometry\", {\n      args: [size, size]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 42\n    }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n      color: \"purple\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 79\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 11\n  }, this),\n  // Triangle\n\n  // 15-19: Diamonds (rotated squares)\n  () => /*#__PURE__*/_jsxDEV(\"group\", {\n    position: [0, 0, 0.012],\n    children: /*#__PURE__*/_jsxDEV(\"mesh\", {\n      rotation: [0, 0, Math.PI / 4],\n      children: [/*#__PURE__*/_jsxDEV(\"planeGeometry\", {\n        args: [size, size]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 78\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: \"red\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 115\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 43\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 11\n  }, this),\n  // Diamond\n  () => /*#__PURE__*/_jsxDEV(\"group\", {\n    position: [0, 0, 0.012],\n    children: /*#__PURE__*/_jsxDEV(\"mesh\", {\n      rotation: [0, 0, Math.PI / 4],\n      children: [/*#__PURE__*/_jsxDEV(\"planeGeometry\", {\n        args: [size, size]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 78\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: \"blue\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 115\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 43\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 11\n  }, this),\n  // Diamond\n  () => /*#__PURE__*/_jsxDEV(\"group\", {\n    position: [0, 0, 0.012],\n    children: /*#__PURE__*/_jsxDEV(\"mesh\", {\n      rotation: [0, 0, Math.PI / 4],\n      children: [/*#__PURE__*/_jsxDEV(\"planeGeometry\", {\n        args: [size, size]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 78\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: \"green\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 115\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 43\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 11\n  }, this),\n  // Diamond\n  () => /*#__PURE__*/_jsxDEV(\"group\", {\n    position: [0, 0, 0.012],\n    children: /*#__PURE__*/_jsxDEV(\"mesh\", {\n      rotation: [0, 0, Math.PI / 4],\n      children: [/*#__PURE__*/_jsxDEV(\"planeGeometry\", {\n        args: [size, size]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 78\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: \"orange\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 115\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 43\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 11\n  }, this),\n  // Diamond\n  () => /*#__PURE__*/_jsxDEV(\"group\", {\n    position: [0, 0, 0.012],\n    children: /*#__PURE__*/_jsxDEV(\"mesh\", {\n      rotation: [0, 0, Math.PI / 4],\n      children: [/*#__PURE__*/_jsxDEV(\"planeGeometry\", {\n        args: [size, size]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 78\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: \"purple\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 115\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 43\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 11\n  }, this),\n  // Diamond\n\n  // 20-25: Complex patterns (Squares with white centers)\n  () => /*#__PURE__*/_jsxDEV(\"group\", {\n    position: [0, 0, 0.012],\n    children: [/*#__PURE__*/_jsxDEV(\"mesh\", {\n      children: [/*#__PURE__*/_jsxDEV(\"planeGeometry\", {\n        args: [size, size]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 49\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: \"red\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 86\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 43\n    }, this), /*#__PURE__*/_jsxDEV(\"mesh\", {\n      position: [0, 0, 0.001],\n      children: [/*#__PURE__*/_jsxDEV(\"planeGeometry\", {\n        args: [size * 0.5, size * 0.5]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 157\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: \"white\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 202\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 126\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 11\n  }, this),\n  // Square with white center\n  () => /*#__PURE__*/_jsxDEV(\"group\", {\n    position: [0, 0, 0.012],\n    children: [/*#__PURE__*/_jsxDEV(\"mesh\", {\n      children: [/*#__PURE__*/_jsxDEV(\"planeGeometry\", {\n        args: [size, size]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 49\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: \"blue\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 86\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 43\n    }, this), /*#__PURE__*/_jsxDEV(\"mesh\", {\n      position: [0, 0, 0.001],\n      children: [/*#__PURE__*/_jsxDEV(\"planeGeometry\", {\n        args: [size * 0.5, size * 0.5]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 158\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: \"white\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 203\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 127\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 71,\n    columnNumber: 11\n  }, this),\n  // Square with white center\n  () => /*#__PURE__*/_jsxDEV(\"group\", {\n    position: [0, 0, 0.012],\n    children: [/*#__PURE__*/_jsxDEV(\"mesh\", {\n      children: [/*#__PURE__*/_jsxDEV(\"planeGeometry\", {\n        args: [size, size]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 49\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: \"green\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 86\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 43\n    }, this), /*#__PURE__*/_jsxDEV(\"mesh\", {\n      position: [0, 0, 0.001],\n      children: [/*#__PURE__*/_jsxDEV(\"planeGeometry\", {\n        args: [size * 0.5, size * 0.5]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 159\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: \"white\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 204\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 128\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 11\n  }, this),\n  // Square with white center\n  () => /*#__PURE__*/_jsxDEV(\"group\", {\n    position: [0, 0, 0.012],\n    children: [/*#__PURE__*/_jsxDEV(\"mesh\", {\n      children: [/*#__PURE__*/_jsxDEV(\"planeGeometry\", {\n        args: [size, size]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 49\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: \"orange\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 86\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 43\n    }, this), /*#__PURE__*/_jsxDEV(\"mesh\", {\n      position: [0, 0, 0.001],\n      children: [/*#__PURE__*/_jsxDEV(\"planeGeometry\", {\n        args: [size * 0.5, size * 0.5]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 160\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: \"white\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 205\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 129\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 11\n  }, this),\n  // Square with white center\n  () => /*#__PURE__*/_jsxDEV(\"group\", {\n    position: [0, 0, 0.012],\n    children: [/*#__PURE__*/_jsxDEV(\"mesh\", {\n      children: [/*#__PURE__*/_jsxDEV(\"planeGeometry\", {\n        args: [size, size]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 49\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: \"purple\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 86\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 43\n    }, this), /*#__PURE__*/_jsxDEV(\"mesh\", {\n      position: [0, 0, 0.001],\n      children: [/*#__PURE__*/_jsxDEV(\"planeGeometry\", {\n        args: [size * 0.5, size * 0.5]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 160\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: \"white\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 205\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 129\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 11\n  }, this),\n  // Square with white center\n  () => /*#__PURE__*/_jsxDEV(\"group\", {\n    position: [0, 0, 0.012],\n    children: [/*#__PURE__*/_jsxDEV(\"mesh\", {\n      children: [/*#__PURE__*/_jsxDEV(\"planeGeometry\", {\n        args: [size, size]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 49\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: \"yellow\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 86\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 43\n    }, this), /*#__PURE__*/_jsxDEV(\"mesh\", {\n      position: [0, 0, 0.001],\n      children: [/*#__PURE__*/_jsxDEV(\"planeGeometry\", {\n        args: [size * 0.5, size * 0.5]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 160\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: \"white\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 205\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 129\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 11\n  }, this) // Square with white center\n  ];\n  const shapeIndex = pieceId; // Changed from pieceId % shapes.length\n  return shapes[shapeIndex]();\n}\n\n// Individual cube piece component\nfunction CubePiece({\n  position,\n  colors,\n  size = 0.95,\n  pieceId = 0\n}) {\n  _s();\n  const meshRef = useRef();\n\n  // Log piece information for debugging\n  React.useEffect(() => {\n    const shapeTypes = ['Square', 'Square', 'Square', 'Square', 'Square', 'Circle', 'Circle', 'Circle', 'Circle', 'Circle', 'Triangle', 'Triangle', 'Triangle', 'Triangle', 'Triangle', 'Diamond', 'Diamond', 'Diamond', 'Diamond', 'Diamond', 'Square+White', 'Square+White', 'Square+White', 'Square+White', 'Square+White', 'Square+White'];\n    const shapeColors = ['Red', 'Blue', 'Green', 'Orange', 'Purple', 'Red', 'Blue', 'Green', 'Orange', 'Purple', 'Red', 'Blue', 'Green', 'Orange', 'Purple', 'Red', 'Blue', 'Green', 'Orange', 'Purple', 'Red', 'Blue', 'Green', 'Orange', 'Purple', 'Cyan'];\n    const shapeType = shapeTypes[pieceId] || 'Unknown'; // Changed from pieceId % shapeTypes.length\n    const shapeColor = shapeColors[pieceId] || 'Unknown'; // Changed from pieceId % shapeColors.length\n\n    // Debug specific pieces only\n    if (pieceId === 0 || pieceId === 17 || pieceId === 25 || pieceId === 1 || pieceId === 11) {\n      console.log(`🔍 ${shapeColor} ${shapeType} Piece ${pieceId} at position [${position.join(', ')}]`);\n      console.log(`  Stored Colors:`, colors);\n\n      // Show what colors should be visible based on position\n      const [x, y, z] = position;\n      const visibleFaces = [];\n      if (x === 1) visibleFaces.push('right');\n      if (x === -1) visibleFaces.push('left');\n      if (y === 1) visibleFaces.push('top');\n      if (y === -1) visibleFaces.push('bottom');\n      if (z === 1) visibleFaces.push('front');\n      if (z === -1) visibleFaces.push('back');\n      console.log(`  Visible faces:`, visibleFaces);\n      console.log(`  Colors on visible faces:`, visibleFaces.map(face => `${face}: ${colors[face]}`));\n    }\n  }, [pieceId, position, colors]);\n\n  // Color mapping\n  const colorMap = {\n    'white': '#FFFFFF',\n    'yellow': '#FFD700',\n    'red': '#FF0000',\n    'orange': '#FFA500',\n    'blue': '#0000FF',\n    'green': '#00FF00',\n    'black': '#000000'\n  };\n\n  // Create cube geometry\n  const cubeGeometry = useMemo(() => new THREE.BoxGeometry(size, size, size), [size]);\n\n  // Create face geometry\n  const faceGeometry = useMemo(() => {\n    const geometry = new THREE.PlaneGeometry(size, size);\n    return geometry;\n  }, [size]);\n\n  // Get the color for a face based on the face index and position\n  const getFaceColor = faceIndex => {\n    const [x, y, z] = position;\n\n    // Map face index to color property\n    let faceColor;\n    switch (faceIndex) {\n      case 0:\n        faceColor = colors.front;\n        break;\n      // Front face\n      case 1:\n        faceColor = colors.back;\n        break;\n      // Back face\n      case 2:\n        faceColor = colors.right;\n        break;\n      // Right face\n      case 3:\n        faceColor = colors.left;\n        break;\n      // Left face\n      case 4:\n        faceColor = colors.top;\n        break;\n      // Top face\n      case 5:\n        faceColor = colors.bottom;\n        break;\n      // Bottom face\n      default:\n        faceColor = 'black';\n    }\n\n    // Determine which faces are visible based on current position\n    const visibleFaces = [];\n    if (x === 1) visibleFaces.push(2); // Right face visible\n    if (x === -1) visibleFaces.push(3); // Left face visible\n    if (y === 1) visibleFaces.push(4); // Top face visible\n    if (y === -1) visibleFaces.push(5); // Bottom face visible\n    if (z === 1) visibleFaces.push(0); // Front face visible\n    if (z === -1) visibleFaces.push(1); // Back face visible\n\n    // If this face is not visible from current position, return black\n    if (!visibleFaces.includes(faceIndex)) {\n      return 'black';\n    }\n\n    // Debug logging for specific pieces\n    if (pieceId === 2 || pieceId === 11 || pieceId === 16 || pieceId === 19 || pieceId === 22 || pieceId === 25) {\n      const faceNames = ['front', 'back', 'right', 'left', 'top', 'bottom'];\n      console.log(`🎨 Piece ${pieceId} face ${faceNames[faceIndex]} (${faceIndex}) at [${x},${y},${z}]: ${faceColor} (visible: ${visibleFaces.includes(faceIndex)})`);\n    }\n    return faceColor;\n  };\n  return /*#__PURE__*/_jsxDEV(\"group\", {\n    position: position,\n    children: [/*#__PURE__*/_jsxDEV(\"mesh\", {\n      geometry: cubeGeometry,\n      children: /*#__PURE__*/_jsxDEV(\"meshPhongMaterial\", {\n        color: \"#333333\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 7\n    }, this), [0, 1, 2, 3, 4, 5].map(faceIndex => {\n      const faceColor = getFaceColor(faceIndex);\n\n      // Define face positions and rotations correctly\n      let facePosition, faceRotation;\n      switch (faceIndex) {\n        case 0:\n          // Front face (Z+)\n          facePosition = [0, 0, size / 2 + 0.001];\n          faceRotation = [0, 0, 0];\n          break;\n        case 1:\n          // Back face (Z-)\n          facePosition = [0, 0, -size / 2 - 0.001];\n          faceRotation = [0, Math.PI, 0];\n          break;\n        case 2:\n          // Right face (X+)\n          facePosition = [size / 2 + 0.001, 0, 0];\n          faceRotation = [0, Math.PI / 2, 0];\n          break;\n        case 3:\n          // Left face (X-)\n          facePosition = [-size / 2 - 0.001, 0, 0];\n          faceRotation = [0, -Math.PI / 2, 0];\n          break;\n        case 4:\n          // Top face (Y+)\n          facePosition = [0, size / 2 + 0.001, 0];\n          faceRotation = [-Math.PI / 2, 0, 0];\n          break;\n        case 5:\n          // Bottom face (Y-)\n          facePosition = [0, -size / 2 - 0.001, 0];\n          faceRotation = [Math.PI / 2, 0, 0];\n          break;\n        default:\n          facePosition = [0, 0, 0];\n          faceRotation = [0, 0, 0];\n      }\n      return /*#__PURE__*/_jsxDEV(\"mesh\", {\n        position: facePosition,\n        rotation: faceRotation,\n        geometry: faceGeometry,\n        children: /*#__PURE__*/_jsxDEV(\"meshPhongMaterial\", {\n          color: colorMap[faceColor] || '#000000',\n          side: THREE.FrontSide,\n          emissive: colorMap[faceColor] || '#000000',\n          emissiveIntensity: 0.3\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 224,\n          columnNumber: 13\n        }, this)\n      }, faceIndex, false, {\n        fileName: _jsxFileName,\n        lineNumber: 218,\n        columnNumber: 11\n      }, this);\n    }), [0, 1, 2, 3, 4, 5].map(faceIndex => {\n      // Define face positions and rotations correctly (same as colored faces)\n      let facePosition, faceRotation;\n      switch (faceIndex) {\n        case 0:\n          // Front face (Z+)\n          facePosition = [0, 0, size / 2 + 0.002];\n          faceRotation = [0, 0, 0];\n          break;\n        case 1:\n          // Back face (Z-)\n          facePosition = [0, 0, -size / 2 - 0.002];\n          faceRotation = [0, Math.PI, 0];\n          break;\n        case 2:\n          // Right face (X+)\n          facePosition = [size / 2 + 0.002, 0, 0];\n          faceRotation = [0, Math.PI / 2, 0];\n          break;\n        case 3:\n          // Left face (X-)\n          facePosition = [-size / 2 - 0.002, 0, 0];\n          faceRotation = [0, -Math.PI / 2, 0];\n          break;\n        case 4:\n          // Top face (Y+)\n          facePosition = [0, size / 2 + 0.002, 0];\n          faceRotation = [-Math.PI / 2, 0, 0];\n          break;\n        case 5:\n          // Bottom face (Y-)\n          facePosition = [0, -size / 2 - 0.002, 0];\n          faceRotation = [Math.PI / 2, 0, 0];\n          break;\n        default:\n          facePosition = [0, 0, 0];\n          faceRotation = [0, 0, 0];\n      }\n      return /*#__PURE__*/_jsxDEV(\"group\", {\n        position: facePosition,\n        rotation: faceRotation,\n        children: createShape(pieceId, size * 0.3)\n      }, `shape-${faceIndex}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 270,\n        columnNumber: 11\n      }, this);\n    })]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 174,\n    columnNumber: 5\n  }, this);\n}\n\n// Function to get the original solved colors for a piece based on its pieceId\n_s(CubePiece, \"bKf4jm4WUTjktSFU7AKQ4whFGII=\");\n_c = CubePiece;\nfunction getOriginalColors(pieceId) {\n  // Map pieceId to original solved position\n  const positions = [];\n  for (let x = -1; x <= 1; x++) {\n    for (let y = -1; y <= 1; y++) {\n      for (let z = -1; z <= 1; z++) {\n        if (x === 0 && y === 0 && z === 0) continue;\n        positions.push([x, y, z]);\n      }\n    }\n  }\n  const originalPosition = positions[pieceId];\n  const [x, y, z] = originalPosition;\n\n  // Assign colors based on original solved position\n  let colors = {\n    front: 'black',\n    back: 'black',\n    right: 'black',\n    left: 'black',\n    top: 'black',\n    bottom: 'black'\n  };\n\n  // Only assign colors to faces that are visible (not internal) in solved state\n  if (x === -1) colors.left = 'orange';\n  if (x === 1) colors.right = 'red';\n  if (y === -1) colors.bottom = 'green';\n  if (y === 1) colors.top = 'blue';\n  if (z === -1) colors.back = 'yellow';\n  if (z === 1) colors.front = 'white';\n  return colors;\n}\n\n// Custom hook for cube state management\nfunction useCubeState() {\n  _s2();\n  const [cubeState, setCubeState] = useState(() => {\n    const state = [];\n\n    // Create 26 pieces (3x3x3 minus center)\n    for (let x = -1; x <= 1; x++) {\n      for (let y = -1; y <= 1; y++) {\n        for (let z = -1; z <= 1; z++) {\n          // Skip the center piece\n          if (x === 0 && y === 0 && z === 0) continue;\n\n          // Get pieceId based on position in solved state\n          const pieceId = state.length;\n\n          // Get original colors for this piece\n          const colors = getOriginalColors(pieceId);\n\n          // Debug logging for initial state\n          console.log(`Initial piece ${pieceId} at [${x}, ${y}, ${z}]:`, colors);\n          state.push({\n            position: [x, y, z],\n            colors,\n            rotationHistory: [],\n            // Track all rotations this piece has undergone\n            pieceId: pieceId // Store the pieceId for reference\n          });\n        }\n      }\n    }\n\n    // Log the complete initial cube state as JSON\n    console.log('🎯 INITIAL CUBE STATE (End of Initial Load):');\n    console.log(JSON.stringify(state, null, 2));\n\n    // Also log to terminal (this will show in the terminal where npm start is running)\n    logToTerminal('INITIAL CUBE STATE (End of Initial Load)', state);\n    return state;\n  });\n  const [isAnimating, setIsAnimating] = useState(false);\n\n  // Consolidated rotation logic\n  const applyRotation = useCallback((pieces, face, direction) => {\n    pieces.forEach(piece => {\n      const [x, y, z] = piece.position;\n      let newX = x,\n        newY = y,\n        newZ = z;\n      // Apply 3D transformation\n      switch (face) {\n        case 'F':\n          // Front face rotation (Z+ plane)\n          if (z === 1) {\n            // Only pieces on the front face\n            if (direction === 'clockwise') {\n              newX = -y;\n              newY = x;\n            } else {\n              newX = y;\n              newY = -x;\n            }\n          }\n          break;\n        case 'B':\n          // Back face rotation (Z- plane)\n          if (z === -1) {\n            // Only pieces on the back face\n            if (direction === 'clockwise') {\n              newX = y;\n              newY = -x;\n            } else {\n              newX = -y;\n              newY = x;\n            }\n          }\n          break;\n        case 'R':\n          // Right face rotation (X+ plane)\n          if (x === 1) {\n            // Only pieces on the right face\n            if (direction === 'clockwise') {\n              newY = -z;\n              newZ = y;\n            } else {\n              newY = z;\n              newZ = -y;\n            }\n          }\n          break;\n        case 'L':\n          // Left face rotation (X- plane)\n          if (x === -1) {\n            // Only pieces on the left face\n            if (direction === 'clockwise') {\n              newY = z;\n              newZ = -y;\n            } else {\n              newY = -z;\n              newZ = y;\n            }\n          }\n          break;\n        case 'U':\n          // Up face rotation (Y+ plane)\n          if (y === 1) {\n            // Only pieces on the top face\n            if (direction === 'clockwise') {\n              newX = -z;\n              newZ = x;\n            } else {\n              newX = z;\n              newZ = -x;\n            }\n          }\n          break;\n        case 'D':\n          // Down face rotation (Y- plane)\n          if (y === -1) {\n            // Only pieces on the bottom face\n            if (direction === 'clockwise') {\n              newX = z;\n              newZ = -x;\n            } else {\n              newX = -z;\n              newZ = x;\n            }\n          }\n          break;\n      }\n\n      // Only apply changes if the piece actually moved\n      const positionChanged = x !== newX || y !== newY || z !== newZ;\n      if (positionChanged) {\n        // Update position\n        piece.position = [newX, newY, newZ];\n\n        // Rotate the colors to match the piece's new orientation\n        const newColors = {\n          ...piece.colors\n        };\n\n        // Apply color rotation based on the face rotation\n        switch (face) {\n          case 'F':\n            // Front face rotation\n            if (direction === 'clockwise') {\n              // Colors rotate: top -> right, right -> bottom, bottom -> left, left -> top\n              const temp = newColors.top;\n              newColors.top = newColors.left;\n              newColors.left = newColors.bottom;\n              newColors.bottom = newColors.right;\n              newColors.right = temp;\n            } else {\n              // Colors rotate: top -> left, left -> bottom, bottom -> right, right -> top\n              const temp = newColors.top;\n              newColors.top = newColors.right;\n              newColors.right = newColors.bottom;\n              newColors.bottom = newColors.left;\n              newColors.left = temp;\n            }\n            break;\n          case 'B':\n            // Back face rotation\n            if (direction === 'clockwise') {\n              // Colors rotate: top -> left, left -> bottom, bottom -> right, right -> top\n              const temp = newColors.top;\n              newColors.top = newColors.right;\n              newColors.right = newColors.bottom;\n              newColors.bottom = newColors.left;\n              newColors.left = temp;\n            } else {\n              // Colors rotate: top -> right, right -> bottom, bottom -> left, left -> top\n              const temp = newColors.top;\n              newColors.top = newColors.left;\n              newColors.left = newColors.bottom;\n              newColors.bottom = newColors.right;\n              newColors.right = temp;\n            }\n            break;\n          case 'R':\n            // Right face rotation\n            if (direction === 'clockwise') {\n              // Colors rotate: top -> back, back -> bottom, bottom -> front, front -> top\n              const temp = newColors.top;\n              newColors.top = newColors.front;\n              newColors.front = newColors.bottom;\n              newColors.bottom = newColors.back;\n              newColors.back = temp;\n            } else {\n              // Colors rotate: top -> front, front -> bottom, bottom -> back, back -> top\n              const temp = newColors.top;\n              newColors.top = newColors.back;\n              newColors.back = newColors.bottom;\n              newColors.bottom = newColors.front;\n              newColors.front = temp;\n            }\n            break;\n          case 'L':\n            // Left face rotation\n            if (direction === 'clockwise') {\n              // Colors rotate: top -> front, front -> bottom, bottom -> back, back -> top\n              const temp = newColors.top;\n              newColors.top = newColors.back;\n              newColors.back = newColors.bottom;\n              newColors.bottom = newColors.front;\n              newColors.front = temp;\n            } else {\n              // Colors rotate: top -> back, back -> bottom, bottom -> front, front -> top\n              const temp = newColors.top;\n              newColors.top = newColors.front;\n              newColors.front = newColors.bottom;\n              newColors.bottom = newColors.back;\n              newColors.back = temp;\n            }\n            break;\n          case 'U':\n            // Up face rotation\n            if (direction === 'clockwise') {\n              // Colors rotate: front -> right, right -> back, back -> left, left -> front\n              const temp = newColors.front;\n              newColors.front = newColors.left;\n              newColors.left = newColors.back;\n              newColors.back = newColors.right;\n              newColors.right = temp;\n            } else {\n              // Colors rotate: front -> left, left -> back, back -> right, right -> front\n              const temp = newColors.front;\n              newColors.front = newColors.right;\n              newColors.right = newColors.back;\n              newColors.back = newColors.left;\n              newColors.left = temp;\n            }\n            break;\n          case 'D':\n            // Down face rotation\n            if (direction === 'clockwise') {\n              // Colors rotate: front -> left, left -> back, back -> right, right -> front\n              const temp = newColors.front;\n              newColors.front = newColors.right;\n              newColors.right = newColors.back;\n              newColors.back = newColors.left;\n              newColors.left = temp;\n            } else {\n              // Colors rotate: front -> right, right -> back, back -> left, left -> front\n              const temp = newColors.front;\n              newColors.front = newColors.left;\n              newColors.left = newColors.back;\n              newColors.back = newColors.right;\n              newColors.right = temp;\n            }\n            break;\n        }\n\n        // Update the piece's colors (maintain original colors, just rotate them)\n        piece.colors = newColors;\n        piece.rotationHistory.push({\n          move: face,\n          direction: direction,\n          fromPosition: [x, y, z],\n          toPosition: [newX, newY, newZ],\n          timestamp: new Date().toISOString()\n        });\n      }\n    });\n  }, []);\n\n  // Rotate a face of the cube\n  const rotateFace = useCallback((face, direction) => {\n    if (isAnimating) return;\n    setIsAnimating(true);\n    setCubeState(prevState => {\n      const newState = [...prevState];\n      const pieces = newState.map((piece, index) => ({\n        ...piece,\n        pieceId: index\n      }));\n\n      // Apply rotation using consolidated logic\n      applyRotation(pieces, face, direction);\n\n      // Update the newState with the modified pieces\n      pieces.forEach((piece, index) => {\n        newState[index] = {\n          position: piece.position,\n          colors: piece.colors,\n          rotationHistory: piece.rotationHistory\n        };\n      });\n      return newState;\n    });\n\n    // Reset animation state after a short delay\n    setTimeout(() => setIsAnimating(false), 100);\n  }, [isAnimating, applyRotation]);\n\n  // Execute scramble sequence\n  const executeScramble = useCallback(sequence => {\n    if (sequence.length === 0) {\n      setIsAnimating(false);\n\n      // Log the complete cube state as JSON at the end of scramble session\n      // We need to get the current state from the setter function\n      setCubeState(currentState => {\n        console.log('🎯 CUBE STATE AFTER SCRAMBLE (End of Scramble Session):');\n        console.log(JSON.stringify(currentState, null, 2));\n\n        // Also log to terminal (this will show in the terminal where npm start is running)\n        logToTerminal('CUBE STATE AFTER SCRAMBLE (End of Scramble Session)', currentState);\n        return currentState; // Return unchanged state\n      });\n      return;\n    }\n    const {\n      move,\n      direction\n    } = sequence[0];\n    console.log(`Executing move: ${move} ${direction}`);\n\n    // Apply the move using consolidated logic\n    setCubeState(prevState => {\n      const newState = [...prevState];\n      const pieces = newState.map((piece, index) => ({\n        ...piece,\n        pieceId: index\n      }));\n\n      // Apply rotation using consolidated logic\n      applyRotation(pieces, move, direction);\n\n      // Update the newState with the modified pieces\n      pieces.forEach((piece, index) => {\n        newState[index] = {\n          position: piece.position,\n          colors: piece.colors,\n          rotationHistory: piece.rotationHistory\n        };\n      });\n      return newState;\n    });\n\n    // Continue with next move after a short delay\n    setTimeout(() => executeScramble(sequence.slice(1)), 100);\n  }, [applyRotation]);\n\n  // Scramble the cube\n  const scramble = useCallback(() => {\n    if (isAnimating) return;\n    setIsAnimating(true);\n    const moves = ['F', 'B', 'R', 'L', 'U', 'D'];\n    const directions = ['clockwise', 'counterclockwise'];\n    const scrambleSequence = [];\n\n    // Generate 20 random moves\n    for (let i = 0; i < 20; i++) {\n      const move = moves[Math.floor(Math.random() * moves.length)];\n      const direction = directions[Math.floor(Math.random() * directions.length)];\n      scrambleSequence.push({\n        move,\n        direction\n      });\n    }\n    console.log('Scrambling with sequence:', scrambleSequence);\n\n    // Execute scramble moves\n    executeScramble(scrambleSequence);\n  }, [isAnimating, executeScramble]);\n\n  // Reset the cube to solved state\n  const reset = useCallback(() => {\n    setCubeState(() => {\n      const state = [];\n\n      // Create 26 pieces (3x3x3 minus center)\n      for (let x = -1; x <= 1; x++) {\n        for (let y = -1; y <= 1; y++) {\n          for (let z = -1; z <= 1; z++) {\n            // Skip the center piece\n            if (x === 0 && y === 0 && z === 0) continue;\n\n            // Get pieceId based on position in solved state\n            const pieceId = state.length;\n\n            // Get original colors for this piece\n            const colors = getOriginalColors(pieceId);\n\n            // Debug logging for reset state\n            console.log(`Reset piece ${pieceId} at [${x}, ${y}, ${z}]:`, colors);\n            state.push({\n              position: [x, y, z],\n              colors,\n              rotationHistory: [],\n              // Reset rotation history\n              pieceId: pieceId // Store the pieceId for reference\n            });\n          }\n        }\n      }\n      return state;\n    });\n  }, []);\n  return {\n    cubeState,\n    isAnimating,\n    rotateFace,\n    scramble,\n    reset\n  };\n}\n\n// Main cube group component with enhanced structure\n_s2(useCubeState, \"ibYB4bKAnf2ZNvON3n+UDYDilg8=\");\nfunction CubeGroup({\n  isRotating,\n  autoRotate = false,\n  onScramble,\n  onReset,\n  onCubeStateChange\n}) {\n  _s3();\n  const groupRef = useRef();\n  const [rotationSpeed] = useState({\n    x: 0.005,\n    y: 0.01\n  });\n  const {\n    cubeState,\n    isAnimating,\n    rotateFace,\n    scramble,\n    reset\n  } = useCubeState();\n\n  // Helper functions for enhanced debugging\n  const getShapeType = pieceId => {\n    const shapeTypes = ['Square', 'Square', 'Square', 'Square', 'Square', 'Circle', 'Circle', 'Circle', 'Circle', 'Circle', 'Triangle', 'Triangle', 'Triangle', 'Triangle', 'Diamond', 'Diamond', 'Diamond', 'Diamond', 'Diamond', 'Diamond', 'Square+White', 'Square+White', 'Square+White', 'Square+White', 'Square+White', 'Square+White'];\n    return shapeTypes[pieceId] || 'Unknown';\n  };\n  const getShapeColor = pieceId => {\n    const shapeColors = ['Red', 'Blue', 'Green', 'Orange', 'Purple', 'Red', 'Blue', 'Green', 'Orange', 'Yellow', 'Red', 'Blue', 'Green', 'Orange', 'Purple', 'Red', 'Blue', 'Green', 'Orange', 'Purple', 'Red', 'Blue', 'Green', 'Orange', 'Purple', 'Yellow'];\n    return shapeColors[pieceId] || 'Unknown';\n  };\n  const getExpectedPosition = pieceId => {\n    // Map pieceId to expected solved position\n    const positions = [];\n    for (let x = -1; x <= 1; x++) {\n      for (let y = -1; y <= 1; y++) {\n        for (let z = -1; z <= 1; z++) {\n          if (x === 0 && y === 0 && z === 0) continue;\n          positions.push([x, y, z]);\n        }\n      }\n    }\n    return positions[pieceId];\n  };\n  const getExpectedColorsForPosition = position => {\n    const [x, y, z] = position;\n    const expectedColors = {\n      front: 'black',\n      back: 'black',\n      right: 'black',\n      left: 'black',\n      top: 'black',\n      bottom: 'black'\n    };\n    if (x === -1) expectedColors.left = 'orange';\n    if (x === 1) expectedColors.right = 'red';\n    if (y === -1) expectedColors.bottom = 'green';\n    if (y === 1) expectedColors.top = 'blue';\n    if (z === -1) expectedColors.back = 'yellow';\n    if (z === 1) expectedColors.front = 'white';\n    return expectedColors;\n  };\n  const isPieceInCorrectPosition = (piece, pieceId) => {\n    // Check if piece is in its solved position\n    const [x, y, z] = piece.position;\n    const expectedPosition = getExpectedPosition(pieceId);\n    return x === expectedPosition[0] && y === expectedPosition[1] && z === expectedPosition[2];\n  };\n  const getColorMismatches = piece => {\n    // In a scrambled cube, there are no color mismatches based on position\n    // Colors should only be validated against the solved state, not current position\n    // This function is mainly for debugging and should not flag scrambled pieces as incorrect\n    return [];\n  };\n  const getVisibleFaces = position => {\n    const [x, y, z] = position;\n    const visibleFaces = [];\n    if (x === 1) visibleFaces.push('right');\n    if (x === -1) visibleFaces.push('left');\n    if (y === 1) visibleFaces.push('top');\n    if (y === -1) visibleFaces.push('bottom');\n    if (z === 1) visibleFaces.push('front');\n    if (z === -1) visibleFaces.push('back');\n    return visibleFaces;\n  };\n  const getVisibleColors = piece => {\n    const visibleFaces = getVisibleFaces(piece.position);\n    return visibleFaces.map(face => ({\n      face,\n      color: piece.colors[face]\n    }));\n  };\n  const isCubeSolved = state => {\n    return state.every((piece, index) => isPieceInCorrectPosition(piece, index));\n  };\n\n  // Expose functions to parent\n  React.useEffect(() => {\n    if (onScramble) onScramble(scramble);\n    if (onReset) onReset(reset);\n  }, [onScramble, onReset, scramble, reset]);\n\n  // Notify parent of cube state changes with enhanced debugging info\n  React.useEffect(() => {\n    if (onCubeStateChange && cubeState) {\n      console.log('🔍 Cube state changed, pieces count:', cubeState.length);\n      console.log('🔍 First few pieces:', cubeState.slice(0, 3));\n\n      // Create enhanced cube state with debugging information\n      const enhancedCubeState = {\n        timestamp: new Date().toISOString(),\n        totalPieces: cubeState.length,\n        pieces: cubeState.map((piece, index) => ({\n          pieceId: index,\n          position: piece.position,\n          colors: piece.colors,\n          rotationHistory: piece.rotationHistory,\n          shapeType: getShapeType(index),\n          shapeColor: getShapeColor(index),\n          // Validation data\n          validation: {\n            isInCorrectPosition: isPieceInCorrectPosition(piece, index),\n            expectedColors: getExpectedColorsForPosition(piece.position),\n            colorMismatches: getColorMismatches(piece),\n            visibleFaces: getVisibleFaces(piece.position),\n            visibleColors: getVisibleColors(piece)\n          },\n          // Debugging helpers\n          debug: {\n            positionString: `[${piece.position.join(', ')}]`,\n            colorSummary: Object.entries(piece.colors).filter(([_, color]) => color !== 'black').map(([face, color]) => `${face}:${color}`).join(', '),\n            moveCount: piece.rotationHistory.length,\n            lastMove: piece.rotationHistory[piece.rotationHistory.length - 1] || null\n          }\n        })),\n        // Global validation\n        validation: {\n          isSolved: isCubeSolved(cubeState),\n          totalMoves: cubeState.reduce((sum, piece) => sum + piece.rotationHistory.length, 0),\n          piecesInCorrectPosition: cubeState.filter((piece, index) => isPieceInCorrectPosition(piece, index)).length,\n          piecesWithColorMismatches: 0,\n          // No color mismatches in scrambled state\n          isScrambled: !isCubeSolved(cubeState) && cubeState.some(piece => piece.rotationHistory.length > 0)\n        },\n        // Metadata\n        metadata: {\n          version: \"1.0.0\",\n          exportReason: \"debugging\",\n          cubeType: \"3x3x3\",\n          coordinateSystem: \"right-handed (X-right, Y-up, Z-front)\",\n          faceMapping: {\n            front: \"Z+ (white)\",\n            back: \"Z- (yellow)\",\n            right: \"X+ (red)\",\n            left: \"X- (orange)\",\n            top: \"Y+ (blue)\",\n            bottom: \"Y- (green)\"\n          },\n          shapeMapping: {\n            \"0-4\": \"Squares (Red, Blue, Green, Orange, Purple)\",\n            \"5-9\": \"Circles (Red, Blue, Green, Orange, Purple)\",\n            \"10-14\": \"Triangles (Red, Blue, Green, Orange, Purple)\",\n            \"15-19\": \"Diamonds (Red, Blue, Green, Orange, Purple)\",\n            \"20-25\": \"Squares+White (Red, Blue, Green, Orange, Purple, Cyan)\"\n          }\n        }\n      };\n      onCubeStateChange(enhancedCubeState);\n    }\n  }, [onCubeStateChange, cubeState]);\n\n  // Auto-rotation animation\n  useFrame(() => {\n    if (groupRef.current && isRotating && !isAnimating) {\n      groupRef.current.rotation.x += rotationSpeed.x;\n      groupRef.current.rotation.y += rotationSpeed.y;\n    }\n  });\n  return /*#__PURE__*/_jsxDEV(\"group\", {\n    ref: groupRef,\n    children: cubeState.map((piece, index) => /*#__PURE__*/_jsxDEV(CubePiece, {\n      position: piece.position,\n      colors: piece.colors,\n      pieceId: index\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 889,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 887,\n    columnNumber: 5\n  }, this);\n}\n\n// Main Rubik's Cube component\n_s3(CubeGroup, \"2oHALDq6xB5terhhYED4Ni/ni6E=\", false, function () {\n  return [useCubeState, useFrame];\n});\n_c2 = CubeGroup;\nfunction RubiksCube({\n  isRotating,\n  autoRotate = false,\n  onScramble,\n  onReset,\n  onCubeStateChange\n}) {\n  _s4();\n  const groupRef = useRef();\n  const [rotationSpeed] = useState({\n    x: 0.005,\n    y: 0.01\n  });\n  const {\n    cubeState,\n    isAnimating,\n    rotateFace,\n    scramble,\n    reset\n  } = useCubeState();\n\n  // Expose functions to parent\n  React.useEffect(() => {\n    if (onScramble) onScramble(scramble);\n    if (onReset) onReset(reset);\n  }, [onScramble, onReset, scramble, reset]);\n\n  // Notify parent of cube state changes\n  React.useEffect(() => {\n    if (onCubeStateChange && cubeState) {\n      onCubeStateChange(cubeState);\n    }\n  }, [onCubeStateChange, cubeState]);\n  return /*#__PURE__*/_jsxDEV(Canvas, {\n    camera: {\n      position: [5, 5, 5],\n      fov: 50\n    },\n    style: {\n      width: '100%',\n      height: '100%'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"ambientLight\", {\n      intensity: 0.8\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 926,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"directionalLight\", {\n      position: [10, 10, 5],\n      intensity: 2.0\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 927,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"pointLight\", {\n      position: [10, 10, 10],\n      intensity: 1.5\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 928,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"pointLight\", {\n      position: [-10, -10, -10],\n      intensity: 1.5\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 929,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"spotLight\", {\n      position: [0, 10, 0],\n      angle: 0.3,\n      penumbra: 1,\n      intensity: 1.5,\n      castShadow: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 930,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Environment, {\n      preset: \"sunset\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 939,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CubeGroup, {\n      isRotating: isRotating,\n      autoRotate: autoRotate,\n      onScramble: onScramble,\n      onReset: onReset,\n      onCubeStateChange: onCubeStateChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 941,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(OrbitControls, {\n      enablePan: true,\n      enableZoom: true,\n      enableRotate: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 949,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 921,\n    columnNumber: 5\n  }, this);\n}\n_s4(RubiksCube, \"HcLxV/bLuK+tNQUAdGS2fDotHno=\", false, function () {\n  return [useCubeState];\n});\n_c3 = RubiksCube;\nexport default RubiksCube;\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"CubePiece\");\n$RefreshReg$(_c2, \"CubeGroup\");\n$RefreshReg$(_c3, \"RubiksCube\");","map":{"version":3,"names":["React","useState","useRef","useMemo","useCallback","useEffect","Canvas","useFrame","OrbitControls","Environment","THREE","jsxDEV","_jsxDEV","logToTerminal","message","data","console","log","JSON","stringify","repeat","fetch","method","headers","body","then","response","ok","Error","status","catch","error","createShape","pieceId","size","shapes","position","children","args","fileName","_jsxFileName","lineNumber","columnNumber","color","rotation","Math","PI","shapeIndex","CubePiece","colors","_s","meshRef","shapeTypes","shapeColors","shapeType","shapeColor","join","x","y","z","visibleFaces","push","map","face","colorMap","cubeGeometry","BoxGeometry","faceGeometry","geometry","PlaneGeometry","getFaceColor","faceIndex","faceColor","front","back","right","left","top","bottom","includes","faceNames","facePosition","faceRotation","side","FrontSide","emissive","emissiveIntensity","_c","getOriginalColors","positions","originalPosition","useCubeState","_s2","cubeState","setCubeState","state","length","rotationHistory","isAnimating","setIsAnimating","applyRotation","pieces","direction","forEach","piece","newX","newY","newZ","positionChanged","newColors","temp","move","fromPosition","toPosition","timestamp","Date","toISOString","rotateFace","prevState","newState","index","setTimeout","executeScramble","sequence","currentState","slice","scramble","moves","directions","scrambleSequence","i","floor","random","reset","CubeGroup","isRotating","autoRotate","onScramble","onReset","onCubeStateChange","_s3","groupRef","rotationSpeed","getShapeType","getShapeColor","getExpectedPosition","getExpectedColorsForPosition","expectedColors","isPieceInCorrectPosition","expectedPosition","getColorMismatches","getVisibleFaces","getVisibleColors","isCubeSolved","every","enhancedCubeState","totalPieces","validation","isInCorrectPosition","colorMismatches","visibleColors","debug","positionString","colorSummary","Object","entries","filter","_","moveCount","lastMove","isSolved","totalMoves","reduce","sum","piecesInCorrectPosition","piecesWithColorMismatches","isScrambled","some","metadata","version","exportReason","cubeType","coordinateSystem","faceMapping","shapeMapping","current","ref","_c2","RubiksCube","_s4","camera","fov","style","width","height","intensity","angle","penumbra","castShadow","preset","enablePan","enableZoom","enableRotate","_c3","$RefreshReg$"],"sources":["C:/Repo/GitHub/rubiks-cube/src/components/RubiksCube.js"],"sourcesContent":["import React, { useState, useRef, useMemo, useCallback, useEffect } from 'react';\r\nimport { Canvas, useFrame } from '@react-three/fiber';\r\nimport { OrbitControls, Environment } from '@react-three/drei';\r\nimport * as THREE from 'three';\r\n\r\n// Custom logging function that will be visible in terminal\r\nconst logToTerminal = (message, data = null) => {\r\n  // Log to browser console\r\n  console.log(`\\n🎯 ${message}`);\r\n  if (data) {\r\n    console.log(JSON.stringify(data, null, 2));\r\n  }\r\n  console.log('='.repeat(80) + '\\n');\r\n  \r\n  // Send to log server to print in terminal\r\n  fetch('http://localhost:3001/log', {\r\n    method: 'POST',\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n    },\r\n    body: JSON.stringify({\r\n      message: message,\r\n      data: data\r\n    })\r\n  })\r\n  .then(response => {\r\n    if (!response.ok) {\r\n      throw new Error(`HTTP error! status: ${response.status}`);\r\n    }\r\n    console.log('✅ Log sent to terminal successfully');\r\n  })\r\n  .catch(error => {\r\n    console.error('❌ Could not send log to terminal server:', error);\r\n    console.log('💡 Make sure the log server is running with: npm run log-server');\r\n  });\r\n};\r\n\r\n// Function to create unique shapes for each piece\r\nfunction createShape(pieceId, size) {\r\n  const shapes = [\r\n    // 0-4: Basic geometric shapes (Squares)\r\n    () => <mesh position={[0, 0, 0.012]}><planeGeometry args={[size, size]} /><meshBasicMaterial color=\"red\" /></mesh>, // Square\r\n    () => <mesh position={[0, 0, 0.012]}><planeGeometry args={[size, size]} /><meshBasicMaterial color=\"blue\" /></mesh>, // Square\r\n    () => <mesh position={[0, 0, 0.012]}><planeGeometry args={[size, size]} /><meshBasicMaterial color=\"green\" /></mesh>, // Square\r\n    () => <mesh position={[0, 0, 0.012]}><planeGeometry args={[size, size]} /><meshBasicMaterial color=\"orange\" /></mesh>, // Square\r\n    () => <mesh position={[0, 0, 0.012]}><planeGeometry args={[size, size]} /><meshBasicMaterial color=\"purple\" /></mesh>, // Square\r\n\r\n    // 5-9: Circles\r\n    () => <mesh position={[0, 0, 0.012]}><circleGeometry args={[size/2, 32]} /><meshBasicMaterial color=\"red\" /></mesh>, // Circle\r\n    () => <mesh position={[0, 0, 0.012]}><circleGeometry args={[size/2, 32]} /><meshBasicMaterial color=\"blue\" /></mesh>, // Circle\r\n    () => <mesh position={[0, 0, 0.012]}><circleGeometry args={[size/2, 32]} /><meshBasicMaterial color=\"green\" /></mesh>, // Circle\r\n    () => <mesh position={[0, 0, 0.012]}><circleGeometry args={[size/2, 32]} /><meshBasicMaterial color=\"orange\" /></mesh>, // Circle\r\n    () => <mesh position={[0, 0, 0.012]}><circleGeometry args={[size/2, 32]} /><meshBasicMaterial color=\"yellow\" /></mesh>, // Circle\r\n\r\n    // 10-14: Triangles (using planeGeometry for now, ideally custom geometry)\r\n    () => <mesh position={[0, 0, 0.012]}><planeGeometry args={[size, size]} /><meshBasicMaterial color=\"red\" /></mesh>, // Triangle\r\n    () => <mesh position={[0, 0, 0.012]}><planeGeometry args={[size, size]} /><meshBasicMaterial color=\"blue\" /></mesh>, // Triangle\r\n    () => <mesh position={[0, 0, 0.012]}><planeGeometry args={[size, size]} /><meshBasicMaterial color=\"green\" /></mesh>, // Triangle\r\n    () => <mesh position={[0, 0, 0.012]}><planeGeometry args={[size, size]} /><meshBasicMaterial color=\"orange\" /></mesh>, // Triangle\r\n    () => <mesh position={[0, 0, 0.012]}><planeGeometry args={[size, size]} /><meshBasicMaterial color=\"purple\" /></mesh>, // Triangle\r\n\r\n    // 15-19: Diamonds (rotated squares)\r\n    () => <group position={[0, 0, 0.012]}><mesh rotation={[0, 0, Math.PI/4]}><planeGeometry args={[size, size]} /><meshBasicMaterial color=\"red\" /></mesh></group>, // Diamond\r\n    () => <group position={[0, 0, 0.012]}><mesh rotation={[0, 0, Math.PI/4]}><planeGeometry args={[size, size]} /><meshBasicMaterial color=\"blue\" /></mesh></group>, // Diamond\r\n    () => <group position={[0, 0, 0.012]}><mesh rotation={[0, 0, Math.PI/4]}><planeGeometry args={[size, size]} /><meshBasicMaterial color=\"green\" /></mesh></group>, // Diamond\r\n    () => <group position={[0, 0, 0.012]}><mesh rotation={[0, 0, Math.PI/4]}><planeGeometry args={[size, size]} /><meshBasicMaterial color=\"orange\" /></mesh></group>, // Diamond\r\n    () => <group position={[0, 0, 0.012]}><mesh rotation={[0, 0, Math.PI/4]}><planeGeometry args={[size, size]} /><meshBasicMaterial color=\"purple\" /></mesh></group>, // Diamond\r\n\r\n    // 20-25: Complex patterns (Squares with white centers)\r\n    () => <group position={[0, 0, 0.012]}><mesh><planeGeometry args={[size, size]} /><meshBasicMaterial color=\"red\" /></mesh><mesh position={[0, 0, 0.001]}><planeGeometry args={[size*0.5, size*0.5]} /><meshBasicMaterial color=\"white\" /></mesh></group>, // Square with white center\r\n    () => <group position={[0, 0, 0.012]}><mesh><planeGeometry args={[size, size]} /><meshBasicMaterial color=\"blue\" /></mesh><mesh position={[0, 0, 0.001]}><planeGeometry args={[size*0.5, size*0.5]} /><meshBasicMaterial color=\"white\" /></mesh></group>, // Square with white center\r\n    () => <group position={[0, 0, 0.012]}><mesh><planeGeometry args={[size, size]} /><meshBasicMaterial color=\"green\" /></mesh><mesh position={[0, 0, 0.001]}><planeGeometry args={[size*0.5, size*0.5]} /><meshBasicMaterial color=\"white\" /></mesh></group>, // Square with white center\r\n    () => <group position={[0, 0, 0.012]}><mesh><planeGeometry args={[size, size]} /><meshBasicMaterial color=\"orange\" /></mesh><mesh position={[0, 0, 0.001]}><planeGeometry args={[size*0.5, size*0.5]} /><meshBasicMaterial color=\"white\" /></mesh></group>, // Square with white center\r\n    () => <group position={[0, 0, 0.012]}><mesh><planeGeometry args={[size, size]} /><meshBasicMaterial color=\"purple\" /></mesh><mesh position={[0, 0, 0.001]}><planeGeometry args={[size*0.5, size*0.5]} /><meshBasicMaterial color=\"white\" /></mesh></group>, // Square with white center\r\n    () => <group position={[0, 0, 0.012]}><mesh><planeGeometry args={[size, size]} /><meshBasicMaterial color=\"yellow\" /></mesh><mesh position={[0, 0, 0.001]}><planeGeometry args={[size*0.5, size*0.5]} /><meshBasicMaterial color=\"white\" /></mesh></group> // Square with white center\r\n  ];\r\n  \r\n  const shapeIndex = pieceId; // Changed from pieceId % shapes.length\r\n  return shapes[shapeIndex]();\r\n}\r\n\r\n// Individual cube piece component\r\nfunction CubePiece({ position, colors, size = 0.95, pieceId = 0 }) {\r\n  const meshRef = useRef();\r\n  \r\n  // Log piece information for debugging\r\n  React.useEffect(() => {\r\n    const shapeTypes = ['Square', 'Square', 'Square', 'Square', 'Square', 'Circle', 'Circle', 'Circle', 'Circle', 'Circle', 'Triangle', 'Triangle', 'Triangle', 'Triangle', 'Triangle', 'Diamond', 'Diamond', 'Diamond', 'Diamond', 'Diamond', 'Square+White', 'Square+White', 'Square+White', 'Square+White', 'Square+White', 'Square+White'];\r\n    const shapeColors = ['Red', 'Blue', 'Green', 'Orange', 'Purple', 'Red', 'Blue', 'Green', 'Orange', 'Purple', 'Red', 'Blue', 'Green', 'Orange', 'Purple', 'Red', 'Blue', 'Green', 'Orange', 'Purple', 'Red', 'Blue', 'Green', 'Orange', 'Purple', 'Cyan'];\r\n    \r\n    const shapeType = shapeTypes[pieceId] || 'Unknown'; // Changed from pieceId % shapeTypes.length\r\n    const shapeColor = shapeColors[pieceId] || 'Unknown'; // Changed from pieceId % shapeColors.length\r\n    \r\n    // Debug specific pieces only\r\n    if (pieceId === 0 || pieceId === 17 || pieceId === 25 || pieceId === 1 || pieceId === 11) {\r\n      console.log(`🔍 ${shapeColor} ${shapeType} Piece ${pieceId} at position [${position.join(', ')}]`);\r\n      console.log(`  Stored Colors:`, colors);\r\n      \r\n      // Show what colors should be visible based on position\r\n      const [x, y, z] = position;\r\n      const visibleFaces = [];\r\n      if (x === 1) visibleFaces.push('right');\r\n      if (x === -1) visibleFaces.push('left');\r\n      if (y === 1) visibleFaces.push('top');\r\n      if (y === -1) visibleFaces.push('bottom');\r\n      if (z === 1) visibleFaces.push('front');\r\n      if (z === -1) visibleFaces.push('back');\r\n      \r\n      console.log(`  Visible faces:`, visibleFaces);\r\n      console.log(`  Colors on visible faces:`, visibleFaces.map(face => `${face}: ${colors[face]}`));\r\n    }\r\n  }, [pieceId, position, colors]);\r\n\r\n  // Color mapping\r\n  const colorMap = {\r\n    'white': '#FFFFFF',\r\n    'yellow': '#FFD700',\r\n    'red': '#FF0000',\r\n    'orange': '#FFA500',\r\n    'blue': '#0000FF',\r\n    'green': '#00FF00',\r\n    'black': '#000000'\r\n  };\r\n\r\n  // Create cube geometry\r\n  const cubeGeometry = useMemo(() => new THREE.BoxGeometry(size, size, size), [size]);\r\n  \r\n  // Create face geometry\r\n  const faceGeometry = useMemo(() => {\r\n    const geometry = new THREE.PlaneGeometry(size, size);\r\n    return geometry;\r\n  }, [size]);\r\n\r\n  // Get the color for a face based on the face index and position\r\n  const getFaceColor = (faceIndex) => {\r\n    const [x, y, z] = position;\r\n    \r\n    // Map face index to color property\r\n    let faceColor;\r\n    switch (faceIndex) {\r\n      case 0: faceColor = colors.front; break;  // Front face\r\n      case 1: faceColor = colors.back; break;   // Back face\r\n      case 2: faceColor = colors.right; break;  // Right face\r\n      case 3: faceColor = colors.left; break;   // Left face\r\n      case 4: faceColor = colors.top; break;    // Top face\r\n      case 5: faceColor = colors.bottom; break; // Bottom face\r\n      default: faceColor = 'black';\r\n    }\r\n    \r\n    // Determine which faces are visible based on current position\r\n    const visibleFaces = [];\r\n    if (x === 1) visibleFaces.push(2); // Right face visible\r\n    if (x === -1) visibleFaces.push(3); // Left face visible\r\n    if (y === 1) visibleFaces.push(4); // Top face visible\r\n    if (y === -1) visibleFaces.push(5); // Bottom face visible\r\n    if (z === 1) visibleFaces.push(0); // Front face visible\r\n    if (z === -1) visibleFaces.push(1); // Back face visible\r\n    \r\n    // If this face is not visible from current position, return black\r\n    if (!visibleFaces.includes(faceIndex)) {\r\n      return 'black';\r\n    }\r\n    \r\n    // Debug logging for specific pieces\r\n    if (pieceId === 2 || pieceId === 11 || pieceId === 16 || pieceId === 19 || pieceId === 22 || pieceId === 25) {\r\n      const faceNames = ['front', 'back', 'right', 'left', 'top', 'bottom'];\r\n      console.log(`🎨 Piece ${pieceId} face ${faceNames[faceIndex]} (${faceIndex}) at [${x},${y},${z}]: ${faceColor} (visible: ${visibleFaces.includes(faceIndex)})`);\r\n    }\r\n    \r\n    return faceColor;\r\n  };\r\n\r\n  return (\r\n    <group position={position}>\r\n      {/* Solid cube base */}\r\n      <mesh geometry={cubeGeometry}>\r\n        <meshPhongMaterial color=\"#333333\" />\r\n      </mesh>\r\n      \r\n      {/* Colored faces */}\r\n      {[0, 1, 2, 3, 4, 5].map((faceIndex) => {\r\n        const faceColor = getFaceColor(faceIndex);\r\n        \r\n        // Define face positions and rotations correctly\r\n        let facePosition, faceRotation;\r\n        \r\n        switch (faceIndex) {\r\n          case 0: // Front face (Z+)\r\n            facePosition = [0, 0, size/2 + 0.001];\r\n            faceRotation = [0, 0, 0];\r\n            break;\r\n          case 1: // Back face (Z-)\r\n            facePosition = [0, 0, -size/2 - 0.001];\r\n            faceRotation = [0, Math.PI, 0];\r\n            break;\r\n          case 2: // Right face (X+)\r\n            facePosition = [size/2 + 0.001, 0, 0];\r\n            faceRotation = [0, Math.PI/2, 0];\r\n            break;\r\n          case 3: // Left face (X-)\r\n            facePosition = [-size/2 - 0.001, 0, 0];\r\n            faceRotation = [0, -Math.PI/2, 0];\r\n            break;\r\n          case 4: // Top face (Y+)\r\n            facePosition = [0, size/2 + 0.001, 0];\r\n            faceRotation = [-Math.PI/2, 0, 0];\r\n            break;\r\n          case 5: // Bottom face (Y-)\r\n            facePosition = [0, -size/2 - 0.001, 0];\r\n            faceRotation = [Math.PI/2, 0, 0];\r\n            break;\r\n          default:\r\n            facePosition = [0, 0, 0];\r\n            faceRotation = [0, 0, 0];\r\n        }\r\n        \r\n        return (\r\n          <mesh\r\n            key={faceIndex}\r\n            position={facePosition}\r\n            rotation={faceRotation}\r\n            geometry={faceGeometry}\r\n          >\r\n            <meshPhongMaterial \r\n              color={colorMap[faceColor] || '#000000'} \r\n              side={THREE.FrontSide}\r\n              emissive={colorMap[faceColor] || '#000000'}\r\n              emissiveIntensity={0.3}\r\n            />\r\n          </mesh>\r\n        );\r\n      })}\r\n      \r\n      {/* Debug shape on all faces */}\r\n      {[0, 1, 2, 3, 4, 5].map((faceIndex) => {\r\n        // Define face positions and rotations correctly (same as colored faces)\r\n        let facePosition, faceRotation;\r\n        \r\n        switch (faceIndex) {\r\n          case 0: // Front face (Z+)\r\n            facePosition = [0, 0, size/2 + 0.002];\r\n            faceRotation = [0, 0, 0];\r\n            break;\r\n          case 1: // Back face (Z-)\r\n            facePosition = [0, 0, -size/2 - 0.002];\r\n            faceRotation = [0, Math.PI, 0];\r\n            break;\r\n          case 2: // Right face (X+)\r\n            facePosition = [size/2 + 0.002, 0, 0];\r\n            faceRotation = [0, Math.PI/2, 0];\r\n            break;\r\n          case 3: // Left face (X-)\r\n            facePosition = [-size/2 - 0.002, 0, 0];\r\n            faceRotation = [0, -Math.PI/2, 0];\r\n            break;\r\n          case 4: // Top face (Y+)\r\n            facePosition = [0, size/2 + 0.002, 0];\r\n            faceRotation = [-Math.PI/2, 0, 0];\r\n            break;\r\n          case 5: // Bottom face (Y-)\r\n            facePosition = [0, -size/2 - 0.002, 0];\r\n            faceRotation = [Math.PI/2, 0, 0];\r\n            break;\r\n          default:\r\n            facePosition = [0, 0, 0];\r\n            faceRotation = [0, 0, 0];\r\n        }\r\n        \r\n        return (\r\n          <group key={`shape-${faceIndex}`} position={facePosition} rotation={faceRotation}>\r\n            {createShape(pieceId, size * 0.3)}\r\n          </group>\r\n        );\r\n      })}\r\n    </group>\r\n  );\r\n}\r\n\r\n// Function to get the original solved colors for a piece based on its pieceId\r\nfunction getOriginalColors(pieceId) {\r\n  // Map pieceId to original solved position\r\n  const positions = [];\r\n  for (let x = -1; x <= 1; x++) {\r\n    for (let y = -1; y <= 1; y++) {\r\n      for (let z = -1; z <= 1; z++) {\r\n        if (x === 0 && y === 0 && z === 0) continue;\r\n        positions.push([x, y, z]);\r\n      }\r\n    }\r\n  }\r\n  \r\n  const originalPosition = positions[pieceId];\r\n  const [x, y, z] = originalPosition;\r\n  \r\n  // Assign colors based on original solved position\r\n  let colors = {\r\n    front: 'black',\r\n    back: 'black', \r\n    right: 'black',\r\n    left: 'black',\r\n    top: 'black',\r\n    bottom: 'black'\r\n  };\r\n  \r\n  // Only assign colors to faces that are visible (not internal) in solved state\r\n  if (x === -1) colors.left = 'orange';\r\n  if (x === 1) colors.right = 'red';\r\n  if (y === -1) colors.bottom = 'green';\r\n  if (y === 1) colors.top = 'blue';\r\n  if (z === -1) colors.back = 'yellow';\r\n  if (z === 1) colors.front = 'white';\r\n  \r\n  return colors;\r\n}\r\n\r\n// Custom hook for cube state management\r\nfunction useCubeState() {\r\n  const [cubeState, setCubeState] = useState(() => {\r\n    const state = [];\r\n    \r\n    // Create 26 pieces (3x3x3 minus center)\r\n    for (let x = -1; x <= 1; x++) {\r\n      for (let y = -1; y <= 1; y++) {\r\n        for (let z = -1; z <= 1; z++) {\r\n          // Skip the center piece\r\n          if (x === 0 && y === 0 && z === 0) continue;\r\n          \r\n          // Get pieceId based on position in solved state\r\n          const pieceId = state.length;\r\n          \r\n          // Get original colors for this piece\r\n          const colors = getOriginalColors(pieceId);\r\n          \r\n          // Debug logging for initial state\r\n          console.log(`Initial piece ${pieceId} at [${x}, ${y}, ${z}]:`, colors);\r\n          \r\n          state.push({ \r\n            position: [x, y, z], \r\n            colors,\r\n            rotationHistory: [], // Track all rotations this piece has undergone\r\n            pieceId: pieceId // Store the pieceId for reference\r\n          });\r\n        }\r\n      }\r\n    }\r\n    \r\n    // Log the complete initial cube state as JSON\r\n    console.log('🎯 INITIAL CUBE STATE (End of Initial Load):');\r\n    console.log(JSON.stringify(state, null, 2));\r\n    \r\n    // Also log to terminal (this will show in the terminal where npm start is running)\r\n    logToTerminal('INITIAL CUBE STATE (End of Initial Load)', state);\r\n    \r\n    return state;\r\n  });\r\n\r\n  const [isAnimating, setIsAnimating] = useState(false);\r\n\r\n  // Consolidated rotation logic\r\n  const applyRotation = useCallback((pieces, face, direction) => {\r\n    pieces.forEach(piece => {\r\n      const [x, y, z] = piece.position;\r\n      let newX = x, newY = y, newZ = z;\r\n      // Apply 3D transformation\r\n      switch (face) {\r\n        case 'F': // Front face rotation (Z+ plane)\r\n          if (z === 1) { // Only pieces on the front face\r\n            if (direction === 'clockwise') {\r\n              newX = -y;\r\n              newY = x;\r\n            } else {\r\n              newX = y;\r\n              newY = -x;\r\n            }\r\n          }\r\n          break;\r\n        case 'B': // Back face rotation (Z- plane)\r\n          if (z === -1) { // Only pieces on the back face\r\n            if (direction === 'clockwise') {\r\n              newX = y;\r\n              newY = -x;\r\n            } else {\r\n              newX = -y;\r\n              newY = x;\r\n            }\r\n          }\r\n          break;\r\n        case 'R': // Right face rotation (X+ plane)\r\n          if (x === 1) { // Only pieces on the right face\r\n            if (direction === 'clockwise') {\r\n              newY = -z;\r\n              newZ = y;\r\n            } else {\r\n              newY = z;\r\n              newZ = -y;\r\n            }\r\n          }\r\n          break;\r\n        case 'L': // Left face rotation (X- plane)\r\n          if (x === -1) { // Only pieces on the left face\r\n            if (direction === 'clockwise') {\r\n              newY = z;\r\n              newZ = -y;\r\n            } else {\r\n              newY = -z;\r\n              newZ = y;\r\n            }\r\n          }\r\n          break;\r\n        case 'U': // Up face rotation (Y+ plane)\r\n          if (y === 1) { // Only pieces on the top face\r\n            if (direction === 'clockwise') {\r\n              newX = -z;\r\n              newZ = x;\r\n            } else {\r\n              newX = z;\r\n              newZ = -x;\r\n            }\r\n          }\r\n          break;\r\n        case 'D': // Down face rotation (Y- plane)\r\n          if (y === -1) { // Only pieces on the bottom face\r\n            if (direction === 'clockwise') {\r\n              newX = z;\r\n              newZ = -x;\r\n            } else {\r\n              newX = -z;\r\n              newZ = x;\r\n            }\r\n          }\r\n          break;\r\n      }\r\n      \r\n      // Only apply changes if the piece actually moved\r\n      const positionChanged = (x !== newX || y !== newY || z !== newZ);\r\n      \r\n      if (positionChanged) {\r\n        // Update position\r\n        piece.position = [newX, newY, newZ];\r\n        \r\n        // Rotate the colors to match the piece's new orientation\r\n        const newColors = { ...piece.colors };\r\n        \r\n        // Apply color rotation based on the face rotation\r\n        switch (face) {\r\n          case 'F': // Front face rotation\r\n            if (direction === 'clockwise') {\r\n              // Colors rotate: top -> right, right -> bottom, bottom -> left, left -> top\r\n              const temp = newColors.top;\r\n              newColors.top = newColors.left;\r\n              newColors.left = newColors.bottom;\r\n              newColors.bottom = newColors.right;\r\n              newColors.right = temp;\r\n            } else {\r\n              // Colors rotate: top -> left, left -> bottom, bottom -> right, right -> top\r\n              const temp = newColors.top;\r\n              newColors.top = newColors.right;\r\n              newColors.right = newColors.bottom;\r\n              newColors.bottom = newColors.left;\r\n              newColors.left = temp;\r\n            }\r\n            break;\r\n          case 'B': // Back face rotation\r\n            if (direction === 'clockwise') {\r\n              // Colors rotate: top -> left, left -> bottom, bottom -> right, right -> top\r\n              const temp = newColors.top;\r\n              newColors.top = newColors.right;\r\n              newColors.right = newColors.bottom;\r\n              newColors.bottom = newColors.left;\r\n              newColors.left = temp;\r\n            } else {\r\n              // Colors rotate: top -> right, right -> bottom, bottom -> left, left -> top\r\n              const temp = newColors.top;\r\n              newColors.top = newColors.left;\r\n              newColors.left = newColors.bottom;\r\n              newColors.bottom = newColors.right;\r\n              newColors.right = temp;\r\n            }\r\n            break;\r\n          case 'R': // Right face rotation\r\n            if (direction === 'clockwise') {\r\n              // Colors rotate: top -> back, back -> bottom, bottom -> front, front -> top\r\n              const temp = newColors.top;\r\n              newColors.top = newColors.front;\r\n              newColors.front = newColors.bottom;\r\n              newColors.bottom = newColors.back;\r\n              newColors.back = temp;\r\n            } else {\r\n              // Colors rotate: top -> front, front -> bottom, bottom -> back, back -> top\r\n              const temp = newColors.top;\r\n              newColors.top = newColors.back;\r\n              newColors.back = newColors.bottom;\r\n              newColors.bottom = newColors.front;\r\n              newColors.front = temp;\r\n            }\r\n            break;\r\n          case 'L': // Left face rotation\r\n            if (direction === 'clockwise') {\r\n              // Colors rotate: top -> front, front -> bottom, bottom -> back, back -> top\r\n              const temp = newColors.top;\r\n              newColors.top = newColors.back;\r\n              newColors.back = newColors.bottom;\r\n              newColors.bottom = newColors.front;\r\n              newColors.front = temp;\r\n            } else {\r\n              // Colors rotate: top -> back, back -> bottom, bottom -> front, front -> top\r\n              const temp = newColors.top;\r\n              newColors.top = newColors.front;\r\n              newColors.front = newColors.bottom;\r\n              newColors.bottom = newColors.back;\r\n              newColors.back = temp;\r\n            }\r\n            break;\r\n          case 'U': // Up face rotation\r\n            if (direction === 'clockwise') {\r\n              // Colors rotate: front -> right, right -> back, back -> left, left -> front\r\n              const temp = newColors.front;\r\n              newColors.front = newColors.left;\r\n              newColors.left = newColors.back;\r\n              newColors.back = newColors.right;\r\n              newColors.right = temp;\r\n            } else {\r\n              // Colors rotate: front -> left, left -> back, back -> right, right -> front\r\n              const temp = newColors.front;\r\n              newColors.front = newColors.right;\r\n              newColors.right = newColors.back;\r\n              newColors.back = newColors.left;\r\n              newColors.left = temp;\r\n            }\r\n            break;\r\n          case 'D': // Down face rotation\r\n            if (direction === 'clockwise') {\r\n              // Colors rotate: front -> left, left -> back, back -> right, right -> front\r\n              const temp = newColors.front;\r\n              newColors.front = newColors.right;\r\n              newColors.right = newColors.back;\r\n              newColors.back = newColors.left;\r\n              newColors.left = temp;\r\n            } else {\r\n              // Colors rotate: front -> right, right -> back, back -> left, left -> front\r\n              const temp = newColors.front;\r\n              newColors.front = newColors.left;\r\n              newColors.left = newColors.back;\r\n              newColors.back = newColors.right;\r\n              newColors.right = temp;\r\n            }\r\n            break;\r\n        }\r\n        \r\n        // Update the piece's colors (maintain original colors, just rotate them)\r\n        piece.colors = newColors;\r\n        \r\n        piece.rotationHistory.push({\r\n          move: face,\r\n          direction: direction,\r\n          fromPosition: [x, y, z],\r\n          toPosition: [newX, newY, newZ],\r\n          timestamp: new Date().toISOString()\r\n        });\r\n      }\r\n    });\r\n  }, []);\r\n\r\n  // Rotate a face of the cube\r\n  const rotateFace = useCallback((face, direction) => {\r\n    if (isAnimating) return;\r\n    \r\n    setIsAnimating(true);\r\n    \r\n    setCubeState(prevState => {\r\n      const newState = [...prevState];\r\n      const pieces = newState.map((piece, index) => ({ ...piece, pieceId: index }));\r\n      \r\n      // Apply rotation using consolidated logic\r\n      applyRotation(pieces, face, direction);\r\n\r\n      // Update the newState with the modified pieces\r\n      pieces.forEach((piece, index) => {\r\n        newState[index] = {\r\n          position: piece.position,\r\n          colors: piece.colors,\r\n          rotationHistory: piece.rotationHistory\r\n        };\r\n      });\r\n      \r\n      return newState;\r\n    });\r\n    \r\n    // Reset animation state after a short delay\r\n    setTimeout(() => setIsAnimating(false), 100);\r\n  }, [isAnimating, applyRotation]);\r\n\r\n  // Execute scramble sequence\r\n  const executeScramble = useCallback((sequence) => {\r\n    if (sequence.length === 0) {\r\n      setIsAnimating(false);\r\n      \r\n      // Log the complete cube state as JSON at the end of scramble session\r\n      // We need to get the current state from the setter function\r\n      setCubeState(currentState => {\r\n        console.log('🎯 CUBE STATE AFTER SCRAMBLE (End of Scramble Session):');\r\n        console.log(JSON.stringify(currentState, null, 2));\r\n        \r\n        // Also log to terminal (this will show in the terminal where npm start is running)\r\n        logToTerminal('CUBE STATE AFTER SCRAMBLE (End of Scramble Session)', currentState);\r\n        \r\n        return currentState; // Return unchanged state\r\n      });\r\n      \r\n      return;\r\n    }\r\n    \r\n    const { move, direction } = sequence[0];\r\n    console.log(`Executing move: ${move} ${direction}`);\r\n    \r\n    // Apply the move using consolidated logic\r\n    setCubeState(prevState => {\r\n      const newState = [...prevState];\r\n      const pieces = newState.map((piece, index) => ({ ...piece, pieceId: index }));\r\n      \r\n      // Apply rotation using consolidated logic\r\n      applyRotation(pieces, move, direction);\r\n\r\n      // Update the newState with the modified pieces\r\n      pieces.forEach((piece, index) => {\r\n        newState[index] = {\r\n          position: piece.position,\r\n          colors: piece.colors,\r\n          rotationHistory: piece.rotationHistory\r\n        };\r\n      });\r\n      \r\n      return newState;\r\n    });\r\n    \r\n    // Continue with next move after a short delay\r\n    setTimeout(() => executeScramble(sequence.slice(1)), 100);\r\n  }, [applyRotation]);\r\n\r\n  // Scramble the cube\r\n  const scramble = useCallback(() => {\r\n    if (isAnimating) return;\r\n    \r\n    setIsAnimating(true);\r\n    \r\n    const moves = ['F', 'B', 'R', 'L', 'U', 'D'];\r\n    const directions = ['clockwise', 'counterclockwise'];\r\n    const scrambleSequence = [];\r\n    \r\n    // Generate 20 random moves\r\n    for (let i = 0; i < 20; i++) {\r\n      const move = moves[Math.floor(Math.random() * moves.length)];\r\n      const direction = directions[Math.floor(Math.random() * directions.length)];\r\n      scrambleSequence.push({ move, direction });\r\n    }\r\n    \r\n    console.log('Scrambling with sequence:', scrambleSequence);\r\n    \r\n    // Execute scramble moves\r\n    executeScramble(scrambleSequence);\r\n  }, [isAnimating, executeScramble]);\r\n\r\n  // Reset the cube to solved state\r\n  const reset = useCallback(() => {\r\n    setCubeState(() => {\r\n      const state = [];\r\n      \r\n      // Create 26 pieces (3x3x3 minus center)\r\n      for (let x = -1; x <= 1; x++) {\r\n        for (let y = -1; y <= 1; y++) {\r\n          for (let z = -1; z <= 1; z++) {\r\n            // Skip the center piece\r\n            if (x === 0 && y === 0 && z === 0) continue;\r\n            \r\n            // Get pieceId based on position in solved state\r\n            const pieceId = state.length;\r\n            \r\n            // Get original colors for this piece\r\n            const colors = getOriginalColors(pieceId);\r\n            \r\n            // Debug logging for reset state\r\n            console.log(`Reset piece ${pieceId} at [${x}, ${y}, ${z}]:`, colors);\r\n            \r\n            state.push({ \r\n              position: [x, y, z], \r\n              colors,\r\n              rotationHistory: [], // Reset rotation history\r\n              pieceId: pieceId // Store the pieceId for reference\r\n            });\r\n          }\r\n        }\r\n      }\r\n      \r\n      return state;\r\n    });\r\n  }, []);\r\n\r\n  return {\r\n    cubeState,\r\n    isAnimating,\r\n    rotateFace,\r\n    scramble,\r\n    reset\r\n  };\r\n}\r\n\r\n// Main cube group component with enhanced structure\r\nfunction CubeGroup({ isRotating, autoRotate = false, onScramble, onReset, onCubeStateChange }) {\r\n  const groupRef = useRef();\r\n  const [rotationSpeed] = useState({ x: 0.005, y: 0.01 });\r\n  \r\n  const { cubeState, isAnimating, rotateFace, scramble, reset } = useCubeState();\r\n  \r\n  // Helper functions for enhanced debugging\r\n  const getShapeType = (pieceId) => {\r\n    const shapeTypes = ['Square', 'Square', 'Square', 'Square', 'Square', 'Circle', 'Circle', 'Circle', 'Circle', 'Circle', 'Triangle', 'Triangle', 'Triangle', 'Triangle', 'Diamond', 'Diamond', 'Diamond', 'Diamond', 'Diamond', 'Diamond', 'Square+White', 'Square+White', 'Square+White', 'Square+White', 'Square+White', 'Square+White'];\r\n    return shapeTypes[pieceId] || 'Unknown';\r\n  };\r\n\r\n  const getShapeColor = (pieceId) => {\r\n    const shapeColors = ['Red', 'Blue', 'Green', 'Orange', 'Purple', 'Red', 'Blue', 'Green', 'Orange', 'Yellow', 'Red', 'Blue', 'Green', 'Orange', 'Purple', 'Red', 'Blue', 'Green', 'Orange', 'Purple', 'Red', 'Blue', 'Green', 'Orange', 'Purple', 'Yellow'];\r\n    return shapeColors[pieceId] || 'Unknown';\r\n  };\r\n\r\n  const getExpectedPosition = (pieceId) => {\r\n    // Map pieceId to expected solved position\r\n    const positions = [];\r\n    for (let x = -1; x <= 1; x++) {\r\n      for (let y = -1; y <= 1; y++) {\r\n        for (let z = -1; z <= 1; z++) {\r\n          if (x === 0 && y === 0 && z === 0) continue;\r\n          positions.push([x, y, z]);\r\n        }\r\n      }\r\n    }\r\n    return positions[pieceId];\r\n  };\r\n\r\n  const getExpectedColorsForPosition = (position) => {\r\n    const [x, y, z] = position;\r\n    const expectedColors = {\r\n      front: 'black',\r\n      back: 'black',\r\n      right: 'black',\r\n      left: 'black',\r\n      top: 'black',\r\n      bottom: 'black'\r\n    };\r\n    \r\n    if (x === -1) expectedColors.left = 'orange';\r\n    if (x === 1) expectedColors.right = 'red';\r\n    if (y === -1) expectedColors.bottom = 'green';\r\n    if (y === 1) expectedColors.top = 'blue';\r\n    if (z === -1) expectedColors.back = 'yellow';\r\n    if (z === 1) expectedColors.front = 'white';\r\n    \r\n    return expectedColors;\r\n  };\r\n\r\n  const isPieceInCorrectPosition = (piece, pieceId) => {\r\n    // Check if piece is in its solved position\r\n    const [x, y, z] = piece.position;\r\n    const expectedPosition = getExpectedPosition(pieceId);\r\n    return x === expectedPosition[0] && y === expectedPosition[1] && z === expectedPosition[2];\r\n  };\r\n\r\n  const getColorMismatches = (piece) => {\r\n    // In a scrambled cube, there are no color mismatches based on position\r\n    // Colors should only be validated against the solved state, not current position\r\n    // This function is mainly for debugging and should not flag scrambled pieces as incorrect\r\n    return [];\r\n  };\r\n\r\n  const getVisibleFaces = (position) => {\r\n    const [x, y, z] = position;\r\n    const visibleFaces = [];\r\n    if (x === 1) visibleFaces.push('right');\r\n    if (x === -1) visibleFaces.push('left');\r\n    if (y === 1) visibleFaces.push('top');\r\n    if (y === -1) visibleFaces.push('bottom');\r\n    if (z === 1) visibleFaces.push('front');\r\n    if (z === -1) visibleFaces.push('back');\r\n    return visibleFaces;\r\n  };\r\n\r\n  const getVisibleColors = (piece) => {\r\n    const visibleFaces = getVisibleFaces(piece.position);\r\n    return visibleFaces.map(face => ({\r\n      face,\r\n      color: piece.colors[face]\r\n    }));\r\n  };\r\n\r\n  const isCubeSolved = (state) => {\r\n    return state.every((piece, index) => isPieceInCorrectPosition(piece, index));\r\n  };\r\n  \r\n  // Expose functions to parent\r\n  React.useEffect(() => {\r\n    if (onScramble) onScramble(scramble);\r\n    if (onReset) onReset(reset);\r\n  }, [onScramble, onReset, scramble, reset]);\r\n  \r\n  // Notify parent of cube state changes with enhanced debugging info\r\n  React.useEffect(() => {\r\n    if (onCubeStateChange && cubeState) {\r\n      console.log('🔍 Cube state changed, pieces count:', cubeState.length);\r\n      console.log('🔍 First few pieces:', cubeState.slice(0, 3));\r\n      \r\n      // Create enhanced cube state with debugging information\r\n      const enhancedCubeState = {\r\n        timestamp: new Date().toISOString(),\r\n        totalPieces: cubeState.length,\r\n        pieces: cubeState.map((piece, index) => ({\r\n          pieceId: index,\r\n          position: piece.position,\r\n          colors: piece.colors,\r\n          rotationHistory: piece.rotationHistory,\r\n          shapeType: getShapeType(index),\r\n          shapeColor: getShapeColor(index),\r\n          // Validation data\r\n          validation: {\r\n            isInCorrectPosition: isPieceInCorrectPosition(piece, index),\r\n            expectedColors: getExpectedColorsForPosition(piece.position),\r\n            colorMismatches: getColorMismatches(piece),\r\n            visibleFaces: getVisibleFaces(piece.position),\r\n            visibleColors: getVisibleColors(piece)\r\n          },\r\n          // Debugging helpers\r\n          debug: {\r\n            positionString: `[${piece.position.join(', ')}]`,\r\n            colorSummary: Object.entries(piece.colors)\r\n              .filter(([_, color]) => color !== 'black')\r\n              .map(([face, color]) => `${face}:${color}`)\r\n              .join(', '),\r\n            moveCount: piece.rotationHistory.length,\r\n            lastMove: piece.rotationHistory[piece.rotationHistory.length - 1] || null\r\n          }\r\n        })),\r\n        // Global validation\r\n        validation: {\r\n          isSolved: isCubeSolved(cubeState),\r\n          totalMoves: cubeState.reduce((sum, piece) => sum + piece.rotationHistory.length, 0),\r\n          piecesInCorrectPosition: cubeState.filter((piece, index) => \r\n            isPieceInCorrectPosition(piece, index)\r\n          ).length,\r\n          piecesWithColorMismatches: 0, // No color mismatches in scrambled state\r\n          isScrambled: !isCubeSolved(cubeState) && cubeState.some(piece => piece.rotationHistory.length > 0)\r\n        },\r\n        // Metadata\r\n        metadata: {\r\n          version: \"1.0.0\",\r\n          exportReason: \"debugging\",\r\n          cubeType: \"3x3x3\",\r\n          coordinateSystem: \"right-handed (X-right, Y-up, Z-front)\",\r\n          faceMapping: {\r\n            front: \"Z+ (white)\",\r\n            back: \"Z- (yellow)\", \r\n            right: \"X+ (red)\",\r\n            left: \"X- (orange)\",\r\n            top: \"Y+ (blue)\",\r\n            bottom: \"Y- (green)\"\r\n          },\r\n          shapeMapping: {\r\n            \"0-4\": \"Squares (Red, Blue, Green, Orange, Purple)\",\r\n            \"5-9\": \"Circles (Red, Blue, Green, Orange, Purple)\", \r\n            \"10-14\": \"Triangles (Red, Blue, Green, Orange, Purple)\",\r\n            \"15-19\": \"Diamonds (Red, Blue, Green, Orange, Purple)\",\r\n            \"20-25\": \"Squares+White (Red, Blue, Green, Orange, Purple, Cyan)\"\r\n          }\r\n        }\r\n      };\r\n      \r\n      onCubeStateChange(enhancedCubeState);\r\n    }\r\n  }, [onCubeStateChange, cubeState]);\r\n\r\n  // Auto-rotation animation\r\n  useFrame(() => {\r\n    if (groupRef.current && isRotating && !isAnimating) {\r\n      groupRef.current.rotation.x += rotationSpeed.x;\r\n      groupRef.current.rotation.y += rotationSpeed.y;\r\n    }\r\n  });\r\n\r\n  return (\r\n    <group ref={groupRef}>\r\n      {cubeState.map((piece, index) => (\r\n        <CubePiece\r\n          key={index}\r\n          position={piece.position}\r\n          colors={piece.colors}\r\n          pieceId={index}\r\n        />\r\n      ))}\r\n    </group>\r\n  );\r\n}\r\n\r\n// Main Rubik's Cube component\r\nfunction RubiksCube({ isRotating, autoRotate = false, onScramble, onReset, onCubeStateChange }) {\r\n  const groupRef = useRef();\r\n  const [rotationSpeed] = useState({ x: 0.005, y: 0.01 });\r\n  \r\n  const { cubeState, isAnimating, rotateFace, scramble, reset } = useCubeState();\r\n  \r\n  // Expose functions to parent\r\n  React.useEffect(() => {\r\n    if (onScramble) onScramble(scramble);\r\n    if (onReset) onReset(reset);\r\n  }, [onScramble, onReset, scramble, reset]);\r\n  \r\n  // Notify parent of cube state changes\r\n  React.useEffect(() => {\r\n    if (onCubeStateChange && cubeState) {\r\n      onCubeStateChange(cubeState);\r\n    }\r\n  }, [onCubeStateChange, cubeState]);\r\n\r\n  return (\r\n    <Canvas\r\n      camera={{ position: [5, 5, 5], fov: 50 }}\r\n      style={{ width: '100%', height: '100%' }}\r\n    >\r\n      {/* Enhanced lighting setup - dimmed for better color distinction */}\r\n      <ambientLight intensity={0.8} />\r\n      <directionalLight position={[10, 10, 5]} intensity={2.0} />\r\n      <pointLight position={[10, 10, 10]} intensity={1.5} />\r\n      <pointLight position={[-10, -10, -10]} intensity={1.5} />\r\n      <spotLight\r\n        position={[0, 10, 0]}\r\n        angle={0.3}\r\n        penumbra={1}\r\n        intensity={1.5}\r\n        castShadow\r\n      />\r\n      \r\n      {/* Environment for better lighting */}\r\n      <Environment preset=\"sunset\" />\r\n      \r\n      <CubeGroup \r\n        isRotating={isRotating} \r\n        autoRotate={autoRotate}\r\n        onScramble={onScramble}\r\n        onReset={onReset}\r\n        onCubeStateChange={onCubeStateChange}\r\n      />\r\n      \r\n      <OrbitControls enablePan={true} enableZoom={true} enableRotate={true} />\r\n    </Canvas>\r\n  );\r\n}\r\n\r\nexport default RubiksCube;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}