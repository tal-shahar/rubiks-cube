{"ast":null,"code":"import React,{useRef,useMemo,useState}from'react';import{Canvas,useFrame}from'@react-three/fiber';import{OrbitControls,Environment}from'@react-three/drei';import*as THREE from'three';// Individual cube piece component with proper multi-colored faces\nimport{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";function CubePiece(_ref){let{position,colors,size=0.95}=_ref;const meshRef=useRef();const colorMap={'white':'#ffffff','yellow':'#ffff00','red':'#ff0000','orange':'#ff6600','blue':'#0066ff','green':'#00ff00','black':'#1a1a1a'};// Create individual face geometries for each side\nconst faceSize=size/2;const faceGeometry=useMemo(()=>new THREE.PlaneGeometry(size,size),[size]);// Face positions and rotations for a cube\nconst faces=[{position:[0,0,size/2],rotation:[0,0,0],color:colors[0]},// Front\n{position:[0,0,-size/2],rotation:[0,Math.PI,0],color:colors[1]},// Back\n{position:[size/2,0,0],rotation:[0,Math.PI/2,0],color:colors[2]},// Right\n{position:[-size/2,0,0],rotation:[0,-Math.PI/2,0],color:colors[3]},// Left\n{position:[0,size/2,0],rotation:[-Math.PI/2,0,0],color:colors[4]},// Top\n{position:[0,-size/2,0],rotation:[Math.PI/2,0,0],color:colors[5]}// Bottom\n];return/*#__PURE__*/_jsx(\"group\",{ref:meshRef,position:position,children:faces.map((face,index)=>/*#__PURE__*/_jsxs(\"mesh\",{position:face.position,rotation:face.rotation,children:[/*#__PURE__*/_jsx(\"primitive\",{object:faceGeometry}),/*#__PURE__*/_jsx(\"meshPhongMaterial\",{color:colorMap[face.color]||colorMap['black'],side:THREE.DoubleSide,shininess:30,specular:0x444444})]},index))});}// Main cube group component with enhanced structure\nfunction CubeGroup(_ref2){let{isRotating,autoRotate=false}=_ref2;const groupRef=useRef();const[rotationSpeed]=useState({x:0.005,y:0.01});useFrame(state=>{if(autoRotate&&groupRef.current){groupRef.current.rotation.y+=rotationSpeed.y;groupRef.current.rotation.x+=rotationSpeed.x;}});// Generate complete 3x3x3 cube structure\nconst cubePieces=useMemo(()=>{const pieces=[];// Create all 27 pieces (3x3x3)\nfor(let x=-1;x<=1;x++){for(let y=-1;y<=1;y++){for(let z=-1;z<=1;z++){const position=[x*1.0,y*1.0,z*1.0];// Determine colors for each face based on position in the Rubik's Cube\n// colors array: [front, back, right, left, top, bottom]\nconst pieceColors=['black','black','black','black','black','black'];// Assign colors based on which faces this piece belongs to\nif(z===1)pieceColors[0]='white';// Front face\nif(z===-1)pieceColors[1]='yellow';// Back face\nif(x===1)pieceColors[2]='red';// Right face\nif(x===-1)pieceColors[3]='orange';// Left face\nif(y===1)pieceColors[4]='blue';// Top face\nif(y===-1)pieceColors[5]='green';// Bottom face\npieces.push({position,colors:pieceColors});}}}return pieces;},[]);return/*#__PURE__*/_jsx(\"group\",{ref:groupRef,children:cubePieces.map((piece,index)=>/*#__PURE__*/_jsx(CubePiece,{position:piece.position,colors:piece.colors},index))});}// Main Rubik's Cube component\nfunction RubiksCube(_ref3){let{isRotating,autoRotate=false}=_ref3;return/*#__PURE__*/_jsxs(Canvas,{camera:{position:[6,6,6],fov:60},style:{width:'100%',height:'100%'},gl:{antialias:true,alpha:true},children:[/*#__PURE__*/_jsx(\"ambientLight\",{intensity:0.6}),/*#__PURE__*/_jsx(\"directionalLight\",{position:[10,10,5],intensity:1.5,castShadow:true,\"shadow-mapSize-width\":2048,\"shadow-mapSize-height\":2048}),/*#__PURE__*/_jsx(\"pointLight\",{position:[-10,-10,-5],intensity:1.0}),/*#__PURE__*/_jsx(\"spotLight\",{position:[0,10,0],angle:0.3,penumbra:1,intensity:0.8,castShadow:true}),/*#__PURE__*/_jsx(Environment,{preset:\"city\"}),/*#__PURE__*/_jsx(CubeGroup,{isRotating:isRotating,autoRotate:autoRotate}),/*#__PURE__*/_jsx(OrbitControls,{enablePan:true,enableZoom:true,enableRotate:true,autoRotate:false,autoRotateSpeed:1,minDistance:3,maxDistance:15,dampingFactor:0.05,enableDamping:true})]});}export default RubiksCube;","map":{"version":3,"names":["React","useRef","useMemo","useState","Canvas","useFrame","OrbitControls","Environment","THREE","jsx","_jsx","jsxs","_jsxs","CubePiece","_ref","position","colors","size","meshRef","colorMap","faceSize","faceGeometry","PlaneGeometry","faces","rotation","color","Math","PI","ref","children","map","face","index","object","side","DoubleSide","shininess","specular","CubeGroup","_ref2","isRotating","autoRotate","groupRef","rotationSpeed","x","y","state","current","cubePieces","pieces","z","pieceColors","push","piece","RubiksCube","_ref3","camera","fov","style","width","height","gl","antialias","alpha","intensity","castShadow","angle","penumbra","preset","enablePan","enableZoom","enableRotate","autoRotateSpeed","minDistance","maxDistance","dampingFactor","enableDamping"],"sources":["C:/Repo/GitHub/rubiks-cube/src/components/RubiksCube.js"],"sourcesContent":["import React, { useRef, useMemo, useState } from 'react';\r\nimport { Canvas, useFrame } from '@react-three/fiber';\r\nimport { OrbitControls, Environment } from '@react-three/drei';\r\nimport * as THREE from 'three';\r\n\r\n// Individual cube piece component with proper multi-colored faces\r\nfunction CubePiece({ position, colors, size = 0.95 }) {\r\n  const meshRef = useRef();\r\n  \r\n  const colorMap = {\r\n    'white': '#ffffff',\r\n    'yellow': '#ffff00',\r\n    'red': '#ff0000',\r\n    'orange': '#ff6600',\r\n    'blue': '#0066ff',\r\n    'green': '#00ff00',\r\n    'black': '#1a1a1a'\r\n  };\r\n\r\n  // Create individual face geometries for each side\r\n  const faceSize = size / 2;\r\n  const faceGeometry = useMemo(() => new THREE.PlaneGeometry(size, size), [size]);\r\n\r\n  // Face positions and rotations for a cube\r\n  const faces = [\r\n    { position: [0, 0, size/2], rotation: [0, 0, 0], color: colors[0] }, // Front\r\n    { position: [0, 0, -size/2], rotation: [0, Math.PI, 0], color: colors[1] }, // Back\r\n    { position: [size/2, 0, 0], rotation: [0, Math.PI/2, 0], color: colors[2] }, // Right\r\n    { position: [-size/2, 0, 0], rotation: [0, -Math.PI/2, 0], color: colors[3] }, // Left\r\n    { position: [0, size/2, 0], rotation: [-Math.PI/2, 0, 0], color: colors[4] }, // Top\r\n    { position: [0, -size/2, 0], rotation: [Math.PI/2, 0, 0], color: colors[5] }  // Bottom\r\n  ];\r\n\r\n  return (\r\n    <group ref={meshRef} position={position}>\r\n      {faces.map((face, index) => (\r\n        <mesh key={index} position={face.position} rotation={face.rotation}>\r\n          <primitive object={faceGeometry} />\r\n          <meshPhongMaterial \r\n            color={colorMap[face.color] || colorMap['black']}\r\n            side={THREE.DoubleSide}\r\n            shininess={30}\r\n            specular={0x444444}\r\n          />\r\n        </mesh>\r\n      ))}\r\n    </group>\r\n  );\r\n}\r\n\r\n// Main cube group component with enhanced structure\r\nfunction CubeGroup({ isRotating, autoRotate = false }) {\r\n  const groupRef = useRef();\r\n  const [rotationSpeed] = useState({ x: 0.005, y: 0.01 });\r\n  \r\n  useFrame((state) => {\r\n    if (autoRotate && groupRef.current) {\r\n      groupRef.current.rotation.y += rotationSpeed.y;\r\n      groupRef.current.rotation.x += rotationSpeed.x;\r\n    }\r\n  });\r\n\r\n  // Generate complete 3x3x3 cube structure\r\n  const cubePieces = useMemo(() => {\r\n    const pieces = [];\r\n    \r\n    // Create all 27 pieces (3x3x3)\r\n    for (let x = -1; x <= 1; x++) {\r\n      for (let y = -1; y <= 1; y++) {\r\n        for (let z = -1; z <= 1; z++) {\r\n                     const position = [x * 1.0, y * 1.0, z * 1.0];\r\n          \r\n                                // Determine colors for each face based on position in the Rubik's Cube\r\n           // colors array: [front, back, right, left, top, bottom]\r\n           const pieceColors = ['black', 'black', 'black', 'black', 'black', 'black'];\r\n           \r\n           // Assign colors based on which faces this piece belongs to\r\n           if (z === 1) pieceColors[0] = 'white'; // Front face\r\n           if (z === -1) pieceColors[1] = 'yellow'; // Back face\r\n           if (x === 1) pieceColors[2] = 'red'; // Right face\r\n           if (x === -1) pieceColors[3] = 'orange'; // Left face\r\n           if (y === 1) pieceColors[4] = 'blue'; // Top face\r\n           if (y === -1) pieceColors[5] = 'green'; // Bottom face\r\n           \r\n           pieces.push({\r\n             position,\r\n             colors: pieceColors\r\n           });\r\n        }\r\n      }\r\n    }\r\n    \r\n    return pieces;\r\n  }, []);\r\n\r\n  return (\r\n    <group ref={groupRef}>\r\n      {cubePieces.map((piece, index) => (\r\n        <CubePiece\r\n          key={index}\r\n          position={piece.position}\r\n          colors={piece.colors}\r\n        />\r\n      ))}\r\n    </group>\r\n  );\r\n}\r\n\r\n// Main Rubik's Cube component\r\nfunction RubiksCube({ isRotating, autoRotate = false }) {\r\n  return (\r\n    <Canvas\r\n      camera={{ position: [6, 6, 6], fov: 60 }}\r\n      style={{ width: '100%', height: '100%' }}\r\n      gl={{ antialias: true, alpha: true }}\r\n    >\r\n      {/* Enhanced Lighting */}\r\n      <ambientLight intensity={0.6} />\r\n      <directionalLight \r\n        position={[10, 10, 5]} \r\n        intensity={1.5}\r\n        castShadow\r\n        shadow-mapSize-width={2048}\r\n        shadow-mapSize-height={2048}\r\n      />\r\n      <pointLight position={[-10, -10, -5]} intensity={1.0} />\r\n      <spotLight\r\n        position={[0, 10, 0]}\r\n        angle={0.3}\r\n        penumbra={1}\r\n        intensity={0.8}\r\n        castShadow\r\n      />\r\n      \r\n      {/* Environment */}\r\n      <Environment preset=\"city\" />\r\n      \r\n      {/* Cube */}\r\n      <CubeGroup isRotating={isRotating} autoRotate={autoRotate} />\r\n      \r\n      {/* Controls */}\r\n      <OrbitControls \r\n        enablePan={true}\r\n        enableZoom={true}\r\n        enableRotate={true}\r\n        autoRotate={false}\r\n        autoRotateSpeed={1}\r\n        minDistance={3}\r\n        maxDistance={15}\r\n        dampingFactor={0.05}\r\n        enableDamping={true}\r\n      />\r\n    </Canvas>\r\n  );\r\n}\r\n\r\nexport default RubiksCube; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}