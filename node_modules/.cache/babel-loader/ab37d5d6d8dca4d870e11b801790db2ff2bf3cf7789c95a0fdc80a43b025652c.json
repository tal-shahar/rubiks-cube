{"ast":null,"code":"var _jsxFileName = \"C:\\\\Repo\\\\GitHub\\\\rubiks-cube\\\\src\\\\components\\\\RubiksCube.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { useRef, useMemo } from 'react';\nimport { Canvas, useFrame } from '@react-three/fiber';\nimport { OrbitControls, Environment } from '@react-three/drei';\nimport * as THREE from 'three';\n\n// Individual cube piece component\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction CubePiece({\n  position,\n  colors,\n  size = 0.95\n}) {\n  _s();\n  const meshRef = useRef();\n  const geometry = useMemo(() => new THREE.BoxGeometry(size, size, size), [size]);\n  const materials = useMemo(() => {\n    const materialArray = [];\n    const colorMap = {\n      'white': '#ffffff',\n      'yellow': '#ffff00',\n      'red': '#ff0000',\n      'orange': '#ff8c00',\n      'blue': '#0000ff',\n      'green': '#00ff00',\n      'black': '#1a1a1a'\n    };\n    for (let i = 0; i < 6; i++) {\n      const color = colors[i] || 'black';\n      materialArray.push(new THREE.MeshLambertMaterial({\n        color: colorMap[color],\n        transparent: true,\n        opacity: color === 'black' ? 0.1 : 1\n      }));\n    }\n    return materialArray;\n  }, [colors]);\n  return /*#__PURE__*/_jsxDEV(\"mesh\", {\n    ref: meshRef,\n    position: position,\n    geometry: geometry,\n    children: materials.map((material, index) => /*#__PURE__*/_jsxDEV(\"primitive\", {\n      object: material,\n      attach: `material-${index}`\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 5\n  }, this);\n}\n\n// Main cube group component\n_s(CubePiece, \"hWS/L+BNNkKfgi99yOrjzs3UBLA=\");\n_c = CubePiece;\nfunction CubeGroup({\n  isRotating,\n  autoRotate\n}) {\n  _s2();\n  const groupRef = useRef();\n  useFrame(state => {\n    if (autoRotate) {\n      groupRef.current.rotation.y += 0.01;\n      groupRef.current.rotation.x += 0.005;\n    }\n  });\n\n  // Generate cube pieces positions and colors\n  const cubePieces = useMemo(() => {\n    const pieces = [];\n    const colors = ['white', 'yellow', 'red', 'orange', 'blue', 'green'];\n\n    // Create 3x3x3 cube structure\n    for (let x = -1; x <= 1; x++) {\n      for (let y = -1; y <= 1; y++) {\n        for (let z = -1; z <= 1; z++) {\n          // Skip center pieces for now (simplified cube)\n          if (Math.abs(x) + Math.abs(y) + Math.abs(z) <= 1) {\n            const position = [x * 1.1, y * 1.1, z * 1.1];\n\n            // Determine colors for each face\n            const pieceColors = ['black', 'black', 'black', 'black', 'black', 'black'];\n\n            // Set colors based on position\n            if (z === 1) pieceColors[0] = 'white'; // Front face\n            if (z === -1) pieceColors[1] = 'yellow'; // Back face\n            if (x === 1) pieceColors[2] = 'red'; // Right face\n            if (x === -1) pieceColors[3] = 'orange'; // Left face\n            if (y === 1) pieceColors[4] = 'blue'; // Top face\n            if (y === -1) pieceColors[5] = 'green'; // Bottom face\n\n            pieces.push({\n              position,\n              colors: pieceColors\n            });\n          }\n        }\n      }\n    }\n    return pieces;\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"group\", {\n    ref: groupRef,\n    children: cubePieces.map((piece, index) => /*#__PURE__*/_jsxDEV(CubePiece, {\n      position: piece.position,\n      colors: piece.colors\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 94,\n    columnNumber: 5\n  }, this);\n}\n\n// Main Rubik's Cube component\n_s2(CubeGroup, \"UnkLIjJF/RYH8hVQZ22ANDTFES8=\", false, function () {\n  return [useFrame];\n});\n_c2 = CubeGroup;\nfunction RubiksCube({\n  isRotating,\n  autoRotate\n}) {\n  return /*#__PURE__*/_jsxDEV(Canvas, {\n    camera: {\n      position: [5, 5, 5],\n      fov: 75\n    },\n    style: {\n      width: '100%',\n      height: '100%'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"ambientLight\", {\n      intensity: 0.4\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"directionalLight\", {\n      position: [10, 10, 5],\n      intensity: 1\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"pointLight\", {\n      position: [-10, -10, -5],\n      intensity: 0.5\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Environment, {\n      preset: \"city\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CubeGroup, {\n      isRotating: isRotating,\n      autoRotate: autoRotate\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(OrbitControls, {\n      enablePan: true,\n      enableZoom: true,\n      enableRotate: true,\n      autoRotate: false,\n      autoRotateSpeed: 1\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 109,\n    columnNumber: 5\n  }, this);\n}\n_c3 = RubiksCube;\nexport default RubiksCube;\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"CubePiece\");\n$RefreshReg$(_c2, \"CubeGroup\");\n$RefreshReg$(_c3, \"RubiksCube\");","map":{"version":3,"names":["React","useRef","useMemo","Canvas","useFrame","OrbitControls","Environment","THREE","jsxDEV","_jsxDEV","CubePiece","position","colors","size","_s","meshRef","geometry","BoxGeometry","materials","materialArray","colorMap","i","color","push","MeshLambertMaterial","transparent","opacity","ref","children","map","material","index","object","attach","fileName","_jsxFileName","lineNumber","columnNumber","_c","CubeGroup","isRotating","autoRotate","_s2","groupRef","state","current","rotation","y","x","cubePieces","pieces","z","Math","abs","pieceColors","piece","_c2","RubiksCube","camera","fov","style","width","height","intensity","preset","enablePan","enableZoom","enableRotate","autoRotateSpeed","_c3","$RefreshReg$"],"sources":["C:/Repo/GitHub/rubiks-cube/src/components/RubiksCube.js"],"sourcesContent":["import React, { useRef, useMemo } from 'react';\r\nimport { Canvas, useFrame } from '@react-three/fiber';\r\nimport { OrbitControls, Environment } from '@react-three/drei';\r\nimport * as THREE from 'three';\r\n\r\n// Individual cube piece component\r\nfunction CubePiece({ position, colors, size = 0.95 }) {\r\n  const meshRef = useRef();\r\n  \r\n  const geometry = useMemo(() => new THREE.BoxGeometry(size, size, size), [size]);\r\n  \r\n  const materials = useMemo(() => {\r\n    const materialArray = [];\r\n    const colorMap = {\r\n      'white': '#ffffff',\r\n      'yellow': '#ffff00',\r\n      'red': '#ff0000',\r\n      'orange': '#ff8c00',\r\n      'blue': '#0000ff',\r\n      'green': '#00ff00',\r\n      'black': '#1a1a1a'\r\n    };\r\n    \r\n    for (let i = 0; i < 6; i++) {\r\n      const color = colors[i] || 'black';\r\n      materialArray.push(\r\n        new THREE.MeshLambertMaterial({ \r\n          color: colorMap[color],\r\n          transparent: true,\r\n          opacity: color === 'black' ? 0.1 : 1\r\n        })\r\n      );\r\n    }\r\n    return materialArray;\r\n  }, [colors]);\r\n\r\n  return (\r\n    <mesh ref={meshRef} position={position} geometry={geometry}>\r\n      {materials.map((material, index) => (\r\n        <primitive key={index} object={material} attach={`material-${index}`} />\r\n      ))}\r\n    </mesh>\r\n  );\r\n}\r\n\r\n// Main cube group component\r\nfunction CubeGroup({ isRotating, autoRotate }) {\r\n  const groupRef = useRef();\r\n  \r\n  useFrame((state) => {\r\n    if (autoRotate) {\r\n      groupRef.current.rotation.y += 0.01;\r\n      groupRef.current.rotation.x += 0.005;\r\n    }\r\n  });\r\n\r\n  // Generate cube pieces positions and colors\r\n  const cubePieces = useMemo(() => {\r\n    const pieces = [];\r\n    const colors = ['white', 'yellow', 'red', 'orange', 'blue', 'green'];\r\n    \r\n    // Create 3x3x3 cube structure\r\n    for (let x = -1; x <= 1; x++) {\r\n      for (let y = -1; y <= 1; y++) {\r\n        for (let z = -1; z <= 1; z++) {\r\n          // Skip center pieces for now (simplified cube)\r\n          if (Math.abs(x) + Math.abs(y) + Math.abs(z) <= 1) {\r\n            const position = [x * 1.1, y * 1.1, z * 1.1];\r\n            \r\n            // Determine colors for each face\r\n            const pieceColors = ['black', 'black', 'black', 'black', 'black', 'black'];\r\n            \r\n            // Set colors based on position\r\n            if (z === 1) pieceColors[0] = 'white';   // Front face\r\n            if (z === -1) pieceColors[1] = 'yellow';  // Back face\r\n            if (x === 1) pieceColors[2] = 'red';      // Right face\r\n            if (x === -1) pieceColors[3] = 'orange';  // Left face\r\n            if (y === 1) pieceColors[4] = 'blue';     // Top face\r\n            if (y === -1) pieceColors[5] = 'green';   // Bottom face\r\n            \r\n            pieces.push({\r\n              position,\r\n              colors: pieceColors\r\n            });\r\n          }\r\n        }\r\n      }\r\n    }\r\n    \r\n    return pieces;\r\n  }, []);\r\n\r\n  return (\r\n    <group ref={groupRef}>\r\n      {cubePieces.map((piece, index) => (\r\n        <CubePiece\r\n          key={index}\r\n          position={piece.position}\r\n          colors={piece.colors}\r\n        />\r\n      ))}\r\n    </group>\r\n  );\r\n}\r\n\r\n// Main Rubik's Cube component\r\nfunction RubiksCube({ isRotating, autoRotate }) {\r\n  return (\r\n    <Canvas\r\n      camera={{ position: [5, 5, 5], fov: 75 }}\r\n      style={{ width: '100%', height: '100%' }}\r\n    >\r\n      {/* Lighting */}\r\n      <ambientLight intensity={0.4} />\r\n      <directionalLight position={[10, 10, 5]} intensity={1} />\r\n      <pointLight position={[-10, -10, -5]} intensity={0.5} />\r\n      \r\n      {/* Environment */}\r\n      <Environment preset=\"city\" />\r\n      \r\n      {/* Cube */}\r\n      <CubeGroup isRotating={isRotating} autoRotate={autoRotate} />\r\n      \r\n      {/* Controls */}\r\n      <OrbitControls \r\n        enablePan={true}\r\n        enableZoom={true}\r\n        enableRotate={true}\r\n        autoRotate={false}\r\n        autoRotateSpeed={1}\r\n      />\r\n    </Canvas>\r\n  );\r\n}\r\n\r\nexport default RubiksCube; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}