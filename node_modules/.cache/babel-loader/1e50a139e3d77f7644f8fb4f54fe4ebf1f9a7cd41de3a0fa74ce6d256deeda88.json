{"ast":null,"code":"import _objectSpread from\"C:/Repo/GitHub/rubiks-cube/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import React,{useState,useRef,useMemo,useCallback,useEffect}from'react';import{Canvas,useFrame}from'@react-three/fiber';import{OrbitControls,Environment}from'@react-three/drei';import*as THREE from'three';// Custom logging function that will be visible in terminal\nimport{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const logToTerminal=function(message){let data=arguments.length>1&&arguments[1]!==undefined?arguments[1]:null;// Log to browser console\nconsole.log(\"\\n\\uD83C\\uDFAF \".concat(message));if(data){console.log(JSON.stringify(data,null,2));}console.log('='.repeat(80)+'\\n');// Send to log server to print in terminal\nfetch('http://localhost:3001/log',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({message:message,data:data})}).catch(error=>{console.warn('Could not send log to terminal server:',error);});};// Function to create unique shapes for each piece\nfunction createShape(pieceId,size){const shapes=[// 0-4: Basic geometric shapes (Squares)\n()=>/*#__PURE__*/_jsxs(\"mesh\",{position:[0,0,0.012],children:[/*#__PURE__*/_jsx(\"planeGeometry\",{args:[size,size]}),/*#__PURE__*/_jsx(\"meshBasicMaterial\",{color:\"red\"})]}),// Square\n()=>/*#__PURE__*/_jsxs(\"mesh\",{position:[0,0,0.012],children:[/*#__PURE__*/_jsx(\"planeGeometry\",{args:[size,size]}),/*#__PURE__*/_jsx(\"meshBasicMaterial\",{color:\"blue\"})]}),// Square\n()=>/*#__PURE__*/_jsxs(\"mesh\",{position:[0,0,0.012],children:[/*#__PURE__*/_jsx(\"planeGeometry\",{args:[size,size]}),/*#__PURE__*/_jsx(\"meshBasicMaterial\",{color:\"green\"})]}),// Square\n()=>/*#__PURE__*/_jsxs(\"mesh\",{position:[0,0,0.012],children:[/*#__PURE__*/_jsx(\"planeGeometry\",{args:[size,size]}),/*#__PURE__*/_jsx(\"meshBasicMaterial\",{color:\"orange\"})]}),// Square\n()=>/*#__PURE__*/_jsxs(\"mesh\",{position:[0,0,0.012],children:[/*#__PURE__*/_jsx(\"planeGeometry\",{args:[size,size]}),/*#__PURE__*/_jsx(\"meshBasicMaterial\",{color:\"purple\"})]}),// Square\n// 5-9: Circles\n()=>/*#__PURE__*/_jsxs(\"mesh\",{position:[0,0,0.012],children:[/*#__PURE__*/_jsx(\"circleGeometry\",{args:[size/2,32]}),/*#__PURE__*/_jsx(\"meshBasicMaterial\",{color:\"red\"})]}),// Circle\n()=>/*#__PURE__*/_jsxs(\"mesh\",{position:[0,0,0.012],children:[/*#__PURE__*/_jsx(\"circleGeometry\",{args:[size/2,32]}),/*#__PURE__*/_jsx(\"meshBasicMaterial\",{color:\"blue\"})]}),// Circle\n()=>/*#__PURE__*/_jsxs(\"mesh\",{position:[0,0,0.012],children:[/*#__PURE__*/_jsx(\"circleGeometry\",{args:[size/2,32]}),/*#__PURE__*/_jsx(\"meshBasicMaterial\",{color:\"green\"})]}),// Circle\n()=>/*#__PURE__*/_jsxs(\"mesh\",{position:[0,0,0.012],children:[/*#__PURE__*/_jsx(\"circleGeometry\",{args:[size/2,32]}),/*#__PURE__*/_jsx(\"meshBasicMaterial\",{color:\"orange\"})]}),// Circle\n()=>/*#__PURE__*/_jsxs(\"mesh\",{position:[0,0,0.012],children:[/*#__PURE__*/_jsx(\"circleGeometry\",{args:[size/2,32]}),/*#__PURE__*/_jsx(\"meshBasicMaterial\",{color:\"purple\"})]}),// Circle\n// 10-14: Triangles (using planeGeometry for now, ideally custom geometry)\n()=>/*#__PURE__*/_jsxs(\"mesh\",{position:[0,0,0.012],children:[/*#__PURE__*/_jsx(\"planeGeometry\",{args:[size,size]}),/*#__PURE__*/_jsx(\"meshBasicMaterial\",{color:\"red\"})]}),// Triangle\n()=>/*#__PURE__*/_jsxs(\"mesh\",{position:[0,0,0.012],children:[/*#__PURE__*/_jsx(\"planeGeometry\",{args:[size,size]}),/*#__PURE__*/_jsx(\"meshBasicMaterial\",{color:\"blue\"})]}),// Triangle\n()=>/*#__PURE__*/_jsxs(\"mesh\",{position:[0,0,0.012],children:[/*#__PURE__*/_jsx(\"planeGeometry\",{args:[size,size]}),/*#__PURE__*/_jsx(\"meshBasicMaterial\",{color:\"green\"})]}),// Triangle\n()=>/*#__PURE__*/_jsxs(\"mesh\",{position:[0,0,0.012],children:[/*#__PURE__*/_jsx(\"planeGeometry\",{args:[size,size]}),/*#__PURE__*/_jsx(\"meshBasicMaterial\",{color:\"orange\"})]}),// Triangle\n()=>/*#__PURE__*/_jsxs(\"mesh\",{position:[0,0,0.012],children:[/*#__PURE__*/_jsx(\"planeGeometry\",{args:[size,size]}),/*#__PURE__*/_jsx(\"meshBasicMaterial\",{color:\"purple\"})]}),// Triangle\n// 15-19: Diamonds (rotated squares)\n()=>/*#__PURE__*/_jsx(\"group\",{position:[0,0,0.012],children:/*#__PURE__*/_jsxs(\"mesh\",{rotation:[0,0,Math.PI/4],children:[/*#__PURE__*/_jsx(\"planeGeometry\",{args:[size,size]}),/*#__PURE__*/_jsx(\"meshBasicMaterial\",{color:\"red\"})]})}),// Diamond\n()=>/*#__PURE__*/_jsx(\"group\",{position:[0,0,0.012],children:/*#__PURE__*/_jsxs(\"mesh\",{rotation:[0,0,Math.PI/4],children:[/*#__PURE__*/_jsx(\"planeGeometry\",{args:[size,size]}),/*#__PURE__*/_jsx(\"meshBasicMaterial\",{color:\"blue\"})]})}),// Diamond\n()=>/*#__PURE__*/_jsx(\"group\",{position:[0,0,0.012],children:/*#__PURE__*/_jsxs(\"mesh\",{rotation:[0,0,Math.PI/4],children:[/*#__PURE__*/_jsx(\"planeGeometry\",{args:[size,size]}),/*#__PURE__*/_jsx(\"meshBasicMaterial\",{color:\"green\"})]})}),// Diamond\n()=>/*#__PURE__*/_jsx(\"group\",{position:[0,0,0.012],children:/*#__PURE__*/_jsxs(\"mesh\",{rotation:[0,0,Math.PI/4],children:[/*#__PURE__*/_jsx(\"planeGeometry\",{args:[size,size]}),/*#__PURE__*/_jsx(\"meshBasicMaterial\",{color:\"orange\"})]})}),// Diamond\n()=>/*#__PURE__*/_jsx(\"group\",{position:[0,0,0.012],children:/*#__PURE__*/_jsxs(\"mesh\",{rotation:[0,0,Math.PI/4],children:[/*#__PURE__*/_jsx(\"planeGeometry\",{args:[size,size]}),/*#__PURE__*/_jsx(\"meshBasicMaterial\",{color:\"purple\"})]})}),// Diamond\n// 20-25: Complex patterns (Squares with white centers)\n()=>/*#__PURE__*/_jsxs(\"group\",{position:[0,0,0.012],children:[/*#__PURE__*/_jsxs(\"mesh\",{children:[/*#__PURE__*/_jsx(\"planeGeometry\",{args:[size,size]}),/*#__PURE__*/_jsx(\"meshBasicMaterial\",{color:\"red\"})]}),/*#__PURE__*/_jsxs(\"mesh\",{position:[0,0,0.001],children:[/*#__PURE__*/_jsx(\"planeGeometry\",{args:[size*0.5,size*0.5]}),/*#__PURE__*/_jsx(\"meshBasicMaterial\",{color:\"white\"})]})]}),// Square with white center\n()=>/*#__PURE__*/_jsxs(\"group\",{position:[0,0,0.012],children:[/*#__PURE__*/_jsxs(\"mesh\",{children:[/*#__PURE__*/_jsx(\"planeGeometry\",{args:[size,size]}),/*#__PURE__*/_jsx(\"meshBasicMaterial\",{color:\"blue\"})]}),/*#__PURE__*/_jsxs(\"mesh\",{position:[0,0,0.001],children:[/*#__PURE__*/_jsx(\"planeGeometry\",{args:[size*0.5,size*0.5]}),/*#__PURE__*/_jsx(\"meshBasicMaterial\",{color:\"white\"})]})]}),// Square with white center\n()=>/*#__PURE__*/_jsxs(\"group\",{position:[0,0,0.012],children:[/*#__PURE__*/_jsxs(\"mesh\",{children:[/*#__PURE__*/_jsx(\"planeGeometry\",{args:[size,size]}),/*#__PURE__*/_jsx(\"meshBasicMaterial\",{color:\"green\"})]}),/*#__PURE__*/_jsxs(\"mesh\",{position:[0,0,0.001],children:[/*#__PURE__*/_jsx(\"planeGeometry\",{args:[size*0.5,size*0.5]}),/*#__PURE__*/_jsx(\"meshBasicMaterial\",{color:\"white\"})]})]}),// Square with white center\n()=>/*#__PURE__*/_jsxs(\"group\",{position:[0,0,0.012],children:[/*#__PURE__*/_jsxs(\"mesh\",{children:[/*#__PURE__*/_jsx(\"planeGeometry\",{args:[size,size]}),/*#__PURE__*/_jsx(\"meshBasicMaterial\",{color:\"orange\"})]}),/*#__PURE__*/_jsxs(\"mesh\",{position:[0,0,0.001],children:[/*#__PURE__*/_jsx(\"planeGeometry\",{args:[size*0.5,size*0.5]}),/*#__PURE__*/_jsx(\"meshBasicMaterial\",{color:\"white\"})]})]}),// Square with white center\n()=>/*#__PURE__*/_jsxs(\"group\",{position:[0,0,0.012],children:[/*#__PURE__*/_jsxs(\"mesh\",{children:[/*#__PURE__*/_jsx(\"planeGeometry\",{args:[size,size]}),/*#__PURE__*/_jsx(\"meshBasicMaterial\",{color:\"purple\"})]}),/*#__PURE__*/_jsxs(\"mesh\",{position:[0,0,0.001],children:[/*#__PURE__*/_jsx(\"planeGeometry\",{args:[size*0.5,size*0.5]}),/*#__PURE__*/_jsx(\"meshBasicMaterial\",{color:\"white\"})]})]}),// Square with white center\n()=>/*#__PURE__*/_jsxs(\"group\",{position:[0,0,0.012],children:[/*#__PURE__*/_jsxs(\"mesh\",{children:[/*#__PURE__*/_jsx(\"planeGeometry\",{args:[size,size]}),/*#__PURE__*/_jsx(\"meshBasicMaterial\",{color:\"cyan\"})]}),/*#__PURE__*/_jsxs(\"mesh\",{position:[0,0,0.001],children:[/*#__PURE__*/_jsx(\"planeGeometry\",{args:[size*0.5,size*0.5]}),/*#__PURE__*/_jsx(\"meshBasicMaterial\",{color:\"white\"})]})]})// Square with white center\n];const shapeIndex=pieceId;// Changed from pieceId % shapes.length\nreturn shapes[shapeIndex]();}// Individual cube piece component\nfunction CubePiece(_ref){let{position,colors,size=0.95,pieceId=0}=_ref;const meshRef=useRef();// Log piece information for debugging\nReact.useEffect(()=>{const shapeTypes=['Square','Square','Square','Square','Square','Circle','Circle','Circle','Circle','Circle','Triangle','Triangle','Triangle','Triangle','Triangle','Diamond','Diamond','Diamond','Diamond','Diamond','Square+White','Square+White','Square+White','Square+White','Square+White','Square+White'];const shapeColors=['Red','Blue','Green','Orange','Purple','Red','Blue','Green','Orange','Purple','Red','Blue','Green','Orange','Purple','Red','Blue','Green','Orange','Purple','Red','Blue','Green','Orange','Purple','Cyan'];const shapeType=shapeTypes[pieceId]||'Unknown';// Changed from pieceId % shapeTypes.length\nconst shapeColor=shapeColors[pieceId]||'Unknown';// Changed from pieceId % shapeColors.length\n// Debug specific pieces only\nif(pieceId===0||pieceId===17||pieceId===25||pieceId===1||pieceId===11){console.log(\"\\uD83D\\uDD0D \".concat(shapeColor,\" \").concat(shapeType,\" Piece \").concat(pieceId,\" at position [\").concat(position.join(', '),\"]\"));console.log(\"  Stored Colors:\",colors);// Show what colors should be visible based on position\nconst[x,y,z]=position;const visibleFaces=[];if(x===1)visibleFaces.push('right');if(x===-1)visibleFaces.push('left');if(y===1)visibleFaces.push('top');if(y===-1)visibleFaces.push('bottom');if(z===1)visibleFaces.push('front');if(z===-1)visibleFaces.push('back');console.log(\"  Visible faces:\",visibleFaces);console.log(\"  Colors on visible faces:\",visibleFaces.map(face=>\"\".concat(face,\": \").concat(colors[face])));}},[pieceId,position,colors]);// Color mapping\nconst colorMap={'white':'#FFFFFF','yellow':'#FFD700','red':'#FF0000','orange':'#FFA500','blue':'#0000FF','green':'#00FF00','black':'#000000'};// Create cube geometry\nconst cubeGeometry=useMemo(()=>new THREE.BoxGeometry(size,size,size),[size]);// Create face geometry\nconst faceGeometry=useMemo(()=>{const geometry=new THREE.PlaneGeometry(size,size);return geometry;},[size]);// Get the color for a face based on the face index and position\nconst getFaceColor=faceIndex=>{const[x,y,z]=position;// Determine which faces are visible based on position\nconst visibleFaces=[];if(x===1)visibleFaces.push(2);// Right face visible\nif(x===-1)visibleFaces.push(3);// Left face visible\nif(y===1)visibleFaces.push(4);// Top face visible\nif(y===-1)visibleFaces.push(5);// Bottom face visible\nif(z===1)visibleFaces.push(0);// Front face visible\nif(z===-1)visibleFaces.push(1);// Back face visible\n// If this face is not visible, return black\nif(!visibleFaces.includes(faceIndex)){return'black';}// Map face index to color property\nlet faceColor;switch(faceIndex){case 0:faceColor=colors.front;break;// Front face\ncase 1:faceColor=colors.back;break;// Back face\ncase 2:faceColor=colors.right;break;// Right face\ncase 3:faceColor=colors.left;break;// Left face\ncase 4:faceColor=colors.top;break;// Top face\ncase 5:faceColor=colors.bottom;break;// Bottom face\ndefault:faceColor='black';}// Debug logging for specific pieces\nif(pieceId===2||pieceId===11||pieceId===16||pieceId===19||pieceId===22||pieceId===25){const faceNames=['front','back','right','left','top','bottom'];console.log(\"\\uD83C\\uDFA8 Piece \".concat(pieceId,\" face \").concat(faceNames[faceIndex],\" (\").concat(faceIndex,\") at [\").concat(x,\",\").concat(y,\",\").concat(z,\"]: \").concat(faceColor,\" (visible: \").concat(visibleFaces.includes(faceIndex),\")\"));}return faceColor;};return/*#__PURE__*/_jsxs(\"group\",{position:position,children:[/*#__PURE__*/_jsx(\"mesh\",{geometry:cubeGeometry,children:/*#__PURE__*/_jsx(\"meshPhongMaterial\",{color:\"#333333\"})}),[0,1,2,3,4,5].map(faceIndex=>{const faceColor=getFaceColor(faceIndex);// Define face positions and rotations correctly\nlet facePosition,faceRotation;switch(faceIndex){case 0:// Front face (Z+)\nfacePosition=[0,0,size/2+0.001];faceRotation=[0,0,0];break;case 1:// Back face (Z-)\nfacePosition=[0,0,-size/2-0.001];faceRotation=[0,Math.PI,0];break;case 2:// Right face (X+)\nfacePosition=[size/2+0.001,0,0];faceRotation=[0,Math.PI/2,0];break;case 3:// Left face (X-)\nfacePosition=[-size/2-0.001,0,0];faceRotation=[0,-Math.PI/2,0];break;case 4:// Top face (Y+)\nfacePosition=[0,size/2+0.001,0];faceRotation=[-Math.PI/2,0,0];break;case 5:// Bottom face (Y-)\nfacePosition=[0,-size/2-0.001,0];faceRotation=[Math.PI/2,0,0];break;default:facePosition=[0,0,0];faceRotation=[0,0,0];}return/*#__PURE__*/_jsx(\"mesh\",{position:facePosition,rotation:faceRotation,geometry:faceGeometry,children:/*#__PURE__*/_jsx(\"meshPhongMaterial\",{color:colorMap[faceColor]||'#000000',side:THREE.FrontSide,emissive:colorMap[faceColor]||'#000000',emissiveIntensity:0.3})},faceIndex);}),[0,1,2,3,4,5].map(faceIndex=>{// Define face positions and rotations correctly (same as colored faces)\nlet facePosition,faceRotation;switch(faceIndex){case 0:// Front face (Z+)\nfacePosition=[0,0,size/2+0.002];faceRotation=[0,0,0];break;case 1:// Back face (Z-)\nfacePosition=[0,0,-size/2-0.002];faceRotation=[0,Math.PI,0];break;case 2:// Right face (X+)\nfacePosition=[size/2+0.002,0,0];faceRotation=[0,Math.PI/2,0];break;case 3:// Left face (X-)\nfacePosition=[-size/2-0.002,0,0];faceRotation=[0,-Math.PI/2,0];break;case 4:// Top face (Y+)\nfacePosition=[0,size/2+0.002,0];faceRotation=[-Math.PI/2,0,0];break;case 5:// Bottom face (Y-)\nfacePosition=[0,-size/2-0.002,0];faceRotation=[Math.PI/2,0,0];break;default:facePosition=[0,0,0];faceRotation=[0,0,0];}return/*#__PURE__*/_jsx(\"group\",{position:facePosition,rotation:faceRotation,children:createShape(pieceId,size*0.3)},\"shape-\".concat(faceIndex));})]});}// Custom hook for cube state management\nfunction useCubeState(){const[cubeState,setCubeState]=useState(()=>{const state=[];// Create 26 pieces (3x3x3 minus center)\nfor(let x=-1;x<=1;x++){for(let y=-1;y<=1;y++){for(let z=-1;z<=1;z++){// Skip the center piece\nif(x===0&&y===0&&z===0)continue;// Determine piece type and assign colors accordingly\nlet colors={front:'black',back:'black',right:'black',left:'black',top:'black',bottom:'black'};// Assign colors based on piece position in solved state\n// Only assign colors to faces that are visible (not internal)\nif(x===-1)colors.left='orange';if(x===1)colors.right='red';if(y===-1)colors.bottom='green';if(y===1)colors.top='blue';if(z===-1)colors.back='yellow';if(z===1)colors.front='white';// Debug logging for initial state\nconsole.log(\"Initial piece at [\".concat(x,\", \").concat(y,\", \").concat(z,\"]:\"),colors);state.push({position:[x,y,z],colors,rotationHistory:[]// Track all rotations this piece has undergone\n});}}}// Log the complete initial cube state as JSON\nconsole.log('🎯 INITIAL CUBE STATE (End of Initial Load):');console.log(JSON.stringify(state,null,2));// Also log to terminal (this will show in the terminal where npm start is running)\nlogToTerminal('INITIAL CUBE STATE (End of Initial Load)',state);return state;});const[isAnimating,setIsAnimating]=useState(false);// Consolidated rotation logic\nconst applyRotation=useCallback((pieces,face,direction)=>{pieces.forEach(piece=>{const[x,y,z]=piece.position;let newX=x,newY=y,newZ=z;// Apply 3D transformation\nswitch(face){case'F':// Front face rotation\nif(z===1){// Only pieces on the front face\nif(direction==='clockwise'){newX=-y;newY=x;}else{newX=y;newY=-x;}}break;case'B':// Back face rotation\nif(z===-1){// Only pieces on the back face\nif(direction==='clockwise'){newX=y;newY=-x;}else{newX=-y;newY=x;}}break;case'R':// Right face rotation\nif(x===1){// Only pieces on the right face\nif(direction==='clockwise'){newZ=-y;newY=z;}else{newZ=y;newY=-z;}}break;case'L':// Left face rotation\nif(x===-1){// Only pieces on the left face\nif(direction==='clockwise'){newZ=y;newY=-z;}else{newZ=-y;newY=z;}}break;case'U':// Up face rotation\nif(y===1){// Only pieces on the top face\nif(direction==='clockwise'){newX=z;newZ=-x;}else{newX=-z;newZ=x;}}break;case'D':// Down face rotation\nif(y===-1){// Only pieces on the bottom face\nif(direction==='clockwise'){newX=-z;newZ=x;}else{newX=z;newZ=-x;}}break;}// Only apply changes if the piece actually moved\nconst positionChanged=x!==newX||y!==newY||z!==newZ;if(positionChanged){// Update position\npiece.position=[newX,newY,newZ];// Keep the existing colors - they should travel with the piece\n// No need to reassign colors based on position\n// The colors should stay with the piece as it moves around\npiece.rotationHistory.push({move:face,direction:direction,fromPosition:[x,y,z],toPosition:[newX,newY,newZ],timestamp:new Date().toISOString()});}});},[]);// Rotate a face of the cube\nconst rotateFace=useCallback((face,direction)=>{if(isAnimating)return;setIsAnimating(true);setCubeState(prevState=>{const newState=[...prevState];const pieces=newState.map((piece,index)=>_objectSpread(_objectSpread({},piece),{},{pieceId:index}));// Apply rotation using consolidated logic\napplyRotation(pieces,face,direction);// Update the newState with the modified pieces\npieces.forEach((piece,index)=>{newState[index]={position:piece.position,colors:piece.colors,rotationHistory:piece.rotationHistory};});return newState;});// Reset animation state after a short delay\nsetTimeout(()=>setIsAnimating(false),100);},[isAnimating,applyRotation]);// Execute scramble sequence\nconst executeScramble=useCallback(sequence=>{if(sequence.length===0){setIsAnimating(false);// Log the complete cube state as JSON at the end of scramble session\n// We need to get the current state from the setter function\nsetCubeState(currentState=>{console.log('🎯 CUBE STATE AFTER SCRAMBLE (End of Scramble Session):');console.log(JSON.stringify(currentState,null,2));// Also log to terminal (this will show in the terminal where npm start is running)\nlogToTerminal('CUBE STATE AFTER SCRAMBLE (End of Scramble Session)',currentState);return currentState;// Return unchanged state\n});return;}const{move,direction}=sequence[0];console.log(\"Executing move: \".concat(move,\" \").concat(direction));// Apply the move using consolidated logic\nsetCubeState(prevState=>{const newState=[...prevState];const pieces=newState.map((piece,index)=>_objectSpread(_objectSpread({},piece),{},{pieceId:index}));// Apply rotation using consolidated logic\napplyRotation(pieces,move,direction);// Update the newState with the modified pieces\npieces.forEach((piece,index)=>{newState[index]={position:piece.position,colors:piece.colors,rotationHistory:piece.rotationHistory};});return newState;});// Continue with next move after a short delay\nsetTimeout(()=>executeScramble(sequence.slice(1)),100);},[applyRotation]);// Scramble the cube\nconst scramble=useCallback(()=>{if(isAnimating)return;setIsAnimating(true);const moves=['F','B','R','L','U','D'];const directions=['clockwise','counterclockwise'];const scrambleSequence=[];// Generate 20 random moves\nfor(let i=0;i<20;i++){const move=moves[Math.floor(Math.random()*moves.length)];const direction=directions[Math.floor(Math.random()*directions.length)];scrambleSequence.push({move,direction});}console.log('Scrambling with sequence:',scrambleSequence);// Execute scramble moves\nexecuteScramble(scrambleSequence);},[isAnimating,executeScramble]);// Reset the cube to solved state\nconst reset=useCallback(()=>{setCubeState(()=>{const state=[];// Create 26 pieces (3x3x3 minus center)\nfor(let x=-1;x<=1;x++){for(let y=-1;y<=1;y++){for(let z=-1;z<=1;z++){// Skip the center piece\nif(x===0&&y===0&&z===0)continue;// Determine piece type and assign colors accordingly\nlet colors={front:'black',back:'black',right:'black',left:'black',top:'black',bottom:'black'};// Assign colors based on piece position in solved state\n// Only assign colors to faces that are visible (not internal)\nif(x===-1)colors.left='orange';if(x===1)colors.right='red';if(y===-1)colors.bottom='green';if(y===1)colors.top='blue';if(z===-1)colors.back='yellow';if(z===1)colors.front='white';// Debug logging for reset state\nconsole.log(\"Reset piece at [\".concat(x,\", \").concat(y,\", \").concat(z,\"]:\"),colors);state.push({position:[x,y,z],colors,rotationHistory:[]// Reset rotation history\n});}}}return state;});},[]);return{cubeState,isAnimating,rotateFace,scramble,reset};}// Main cube group component with enhanced structure\nfunction CubeGroup(_ref2){let{isRotating,autoRotate=false,onScramble,onReset,onCubeStateChange}=_ref2;const groupRef=useRef();const[rotationSpeed]=useState({x:0.005,y:0.01});const{cubeState,isAnimating,rotateFace,scramble,reset}=useCubeState();// Helper functions for enhanced debugging\nconst getShapeType=pieceId=>{const shapeTypes=['Square','Square','Square','Square','Square','Circle','Circle','Circle','Circle','Circle','Triangle','Triangle','Triangle','Triangle','Triangle','Diamond','Diamond','Diamond','Diamond','Diamond','Square+White','Square+White','Square+White','Square+White','Square+White','Square+White'];return shapeTypes[pieceId]||'Unknown';};const getShapeColor=pieceId=>{const shapeColors=['Red','Blue','Green','Orange','Purple','Red','Blue','Green','Orange','Purple','Red','Blue','Green','Orange','Purple','Red','Blue','Green','Orange','Purple','Red','Blue','Green','Orange','Purple','Cyan'];return shapeColors[pieceId]||'Unknown';};const getExpectedPosition=pieceId=>{// Map pieceId to expected solved position\nconst positions=[];for(let x=-1;x<=1;x++){for(let y=-1;y<=1;y++){for(let z=-1;z<=1;z++){if(x===0&&y===0&&z===0)continue;positions.push([x,y,z]);}}}return positions[pieceId];};const getExpectedColorsForPosition=position=>{const[x,y,z]=position;const expectedColors={front:'black',back:'black',right:'black',left:'black',top:'black',bottom:'black'};if(x===-1)expectedColors.left='orange';if(x===1)expectedColors.right='red';if(y===-1)expectedColors.bottom='green';if(y===1)expectedColors.top='blue';if(z===-1)expectedColors.back='yellow';if(z===1)expectedColors.front='white';return expectedColors;};const isPieceInCorrectPosition=(piece,pieceId)=>{// Check if piece is in its solved position\nconst[x,y,z]=piece.position;const expectedPosition=getExpectedPosition(pieceId);return x===expectedPosition[0]&&y===expectedPosition[1]&&z===expectedPosition[2];};const getColorMismatches=piece=>{const expected=getExpectedColorsForPosition(piece.position);const mismatches=[];Object.keys(expected).forEach(face=>{if(expected[face]!=='black'&&piece.colors[face]!==expected[face]){mismatches.push({face,expected:expected[face],actual:piece.colors[face]});}});return mismatches;};const getVisibleFaces=position=>{const[x,y,z]=position;const visibleFaces=[];if(x===1)visibleFaces.push('right');if(x===-1)visibleFaces.push('left');if(y===1)visibleFaces.push('top');if(y===-1)visibleFaces.push('bottom');if(z===1)visibleFaces.push('front');if(z===-1)visibleFaces.push('back');return visibleFaces;};const getVisibleColors=piece=>{const visibleFaces=getVisibleFaces(piece.position);return visibleFaces.map(face=>({face,color:piece.colors[face]}));};const isCubeSolved=state=>{return state.every((piece,index)=>isPieceInCorrectPosition(piece,index));};// Expose functions to parent\nReact.useEffect(()=>{if(onScramble)onScramble(scramble);if(onReset)onReset(reset);},[onScramble,onReset,scramble,reset]);// Notify parent of cube state changes with enhanced debugging info\nReact.useEffect(()=>{if(onCubeStateChange&&cubeState){console.log('🔍 Cube state changed, pieces count:',cubeState.length);console.log('🔍 First few pieces:',cubeState.slice(0,3));// Create enhanced cube state with debugging information\nconst enhancedCubeState={timestamp:new Date().toISOString(),totalPieces:cubeState.length,pieces:cubeState.map((piece,index)=>({pieceId:index,position:piece.position,colors:piece.colors,rotationHistory:piece.rotationHistory,shapeType:getShapeType(index),shapeColor:getShapeColor(index),// Validation data\nvalidation:{isInCorrectPosition:isPieceInCorrectPosition(piece,index),expectedColors:getExpectedColorsForPosition(piece.position),colorMismatches:getColorMismatches(piece),visibleFaces:getVisibleFaces(piece.position),visibleColors:getVisibleColors(piece)},// Debugging helpers\ndebug:{positionString:\"[\".concat(piece.position.join(', '),\"]\"),colorSummary:Object.entries(piece.colors).filter(_ref3=>{let[_,color]=_ref3;return color!=='black';}).map(_ref4=>{let[face,color]=_ref4;return\"\".concat(face,\":\").concat(color);}).join(', '),moveCount:piece.rotationHistory.length,lastMove:piece.rotationHistory[piece.rotationHistory.length-1]||null}})),// Global validation\nvalidation:{isSolved:isCubeSolved(cubeState),totalMoves:cubeState.reduce((sum,piece)=>sum+piece.rotationHistory.length,0),piecesInCorrectPosition:cubeState.filter((piece,index)=>isPieceInCorrectPosition(piece,index)).length,piecesWithColorMismatches:cubeState.filter(piece=>getColorMismatches(piece).length>0).length},// Metadata\nmetadata:{version:\"1.0.0\",exportReason:\"debugging\",cubeType:\"3x3x3\",coordinateSystem:\"right-handed (X-right, Y-up, Z-front)\",faceMapping:{front:\"Z+ (white)\",back:\"Z- (yellow)\",right:\"X+ (red)\",left:\"X- (orange)\",top:\"Y+ (blue)\",bottom:\"Y- (green)\"},shapeMapping:{\"0-4\":\"Squares (Red, Blue, Green, Orange, Purple)\",\"5-9\":\"Circles (Red, Blue, Green, Orange, Purple)\",\"10-14\":\"Triangles (Red, Blue, Green, Orange, Purple)\",\"15-19\":\"Diamonds (Red, Blue, Green, Orange, Purple)\",\"20-25\":\"Squares+White (Red, Blue, Green, Orange, Purple, Cyan)\"}}};onCubeStateChange(enhancedCubeState);}},[onCubeStateChange,cubeState]);// Auto-rotation animation\nuseFrame(()=>{if(groupRef.current&&isRotating&&!isAnimating){groupRef.current.rotation.x+=rotationSpeed.x;groupRef.current.rotation.y+=rotationSpeed.y;}});return/*#__PURE__*/_jsx(\"group\",{ref:groupRef,children:cubeState.map((piece,index)=>/*#__PURE__*/_jsx(CubePiece,{position:piece.position,colors:piece.colors,pieceId:index},index))});}// Main Rubik's Cube component\nfunction RubiksCube(_ref5){let{isRotating,autoRotate=false,onScramble,onReset,onCubeStateChange}=_ref5;const groupRef=useRef();const[rotationSpeed]=useState({x:0.005,y:0.01});const{cubeState,isAnimating,rotateFace,scramble,reset}=useCubeState();// Expose functions to parent\nReact.useEffect(()=>{if(onScramble)onScramble(scramble);if(onReset)onReset(reset);},[onScramble,onReset,scramble,reset]);// Notify parent of cube state changes\nReact.useEffect(()=>{if(onCubeStateChange&&cubeState){onCubeStateChange(cubeState);}},[onCubeStateChange,cubeState]);return/*#__PURE__*/_jsxs(Canvas,{camera:{position:[5,5,5],fov:50},style:{width:'100%',height:'100%'},children:[/*#__PURE__*/_jsx(\"ambientLight\",{intensity:1.2}),/*#__PURE__*/_jsx(\"directionalLight\",{position:[10,10,5],intensity:3.0}),/*#__PURE__*/_jsx(\"pointLight\",{position:[10,10,10],intensity:2.0}),/*#__PURE__*/_jsx(\"pointLight\",{position:[-10,-10,-10],intensity:2.0}),/*#__PURE__*/_jsx(\"spotLight\",{position:[0,10,0],angle:0.3,penumbra:1,intensity:2.0,castShadow:true}),/*#__PURE__*/_jsx(Environment,{preset:\"sunset\"}),/*#__PURE__*/_jsx(CubeGroup,{isRotating:isRotating,autoRotate:autoRotate,onScramble:onScramble,onReset:onReset,onCubeStateChange:onCubeStateChange}),/*#__PURE__*/_jsx(OrbitControls,{enablePan:true,enableZoom:true,enableRotate:true})]});}export default RubiksCube;","map":{"version":3,"names":["React","useState","useRef","useMemo","useCallback","useEffect","Canvas","useFrame","OrbitControls","Environment","THREE","jsx","_jsx","jsxs","_jsxs","logToTerminal","message","data","arguments","length","undefined","console","log","concat","JSON","stringify","repeat","fetch","method","headers","body","catch","error","warn","createShape","pieceId","size","shapes","position","children","args","color","rotation","Math","PI","shapeIndex","CubePiece","_ref","colors","meshRef","shapeTypes","shapeColors","shapeType","shapeColor","join","x","y","z","visibleFaces","push","map","face","colorMap","cubeGeometry","BoxGeometry","faceGeometry","geometry","PlaneGeometry","getFaceColor","faceIndex","includes","faceColor","front","back","right","left","top","bottom","faceNames","facePosition","faceRotation","side","FrontSide","emissive","emissiveIntensity","useCubeState","cubeState","setCubeState","state","rotationHistory","isAnimating","setIsAnimating","applyRotation","pieces","direction","forEach","piece","newX","newY","newZ","positionChanged","move","fromPosition","toPosition","timestamp","Date","toISOString","rotateFace","prevState","newState","index","_objectSpread","setTimeout","executeScramble","sequence","currentState","slice","scramble","moves","directions","scrambleSequence","i","floor","random","reset","CubeGroup","_ref2","isRotating","autoRotate","onScramble","onReset","onCubeStateChange","groupRef","rotationSpeed","getShapeType","getShapeColor","getExpectedPosition","positions","getExpectedColorsForPosition","expectedColors","isPieceInCorrectPosition","expectedPosition","getColorMismatches","expected","mismatches","Object","keys","actual","getVisibleFaces","getVisibleColors","isCubeSolved","every","enhancedCubeState","totalPieces","validation","isInCorrectPosition","colorMismatches","visibleColors","debug","positionString","colorSummary","entries","filter","_ref3","_","_ref4","moveCount","lastMove","isSolved","totalMoves","reduce","sum","piecesInCorrectPosition","piecesWithColorMismatches","metadata","version","exportReason","cubeType","coordinateSystem","faceMapping","shapeMapping","current","ref","RubiksCube","_ref5","camera","fov","style","width","height","intensity","angle","penumbra","castShadow","preset","enablePan","enableZoom","enableRotate"],"sources":["C:/Repo/GitHub/rubiks-cube/src/components/RubiksCube.js"],"sourcesContent":["import React, { useState, useRef, useMemo, useCallback, useEffect } from 'react';\r\nimport { Canvas, useFrame } from '@react-three/fiber';\r\nimport { OrbitControls, Environment } from '@react-three/drei';\r\nimport * as THREE from 'three';\r\n\r\n// Custom logging function that will be visible in terminal\r\nconst logToTerminal = (message, data = null) => {\r\n  // Log to browser console\r\n  console.log(`\\n🎯 ${message}`);\r\n  if (data) {\r\n    console.log(JSON.stringify(data, null, 2));\r\n  }\r\n  console.log('='.repeat(80) + '\\n');\r\n  \r\n  // Send to log server to print in terminal\r\n  fetch('http://localhost:3001/log', {\r\n    method: 'POST',\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n    },\r\n    body: JSON.stringify({\r\n      message: message,\r\n      data: data\r\n    })\r\n  }).catch(error => {\r\n    console.warn('Could not send log to terminal server:', error);\r\n  });\r\n};\r\n\r\n// Function to create unique shapes for each piece\r\nfunction createShape(pieceId, size) {\r\n  const shapes = [\r\n    // 0-4: Basic geometric shapes (Squares)\r\n    () => <mesh position={[0, 0, 0.012]}><planeGeometry args={[size, size]} /><meshBasicMaterial color=\"red\" /></mesh>, // Square\r\n    () => <mesh position={[0, 0, 0.012]}><planeGeometry args={[size, size]} /><meshBasicMaterial color=\"blue\" /></mesh>, // Square\r\n    () => <mesh position={[0, 0, 0.012]}><planeGeometry args={[size, size]} /><meshBasicMaterial color=\"green\" /></mesh>, // Square\r\n    () => <mesh position={[0, 0, 0.012]}><planeGeometry args={[size, size]} /><meshBasicMaterial color=\"orange\" /></mesh>, // Square\r\n    () => <mesh position={[0, 0, 0.012]}><planeGeometry args={[size, size]} /><meshBasicMaterial color=\"purple\" /></mesh>, // Square\r\n\r\n    // 5-9: Circles\r\n    () => <mesh position={[0, 0, 0.012]}><circleGeometry args={[size/2, 32]} /><meshBasicMaterial color=\"red\" /></mesh>, // Circle\r\n    () => <mesh position={[0, 0, 0.012]}><circleGeometry args={[size/2, 32]} /><meshBasicMaterial color=\"blue\" /></mesh>, // Circle\r\n    () => <mesh position={[0, 0, 0.012]}><circleGeometry args={[size/2, 32]} /><meshBasicMaterial color=\"green\" /></mesh>, // Circle\r\n    () => <mesh position={[0, 0, 0.012]}><circleGeometry args={[size/2, 32]} /><meshBasicMaterial color=\"orange\" /></mesh>, // Circle\r\n    () => <mesh position={[0, 0, 0.012]}><circleGeometry args={[size/2, 32]} /><meshBasicMaterial color=\"purple\" /></mesh>, // Circle\r\n\r\n    // 10-14: Triangles (using planeGeometry for now, ideally custom geometry)\r\n    () => <mesh position={[0, 0, 0.012]}><planeGeometry args={[size, size]} /><meshBasicMaterial color=\"red\" /></mesh>, // Triangle\r\n    () => <mesh position={[0, 0, 0.012]}><planeGeometry args={[size, size]} /><meshBasicMaterial color=\"blue\" /></mesh>, // Triangle\r\n    () => <mesh position={[0, 0, 0.012]}><planeGeometry args={[size, size]} /><meshBasicMaterial color=\"green\" /></mesh>, // Triangle\r\n    () => <mesh position={[0, 0, 0.012]}><planeGeometry args={[size, size]} /><meshBasicMaterial color=\"orange\" /></mesh>, // Triangle\r\n    () => <mesh position={[0, 0, 0.012]}><planeGeometry args={[size, size]} /><meshBasicMaterial color=\"purple\" /></mesh>, // Triangle\r\n\r\n    // 15-19: Diamonds (rotated squares)\r\n    () => <group position={[0, 0, 0.012]}><mesh rotation={[0, 0, Math.PI/4]}><planeGeometry args={[size, size]} /><meshBasicMaterial color=\"red\" /></mesh></group>, // Diamond\r\n    () => <group position={[0, 0, 0.012]}><mesh rotation={[0, 0, Math.PI/4]}><planeGeometry args={[size, size]} /><meshBasicMaterial color=\"blue\" /></mesh></group>, // Diamond\r\n    () => <group position={[0, 0, 0.012]}><mesh rotation={[0, 0, Math.PI/4]}><planeGeometry args={[size, size]} /><meshBasicMaterial color=\"green\" /></mesh></group>, // Diamond\r\n    () => <group position={[0, 0, 0.012]}><mesh rotation={[0, 0, Math.PI/4]}><planeGeometry args={[size, size]} /><meshBasicMaterial color=\"orange\" /></mesh></group>, // Diamond\r\n    () => <group position={[0, 0, 0.012]}><mesh rotation={[0, 0, Math.PI/4]}><planeGeometry args={[size, size]} /><meshBasicMaterial color=\"purple\" /></mesh></group>, // Diamond\r\n\r\n    // 20-25: Complex patterns (Squares with white centers)\r\n    () => <group position={[0, 0, 0.012]}><mesh><planeGeometry args={[size, size]} /><meshBasicMaterial color=\"red\" /></mesh><mesh position={[0, 0, 0.001]}><planeGeometry args={[size*0.5, size*0.5]} /><meshBasicMaterial color=\"white\" /></mesh></group>, // Square with white center\r\n    () => <group position={[0, 0, 0.012]}><mesh><planeGeometry args={[size, size]} /><meshBasicMaterial color=\"blue\" /></mesh><mesh position={[0, 0, 0.001]}><planeGeometry args={[size*0.5, size*0.5]} /><meshBasicMaterial color=\"white\" /></mesh></group>, // Square with white center\r\n    () => <group position={[0, 0, 0.012]}><mesh><planeGeometry args={[size, size]} /><meshBasicMaterial color=\"green\" /></mesh><mesh position={[0, 0, 0.001]}><planeGeometry args={[size*0.5, size*0.5]} /><meshBasicMaterial color=\"white\" /></mesh></group>, // Square with white center\r\n    () => <group position={[0, 0, 0.012]}><mesh><planeGeometry args={[size, size]} /><meshBasicMaterial color=\"orange\" /></mesh><mesh position={[0, 0, 0.001]}><planeGeometry args={[size*0.5, size*0.5]} /><meshBasicMaterial color=\"white\" /></mesh></group>, // Square with white center\r\n    () => <group position={[0, 0, 0.012]}><mesh><planeGeometry args={[size, size]} /><meshBasicMaterial color=\"purple\" /></mesh><mesh position={[0, 0, 0.001]}><planeGeometry args={[size*0.5, size*0.5]} /><meshBasicMaterial color=\"white\" /></mesh></group>, // Square with white center\r\n    () => <group position={[0, 0, 0.012]}><mesh><planeGeometry args={[size, size]} /><meshBasicMaterial color=\"cyan\" /></mesh><mesh position={[0, 0, 0.001]}><planeGeometry args={[size*0.5, size*0.5]} /><meshBasicMaterial color=\"white\" /></mesh></group> // Square with white center\r\n  ];\r\n  \r\n  const shapeIndex = pieceId; // Changed from pieceId % shapes.length\r\n  return shapes[shapeIndex]();\r\n}\r\n\r\n// Individual cube piece component\r\nfunction CubePiece({ position, colors, size = 0.95, pieceId = 0 }) {\r\n  const meshRef = useRef();\r\n  \r\n  // Log piece information for debugging\r\n  React.useEffect(() => {\r\n    const shapeTypes = ['Square', 'Square', 'Square', 'Square', 'Square', 'Circle', 'Circle', 'Circle', 'Circle', 'Circle', 'Triangle', 'Triangle', 'Triangle', 'Triangle', 'Triangle', 'Diamond', 'Diamond', 'Diamond', 'Diamond', 'Diamond', 'Square+White', 'Square+White', 'Square+White', 'Square+White', 'Square+White', 'Square+White'];\r\n    const shapeColors = ['Red', 'Blue', 'Green', 'Orange', 'Purple', 'Red', 'Blue', 'Green', 'Orange', 'Purple', 'Red', 'Blue', 'Green', 'Orange', 'Purple', 'Red', 'Blue', 'Green', 'Orange', 'Purple', 'Red', 'Blue', 'Green', 'Orange', 'Purple', 'Cyan'];\r\n    \r\n    const shapeType = shapeTypes[pieceId] || 'Unknown'; // Changed from pieceId % shapeTypes.length\r\n    const shapeColor = shapeColors[pieceId] || 'Unknown'; // Changed from pieceId % shapeColors.length\r\n    \r\n    // Debug specific pieces only\r\n    if (pieceId === 0 || pieceId === 17 || pieceId === 25 || pieceId === 1 || pieceId === 11) {\r\n      console.log(`🔍 ${shapeColor} ${shapeType} Piece ${pieceId} at position [${position.join(', ')}]`);\r\n      console.log(`  Stored Colors:`, colors);\r\n      \r\n      // Show what colors should be visible based on position\r\n      const [x, y, z] = position;\r\n      const visibleFaces = [];\r\n      if (x === 1) visibleFaces.push('right');\r\n      if (x === -1) visibleFaces.push('left');\r\n      if (y === 1) visibleFaces.push('top');\r\n      if (y === -1) visibleFaces.push('bottom');\r\n      if (z === 1) visibleFaces.push('front');\r\n      if (z === -1) visibleFaces.push('back');\r\n      \r\n      console.log(`  Visible faces:`, visibleFaces);\r\n      console.log(`  Colors on visible faces:`, visibleFaces.map(face => `${face}: ${colors[face]}`));\r\n    }\r\n  }, [pieceId, position, colors]);\r\n\r\n  // Color mapping\r\n  const colorMap = {\r\n    'white': '#FFFFFF',\r\n    'yellow': '#FFD700',\r\n    'red': '#FF0000',\r\n    'orange': '#FFA500',\r\n    'blue': '#0000FF',\r\n    'green': '#00FF00',\r\n    'black': '#000000'\r\n  };\r\n\r\n  // Create cube geometry\r\n  const cubeGeometry = useMemo(() => new THREE.BoxGeometry(size, size, size), [size]);\r\n  \r\n  // Create face geometry\r\n  const faceGeometry = useMemo(() => {\r\n    const geometry = new THREE.PlaneGeometry(size, size);\r\n    return geometry;\r\n  }, [size]);\r\n\r\n  // Get the color for a face based on the face index and position\r\n  const getFaceColor = (faceIndex) => {\r\n    const [x, y, z] = position;\r\n    \r\n    // Determine which faces are visible based on position\r\n    const visibleFaces = [];\r\n    if (x === 1) visibleFaces.push(2); // Right face visible\r\n    if (x === -1) visibleFaces.push(3); // Left face visible\r\n    if (y === 1) visibleFaces.push(4); // Top face visible\r\n    if (y === -1) visibleFaces.push(5); // Bottom face visible\r\n    if (z === 1) visibleFaces.push(0); // Front face visible\r\n    if (z === -1) visibleFaces.push(1); // Back face visible\r\n    \r\n    // If this face is not visible, return black\r\n    if (!visibleFaces.includes(faceIndex)) {\r\n      return 'black';\r\n    }\r\n    \r\n    // Map face index to color property\r\n    let faceColor;\r\n    switch (faceIndex) {\r\n      case 0: faceColor = colors.front; break;  // Front face\r\n      case 1: faceColor = colors.back; break;   // Back face\r\n      case 2: faceColor = colors.right; break;  // Right face\r\n      case 3: faceColor = colors.left; break;   // Left face\r\n      case 4: faceColor = colors.top; break;    // Top face\r\n      case 5: faceColor = colors.bottom; break; // Bottom face\r\n      default: faceColor = 'black';\r\n    }\r\n    \r\n    // Debug logging for specific pieces\r\n    if (pieceId === 2 || pieceId === 11 || pieceId === 16 || pieceId === 19 || pieceId === 22 || pieceId === 25) {\r\n      const faceNames = ['front', 'back', 'right', 'left', 'top', 'bottom'];\r\n      console.log(`🎨 Piece ${pieceId} face ${faceNames[faceIndex]} (${faceIndex}) at [${x},${y},${z}]: ${faceColor} (visible: ${visibleFaces.includes(faceIndex)})`);\r\n    }\r\n    \r\n    return faceColor;\r\n  };\r\n\r\n  return (\r\n    <group position={position}>\r\n      {/* Solid cube base */}\r\n      <mesh geometry={cubeGeometry}>\r\n        <meshPhongMaterial color=\"#333333\" />\r\n      </mesh>\r\n      \r\n      {/* Colored faces */}\r\n      {[0, 1, 2, 3, 4, 5].map((faceIndex) => {\r\n        const faceColor = getFaceColor(faceIndex);\r\n        \r\n        // Define face positions and rotations correctly\r\n        let facePosition, faceRotation;\r\n        \r\n        switch (faceIndex) {\r\n          case 0: // Front face (Z+)\r\n            facePosition = [0, 0, size/2 + 0.001];\r\n            faceRotation = [0, 0, 0];\r\n            break;\r\n          case 1: // Back face (Z-)\r\n            facePosition = [0, 0, -size/2 - 0.001];\r\n            faceRotation = [0, Math.PI, 0];\r\n            break;\r\n          case 2: // Right face (X+)\r\n            facePosition = [size/2 + 0.001, 0, 0];\r\n            faceRotation = [0, Math.PI/2, 0];\r\n            break;\r\n          case 3: // Left face (X-)\r\n            facePosition = [-size/2 - 0.001, 0, 0];\r\n            faceRotation = [0, -Math.PI/2, 0];\r\n            break;\r\n          case 4: // Top face (Y+)\r\n            facePosition = [0, size/2 + 0.001, 0];\r\n            faceRotation = [-Math.PI/2, 0, 0];\r\n            break;\r\n          case 5: // Bottom face (Y-)\r\n            facePosition = [0, -size/2 - 0.001, 0];\r\n            faceRotation = [Math.PI/2, 0, 0];\r\n            break;\r\n          default:\r\n            facePosition = [0, 0, 0];\r\n            faceRotation = [0, 0, 0];\r\n        }\r\n        \r\n        return (\r\n          <mesh\r\n            key={faceIndex}\r\n            position={facePosition}\r\n            rotation={faceRotation}\r\n            geometry={faceGeometry}\r\n          >\r\n            <meshPhongMaterial \r\n              color={colorMap[faceColor] || '#000000'} \r\n              side={THREE.FrontSide}\r\n              emissive={colorMap[faceColor] || '#000000'}\r\n              emissiveIntensity={0.3}\r\n            />\r\n          </mesh>\r\n        );\r\n      })}\r\n      \r\n      {/* Debug shape on all faces */}\r\n      {[0, 1, 2, 3, 4, 5].map((faceIndex) => {\r\n        // Define face positions and rotations correctly (same as colored faces)\r\n        let facePosition, faceRotation;\r\n        \r\n        switch (faceIndex) {\r\n          case 0: // Front face (Z+)\r\n            facePosition = [0, 0, size/2 + 0.002];\r\n            faceRotation = [0, 0, 0];\r\n            break;\r\n          case 1: // Back face (Z-)\r\n            facePosition = [0, 0, -size/2 - 0.002];\r\n            faceRotation = [0, Math.PI, 0];\r\n            break;\r\n          case 2: // Right face (X+)\r\n            facePosition = [size/2 + 0.002, 0, 0];\r\n            faceRotation = [0, Math.PI/2, 0];\r\n            break;\r\n          case 3: // Left face (X-)\r\n            facePosition = [-size/2 - 0.002, 0, 0];\r\n            faceRotation = [0, -Math.PI/2, 0];\r\n            break;\r\n          case 4: // Top face (Y+)\r\n            facePosition = [0, size/2 + 0.002, 0];\r\n            faceRotation = [-Math.PI/2, 0, 0];\r\n            break;\r\n          case 5: // Bottom face (Y-)\r\n            facePosition = [0, -size/2 - 0.002, 0];\r\n            faceRotation = [Math.PI/2, 0, 0];\r\n            break;\r\n          default:\r\n            facePosition = [0, 0, 0];\r\n            faceRotation = [0, 0, 0];\r\n        }\r\n        \r\n        return (\r\n          <group key={`shape-${faceIndex}`} position={facePosition} rotation={faceRotation}>\r\n            {createShape(pieceId, size * 0.3)}\r\n          </group>\r\n        );\r\n      })}\r\n    </group>\r\n  );\r\n}\r\n\r\n// Custom hook for cube state management\r\nfunction useCubeState() {\r\n  const [cubeState, setCubeState] = useState(() => {\r\n    const state = [];\r\n    \r\n    // Create 26 pieces (3x3x3 minus center)\r\n    for (let x = -1; x <= 1; x++) {\r\n      for (let y = -1; y <= 1; y++) {\r\n        for (let z = -1; z <= 1; z++) {\r\n          // Skip the center piece\r\n          if (x === 0 && y === 0 && z === 0) continue;\r\n          \r\n          // Determine piece type and assign colors accordingly\r\n          let colors = {\r\n            front: 'black',\r\n            back: 'black', \r\n            right: 'black',\r\n            left: 'black',\r\n            top: 'black',\r\n            bottom: 'black'\r\n          };\r\n          \r\n          // Assign colors based on piece position in solved state\r\n          // Only assign colors to faces that are visible (not internal)\r\n          if (x === -1) colors.left = 'orange';\r\n          if (x === 1) colors.right = 'red';\r\n          if (y === -1) colors.bottom = 'green';\r\n          if (y === 1) colors.top = 'blue';\r\n          if (z === -1) colors.back = 'yellow';\r\n          if (z === 1) colors.front = 'white';\r\n          \r\n          // Debug logging for initial state\r\n          console.log(`Initial piece at [${x}, ${y}, ${z}]:`, colors);\r\n          \r\n          state.push({ \r\n            position: [x, y, z], \r\n            colors,\r\n            rotationHistory: [] // Track all rotations this piece has undergone\r\n          });\r\n        }\r\n      }\r\n    }\r\n    \r\n    // Log the complete initial cube state as JSON\r\n    console.log('🎯 INITIAL CUBE STATE (End of Initial Load):');\r\n    console.log(JSON.stringify(state, null, 2));\r\n    \r\n    // Also log to terminal (this will show in the terminal where npm start is running)\r\n    logToTerminal('INITIAL CUBE STATE (End of Initial Load)', state);\r\n    \r\n    return state;\r\n  });\r\n\r\n  const [isAnimating, setIsAnimating] = useState(false);\r\n\r\n  // Consolidated rotation logic\r\n  const applyRotation = useCallback((pieces, face, direction) => {\r\n    pieces.forEach(piece => {\r\n      const [x, y, z] = piece.position;\r\n      let newX = x, newY = y, newZ = z;\r\n      // Apply 3D transformation\r\n      switch (face) {\r\n        case 'F': // Front face rotation\r\n          if (z === 1) { // Only pieces on the front face\r\n            if (direction === 'clockwise') {\r\n              newX = -y;\r\n              newY = x;\r\n            } else {\r\n              newX = y;\r\n              newY = -x;\r\n            }\r\n          }\r\n          break;\r\n        case 'B': // Back face rotation\r\n          if (z === -1) { // Only pieces on the back face\r\n            if (direction === 'clockwise') {\r\n              newX = y;\r\n              newY = -x;\r\n            } else {\r\n              newX = -y;\r\n              newY = x;\r\n            }\r\n          }\r\n          break;\r\n        case 'R': // Right face rotation\r\n          if (x === 1) { // Only pieces on the right face\r\n            if (direction === 'clockwise') {\r\n              newZ = -y;\r\n              newY = z;\r\n            } else {\r\n              newZ = y;\r\n              newY = -z;\r\n            }\r\n          }\r\n          break;\r\n        case 'L': // Left face rotation\r\n          if (x === -1) { // Only pieces on the left face\r\n            if (direction === 'clockwise') {\r\n              newZ = y;\r\n              newY = -z;\r\n            } else {\r\n              newZ = -y;\r\n              newY = z;\r\n            }\r\n          }\r\n          break;\r\n        case 'U': // Up face rotation\r\n          if (y === 1) { // Only pieces on the top face\r\n            if (direction === 'clockwise') {\r\n              newX = z;\r\n              newZ = -x;\r\n            } else {\r\n              newX = -z;\r\n              newZ = x;\r\n            }\r\n          }\r\n          break;\r\n        case 'D': // Down face rotation\r\n          if (y === -1) { // Only pieces on the bottom face\r\n            if (direction === 'clockwise') {\r\n              newX = -z;\r\n              newZ = x;\r\n            } else {\r\n              newX = z;\r\n              newZ = -x;\r\n            }\r\n          }\r\n          break;\r\n      }\r\n      \r\n      // Only apply changes if the piece actually moved\r\n      const positionChanged = (x !== newX || y !== newY || z !== newZ);\r\n      \r\n      if (positionChanged) {\r\n        // Update position\r\n        piece.position = [newX, newY, newZ];\r\n        \r\n        // Keep the existing colors - they should travel with the piece\r\n        // No need to reassign colors based on position\r\n        // The colors should stay with the piece as it moves around\r\n        \r\n        piece.rotationHistory.push({\r\n          move: face,\r\n          direction: direction,\r\n          fromPosition: [x, y, z],\r\n          toPosition: [newX, newY, newZ],\r\n          timestamp: new Date().toISOString()\r\n        });\r\n      }\r\n    });\r\n  }, []);\r\n\r\n  // Rotate a face of the cube\r\n  const rotateFace = useCallback((face, direction) => {\r\n    if (isAnimating) return;\r\n    \r\n    setIsAnimating(true);\r\n    \r\n    setCubeState(prevState => {\r\n      const newState = [...prevState];\r\n      const pieces = newState.map((piece, index) => ({ ...piece, pieceId: index }));\r\n      \r\n      // Apply rotation using consolidated logic\r\n      applyRotation(pieces, face, direction);\r\n\r\n      // Update the newState with the modified pieces\r\n      pieces.forEach((piece, index) => {\r\n        newState[index] = {\r\n          position: piece.position,\r\n          colors: piece.colors,\r\n          rotationHistory: piece.rotationHistory\r\n        };\r\n      });\r\n      \r\n      return newState;\r\n    });\r\n    \r\n    // Reset animation state after a short delay\r\n    setTimeout(() => setIsAnimating(false), 100);\r\n  }, [isAnimating, applyRotation]);\r\n\r\n  // Execute scramble sequence\r\n  const executeScramble = useCallback((sequence) => {\r\n    if (sequence.length === 0) {\r\n      setIsAnimating(false);\r\n      \r\n      // Log the complete cube state as JSON at the end of scramble session\r\n      // We need to get the current state from the setter function\r\n      setCubeState(currentState => {\r\n        console.log('🎯 CUBE STATE AFTER SCRAMBLE (End of Scramble Session):');\r\n        console.log(JSON.stringify(currentState, null, 2));\r\n        \r\n        // Also log to terminal (this will show in the terminal where npm start is running)\r\n        logToTerminal('CUBE STATE AFTER SCRAMBLE (End of Scramble Session)', currentState);\r\n        \r\n        return currentState; // Return unchanged state\r\n      });\r\n      \r\n      return;\r\n    }\r\n    \r\n    const { move, direction } = sequence[0];\r\n    console.log(`Executing move: ${move} ${direction}`);\r\n    \r\n    // Apply the move using consolidated logic\r\n    setCubeState(prevState => {\r\n      const newState = [...prevState];\r\n      const pieces = newState.map((piece, index) => ({ ...piece, pieceId: index }));\r\n      \r\n      // Apply rotation using consolidated logic\r\n      applyRotation(pieces, move, direction);\r\n\r\n      // Update the newState with the modified pieces\r\n      pieces.forEach((piece, index) => {\r\n        newState[index] = {\r\n          position: piece.position,\r\n          colors: piece.colors,\r\n          rotationHistory: piece.rotationHistory\r\n        };\r\n      });\r\n      \r\n      return newState;\r\n    });\r\n    \r\n    // Continue with next move after a short delay\r\n    setTimeout(() => executeScramble(sequence.slice(1)), 100);\r\n  }, [applyRotation]);\r\n\r\n  // Scramble the cube\r\n  const scramble = useCallback(() => {\r\n    if (isAnimating) return;\r\n    \r\n    setIsAnimating(true);\r\n    \r\n    const moves = ['F', 'B', 'R', 'L', 'U', 'D'];\r\n    const directions = ['clockwise', 'counterclockwise'];\r\n    const scrambleSequence = [];\r\n    \r\n    // Generate 20 random moves\r\n    for (let i = 0; i < 20; i++) {\r\n      const move = moves[Math.floor(Math.random() * moves.length)];\r\n      const direction = directions[Math.floor(Math.random() * directions.length)];\r\n      scrambleSequence.push({ move, direction });\r\n    }\r\n    \r\n    console.log('Scrambling with sequence:', scrambleSequence);\r\n    \r\n    // Execute scramble moves\r\n    executeScramble(scrambleSequence);\r\n  }, [isAnimating, executeScramble]);\r\n\r\n  // Reset the cube to solved state\r\n  const reset = useCallback(() => {\r\n    setCubeState(() => {\r\n      const state = [];\r\n      \r\n      // Create 26 pieces (3x3x3 minus center)\r\n      for (let x = -1; x <= 1; x++) {\r\n        for (let y = -1; y <= 1; y++) {\r\n          for (let z = -1; z <= 1; z++) {\r\n            // Skip the center piece\r\n            if (x === 0 && y === 0 && z === 0) continue;\r\n            \r\n            // Determine piece type and assign colors accordingly\r\n            let colors = {\r\n              front: 'black',\r\n              back: 'black', \r\n              right: 'black',\r\n              left: 'black',\r\n              top: 'black',\r\n              bottom: 'black'\r\n            };\r\n            \r\n            // Assign colors based on piece position in solved state\r\n            // Only assign colors to faces that are visible (not internal)\r\n            if (x === -1) colors.left = 'orange';\r\n            if (x === 1) colors.right = 'red';\r\n            if (y === -1) colors.bottom = 'green';\r\n            if (y === 1) colors.top = 'blue';\r\n            if (z === -1) colors.back = 'yellow';\r\n            if (z === 1) colors.front = 'white';\r\n            \r\n            // Debug logging for reset state\r\n            console.log(`Reset piece at [${x}, ${y}, ${z}]:`, colors);\r\n            \r\n            state.push({ \r\n              position: [x, y, z], \r\n              colors,\r\n              rotationHistory: [] // Reset rotation history\r\n            });\r\n          }\r\n        }\r\n      }\r\n      \r\n      return state;\r\n    });\r\n  }, []);\r\n\r\n  return {\r\n    cubeState,\r\n    isAnimating,\r\n    rotateFace,\r\n    scramble,\r\n    reset\r\n  };\r\n}\r\n\r\n// Main cube group component with enhanced structure\r\nfunction CubeGroup({ isRotating, autoRotate = false, onScramble, onReset, onCubeStateChange }) {\r\n  const groupRef = useRef();\r\n  const [rotationSpeed] = useState({ x: 0.005, y: 0.01 });\r\n  \r\n  const { cubeState, isAnimating, rotateFace, scramble, reset } = useCubeState();\r\n  \r\n  // Helper functions for enhanced debugging\r\n  const getShapeType = (pieceId) => {\r\n    const shapeTypes = ['Square', 'Square', 'Square', 'Square', 'Square', 'Circle', 'Circle', 'Circle', 'Circle', 'Circle', 'Triangle', 'Triangle', 'Triangle', 'Triangle', 'Triangle', 'Diamond', 'Diamond', 'Diamond', 'Diamond', 'Diamond', 'Square+White', 'Square+White', 'Square+White', 'Square+White', 'Square+White', 'Square+White'];\r\n    return shapeTypes[pieceId] || 'Unknown';\r\n  };\r\n\r\n  const getShapeColor = (pieceId) => {\r\n    const shapeColors = ['Red', 'Blue', 'Green', 'Orange', 'Purple', 'Red', 'Blue', 'Green', 'Orange', 'Purple', 'Red', 'Blue', 'Green', 'Orange', 'Purple', 'Red', 'Blue', 'Green', 'Orange', 'Purple', 'Red', 'Blue', 'Green', 'Orange', 'Purple', 'Cyan'];\r\n    return shapeColors[pieceId] || 'Unknown';\r\n  };\r\n\r\n  const getExpectedPosition = (pieceId) => {\r\n    // Map pieceId to expected solved position\r\n    const positions = [];\r\n    for (let x = -1; x <= 1; x++) {\r\n      for (let y = -1; y <= 1; y++) {\r\n        for (let z = -1; z <= 1; z++) {\r\n          if (x === 0 && y === 0 && z === 0) continue;\r\n          positions.push([x, y, z]);\r\n        }\r\n      }\r\n    }\r\n    return positions[pieceId];\r\n  };\r\n\r\n  const getExpectedColorsForPosition = (position) => {\r\n    const [x, y, z] = position;\r\n    const expectedColors = {\r\n      front: 'black',\r\n      back: 'black',\r\n      right: 'black',\r\n      left: 'black',\r\n      top: 'black',\r\n      bottom: 'black'\r\n    };\r\n    \r\n    if (x === -1) expectedColors.left = 'orange';\r\n    if (x === 1) expectedColors.right = 'red';\r\n    if (y === -1) expectedColors.bottom = 'green';\r\n    if (y === 1) expectedColors.top = 'blue';\r\n    if (z === -1) expectedColors.back = 'yellow';\r\n    if (z === 1) expectedColors.front = 'white';\r\n    \r\n    return expectedColors;\r\n  };\r\n\r\n  const isPieceInCorrectPosition = (piece, pieceId) => {\r\n    // Check if piece is in its solved position\r\n    const [x, y, z] = piece.position;\r\n    const expectedPosition = getExpectedPosition(pieceId);\r\n    return x === expectedPosition[0] && y === expectedPosition[1] && z === expectedPosition[2];\r\n  };\r\n\r\n  const getColorMismatches = (piece) => {\r\n    const expected = getExpectedColorsForPosition(piece.position);\r\n    const mismatches = [];\r\n    \r\n    Object.keys(expected).forEach(face => {\r\n      if (expected[face] !== 'black' && piece.colors[face] !== expected[face]) {\r\n        mismatches.push({\r\n          face,\r\n          expected: expected[face],\r\n          actual: piece.colors[face]\r\n        });\r\n      }\r\n    });\r\n    \r\n    return mismatches;\r\n  };\r\n\r\n  const getVisibleFaces = (position) => {\r\n    const [x, y, z] = position;\r\n    const visibleFaces = [];\r\n    if (x === 1) visibleFaces.push('right');\r\n    if (x === -1) visibleFaces.push('left');\r\n    if (y === 1) visibleFaces.push('top');\r\n    if (y === -1) visibleFaces.push('bottom');\r\n    if (z === 1) visibleFaces.push('front');\r\n    if (z === -1) visibleFaces.push('back');\r\n    return visibleFaces;\r\n  };\r\n\r\n  const getVisibleColors = (piece) => {\r\n    const visibleFaces = getVisibleFaces(piece.position);\r\n    return visibleFaces.map(face => ({\r\n      face,\r\n      color: piece.colors[face]\r\n    }));\r\n  };\r\n\r\n  const isCubeSolved = (state) => {\r\n    return state.every((piece, index) => isPieceInCorrectPosition(piece, index));\r\n  };\r\n  \r\n  // Expose functions to parent\r\n  React.useEffect(() => {\r\n    if (onScramble) onScramble(scramble);\r\n    if (onReset) onReset(reset);\r\n  }, [onScramble, onReset, scramble, reset]);\r\n  \r\n  // Notify parent of cube state changes with enhanced debugging info\r\n  React.useEffect(() => {\r\n    if (onCubeStateChange && cubeState) {\r\n      console.log('🔍 Cube state changed, pieces count:', cubeState.length);\r\n      console.log('🔍 First few pieces:', cubeState.slice(0, 3));\r\n      \r\n      // Create enhanced cube state with debugging information\r\n      const enhancedCubeState = {\r\n        timestamp: new Date().toISOString(),\r\n        totalPieces: cubeState.length,\r\n        pieces: cubeState.map((piece, index) => ({\r\n          pieceId: index,\r\n          position: piece.position,\r\n          colors: piece.colors,\r\n          rotationHistory: piece.rotationHistory,\r\n          shapeType: getShapeType(index),\r\n          shapeColor: getShapeColor(index),\r\n          // Validation data\r\n          validation: {\r\n            isInCorrectPosition: isPieceInCorrectPosition(piece, index),\r\n            expectedColors: getExpectedColorsForPosition(piece.position),\r\n            colorMismatches: getColorMismatches(piece),\r\n            visibleFaces: getVisibleFaces(piece.position),\r\n            visibleColors: getVisibleColors(piece)\r\n          },\r\n          // Debugging helpers\r\n          debug: {\r\n            positionString: `[${piece.position.join(', ')}]`,\r\n            colorSummary: Object.entries(piece.colors)\r\n              .filter(([_, color]) => color !== 'black')\r\n              .map(([face, color]) => `${face}:${color}`)\r\n              .join(', '),\r\n            moveCount: piece.rotationHistory.length,\r\n            lastMove: piece.rotationHistory[piece.rotationHistory.length - 1] || null\r\n          }\r\n        })),\r\n        // Global validation\r\n        validation: {\r\n          isSolved: isCubeSolved(cubeState),\r\n          totalMoves: cubeState.reduce((sum, piece) => sum + piece.rotationHistory.length, 0),\r\n          piecesInCorrectPosition: cubeState.filter((piece, index) => \r\n            isPieceInCorrectPosition(piece, index)\r\n          ).length,\r\n          piecesWithColorMismatches: cubeState.filter(piece => \r\n            getColorMismatches(piece).length > 0\r\n          ).length\r\n        },\r\n        // Metadata\r\n        metadata: {\r\n          version: \"1.0.0\",\r\n          exportReason: \"debugging\",\r\n          cubeType: \"3x3x3\",\r\n          coordinateSystem: \"right-handed (X-right, Y-up, Z-front)\",\r\n          faceMapping: {\r\n            front: \"Z+ (white)\",\r\n            back: \"Z- (yellow)\", \r\n            right: \"X+ (red)\",\r\n            left: \"X- (orange)\",\r\n            top: \"Y+ (blue)\",\r\n            bottom: \"Y- (green)\"\r\n          },\r\n          shapeMapping: {\r\n            \"0-4\": \"Squares (Red, Blue, Green, Orange, Purple)\",\r\n            \"5-9\": \"Circles (Red, Blue, Green, Orange, Purple)\", \r\n            \"10-14\": \"Triangles (Red, Blue, Green, Orange, Purple)\",\r\n            \"15-19\": \"Diamonds (Red, Blue, Green, Orange, Purple)\",\r\n            \"20-25\": \"Squares+White (Red, Blue, Green, Orange, Purple, Cyan)\"\r\n          }\r\n        }\r\n      };\r\n      \r\n      onCubeStateChange(enhancedCubeState);\r\n    }\r\n  }, [onCubeStateChange, cubeState]);\r\n\r\n  // Auto-rotation animation\r\n  useFrame(() => {\r\n    if (groupRef.current && isRotating && !isAnimating) {\r\n      groupRef.current.rotation.x += rotationSpeed.x;\r\n      groupRef.current.rotation.y += rotationSpeed.y;\r\n    }\r\n  });\r\n\r\n  return (\r\n    <group ref={groupRef}>\r\n      {cubeState.map((piece, index) => (\r\n        <CubePiece\r\n          key={index}\r\n          position={piece.position}\r\n          colors={piece.colors}\r\n          pieceId={index}\r\n        />\r\n      ))}\r\n    </group>\r\n  );\r\n}\r\n\r\n// Main Rubik's Cube component\r\nfunction RubiksCube({ isRotating, autoRotate = false, onScramble, onReset, onCubeStateChange }) {\r\n  const groupRef = useRef();\r\n  const [rotationSpeed] = useState({ x: 0.005, y: 0.01 });\r\n  \r\n  const { cubeState, isAnimating, rotateFace, scramble, reset } = useCubeState();\r\n  \r\n  // Expose functions to parent\r\n  React.useEffect(() => {\r\n    if (onScramble) onScramble(scramble);\r\n    if (onReset) onReset(reset);\r\n  }, [onScramble, onReset, scramble, reset]);\r\n  \r\n  // Notify parent of cube state changes\r\n  React.useEffect(() => {\r\n    if (onCubeStateChange && cubeState) {\r\n      onCubeStateChange(cubeState);\r\n    }\r\n  }, [onCubeStateChange, cubeState]);\r\n\r\n  return (\r\n    <Canvas\r\n      camera={{ position: [5, 5, 5], fov: 50 }}\r\n      style={{ width: '100%', height: '100%' }}\r\n    >\r\n      {/* Enhanced lighting setup */}\r\n      <ambientLight intensity={1.2} />\r\n      <directionalLight position={[10, 10, 5]} intensity={3.0} />\r\n      <pointLight position={[10, 10, 10]} intensity={2.0} />\r\n      <pointLight position={[-10, -10, -10]} intensity={2.0} />\r\n      <spotLight\r\n        position={[0, 10, 0]}\r\n        angle={0.3}\r\n        penumbra={1}\r\n        intensity={2.0}\r\n        castShadow\r\n      />\r\n      \r\n      {/* Environment for better lighting */}\r\n      <Environment preset=\"sunset\" />\r\n      \r\n      <CubeGroup \r\n        isRotating={isRotating} \r\n        autoRotate={autoRotate}\r\n        onScramble={onScramble}\r\n        onReset={onReset}\r\n        onCubeStateChange={onCubeStateChange}\r\n      />\r\n      \r\n      <OrbitControls enablePan={true} enableZoom={true} enableRotate={true} />\r\n    </Canvas>\r\n  );\r\n}\r\n\r\nexport default RubiksCube;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}