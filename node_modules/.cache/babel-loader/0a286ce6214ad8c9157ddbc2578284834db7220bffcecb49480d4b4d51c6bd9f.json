{"ast":null,"code":"var _jsxFileName = \"C:\\\\Repo\\\\GitHub\\\\rubiks-cube\\\\src\\\\components\\\\RubiksCube.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$(),\n  _s3 = $RefreshSig$();\nimport React, { useState, useRef, useMemo, useCallback, useEffect } from 'react';\nimport { Canvas, useFrame } from '@react-three/fiber';\nimport { OrbitControls, Environment } from '@react-three/drei';\nimport * as THREE from 'three';\n\n// FORCE RELOAD - B ROTATION DEBUG - UPDATED AT 5:30 PM\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconsole.log('🔥 RUBIKSCUBE.JS LOADED - B ROTATION DEBUG MODE - UPDATED');\n\n// Special logging function for rotation tracking\nconst logRotationStep = (step, face, direction, data = null) => {\n  const timestamp = new Date().toLocaleTimeString();\n  const message = `🔄 ROTATION STEP ${step}: ${face} ${direction}`;\n  logToTerminal(message, data, 'INFO');\n};\n\n// Enhanced logging function that will be visible in terminal\nconst logToTerminal = (message, data = null, type = 'INFO') => {\n  const timestamp = new Date().toLocaleTimeString();\n  const prefix = type === 'ERROR' ? '❌' : type === 'WARNING' ? '⚠️' : type === 'SUCCESS' ? '✅' : '🎯';\n  const fullMessage = `${prefix} [${timestamp}] ${message}`;\n\n  // Create a more structured log entry\n  const logEntry = {\n    timestamp: timestamp,\n    type: type,\n    message: message,\n    data: data\n  };\n\n  // Log to browser console with enhanced formatting\n  console.log(`\\n${fullMessage}`);\n  if (data) {\n    if (typeof data === 'object') {\n      console.log(JSON.stringify(data, null, 2));\n    } else {\n      console.log(data);\n    }\n  }\n  console.log('='.repeat(80) + '\\n');\n\n  // Send to log server to print in terminal\n  fetch('http://localhost:3001/log', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(logEntry)\n  }).then(response => {\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    console.log('✅ Log sent to terminal successfully');\n  }).catch(error => {\n    console.error('❌ Could not send log to terminal server:', error);\n    console.log('💡 Make sure the log server is running with: npm run log-server');\n  });\n\n  // Also write to local file for analysis\n  const fileLogLine = `[${timestamp}] ${type}: ${message}${data ? ' | Data: ' + JSON.stringify(data) : ''}\\n`;\n  fetch('http://localhost:3001/write-log', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'text/plain'\n    },\n    body: fileLogLine\n  }).catch(error => {\n    console.log('File logging not available:', error.message);\n  });\n};\n\n// Function to create unique shapes for each piece with different border colors per face\nfunction createShapeWithFaceBorder(pieceId, size, faceIndex) {\n  // Use the 6 standard Rubik's cube colors for borders\n  const borderColors = ['#FFFFFF',\n  // Face 0 (front) - White\n  '#FF8C00',\n  // Face 1 (back) - Orange  \n  '#00FF00',\n  // Face 2 (right) - Green\n  '#DC143C',\n  // Face 3 (left) - Red\n  '#0000FF',\n  // Face 4 (top) - Blue\n  '#FFD700' // Face 5 (bottom) - Yellow\n  ];\n  const borderColor = borderColors[faceIndex] || '#000000';\n  const shapes = [\n  // 0-4: Basic geometric shapes (Squares) with individual face border colors\n  () => /*#__PURE__*/_jsxDEV(\"group\", {\n    position: [0, 0, 0.012],\n    children: [/*#__PURE__*/_jsxDEV(\"mesh\", {\n      children: [/*#__PURE__*/_jsxDEV(\"planeGeometry\", {\n        args: [size, size]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: \"red\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 50\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"mesh\", {\n      position: [0, 0, 0.001],\n      children: [/*#__PURE__*/_jsxDEV(\"planeGeometry\", {\n        args: [size * 0.95, size * 0.95]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 38\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: borderColor\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 85\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"mesh\", {\n      position: [0, 0, 0.002],\n      children: [/*#__PURE__*/_jsxDEV(\"planeGeometry\", {\n        args: [size * 0.9, size * 0.9]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 38\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: \"red\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 83\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 90,\n    columnNumber: 11\n  }, this),\n  // Square\n  () => /*#__PURE__*/_jsxDEV(\"group\", {\n    position: [0, 0, 0.012],\n    children: [/*#__PURE__*/_jsxDEV(\"mesh\", {\n      children: [/*#__PURE__*/_jsxDEV(\"planeGeometry\", {\n        args: [size, size]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: \"blue\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 50\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"mesh\", {\n      position: [0, 0, 0.001],\n      children: [/*#__PURE__*/_jsxDEV(\"planeGeometry\", {\n        args: [size * 0.95, size * 0.95]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 38\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: borderColor\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 85\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"mesh\", {\n      position: [0, 0, 0.002],\n      children: [/*#__PURE__*/_jsxDEV(\"planeGeometry\", {\n        args: [size * 0.9, size * 0.9]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 38\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: \"blue\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 83\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 95,\n    columnNumber: 11\n  }, this),\n  // Square\n  () => /*#__PURE__*/_jsxDEV(\"group\", {\n    position: [0, 0, 0.012],\n    children: [/*#__PURE__*/_jsxDEV(\"mesh\", {\n      children: [/*#__PURE__*/_jsxDEV(\"planeGeometry\", {\n        args: [size, size]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: \"green\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 50\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"mesh\", {\n      position: [0, 0, 0.001],\n      children: [/*#__PURE__*/_jsxDEV(\"planeGeometry\", {\n        args: [size * 0.95, size * 0.95]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 38\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: borderColor\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 85\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"mesh\", {\n      position: [0, 0, 0.002],\n      children: [/*#__PURE__*/_jsxDEV(\"planeGeometry\", {\n        args: [size * 0.9, size * 0.9]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 38\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: \"green\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 83\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 100,\n    columnNumber: 11\n  }, this),\n  // Square\n  () => /*#__PURE__*/_jsxDEV(\"group\", {\n    position: [0, 0, 0.012],\n    children: [/*#__PURE__*/_jsxDEV(\"mesh\", {\n      children: [/*#__PURE__*/_jsxDEV(\"planeGeometry\", {\n        args: [size, size]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: \"orange\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 50\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"mesh\", {\n      position: [0, 0, 0.001],\n      children: [/*#__PURE__*/_jsxDEV(\"planeGeometry\", {\n        args: [size * 0.95, size * 0.95]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 38\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: borderColor\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 85\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"mesh\", {\n      position: [0, 0, 0.002],\n      children: [/*#__PURE__*/_jsxDEV(\"planeGeometry\", {\n        args: [size * 0.9, size * 0.9]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 38\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: \"orange\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 83\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 105,\n    columnNumber: 11\n  }, this),\n  // Square\n  () => /*#__PURE__*/_jsxDEV(\"group\", {\n    position: [0, 0, 0.012],\n    children: [/*#__PURE__*/_jsxDEV(\"mesh\", {\n      children: [/*#__PURE__*/_jsxDEV(\"planeGeometry\", {\n        args: [size, size]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: \"purple\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 50\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"mesh\", {\n      position: [0, 0, 0.001],\n      children: [/*#__PURE__*/_jsxDEV(\"planeGeometry\", {\n        args: [size * 0.95, size * 0.95]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 38\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: borderColor\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 85\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"mesh\", {\n      position: [0, 0, 0.002],\n      children: [/*#__PURE__*/_jsxDEV(\"planeGeometry\", {\n        args: [size * 0.9, size * 0.9]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 38\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: \"purple\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 83\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 110,\n    columnNumber: 11\n  }, this),\n  // Square\n\n  // 5-9: Circles with individual face border colors\n  () => /*#__PURE__*/_jsxDEV(\"group\", {\n    position: [0, 0, 0.012],\n    children: [/*#__PURE__*/_jsxDEV(\"mesh\", {\n      children: [/*#__PURE__*/_jsxDEV(\"circleGeometry\", {\n        args: [size / 2, 32]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: \"red\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 51\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"mesh\", {\n      position: [0, 0, 0.001],\n      children: [/*#__PURE__*/_jsxDEV(\"circleGeometry\", {\n        args: [size * 0.45, 32]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 38\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: borderColor\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 79\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"mesh\", {\n      position: [0, 0, 0.002],\n      children: [/*#__PURE__*/_jsxDEV(\"circleGeometry\", {\n        args: [size * 0.4, 32]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 38\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: \"red\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 78\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 117,\n    columnNumber: 11\n  }, this),\n  // Circle\n  () => /*#__PURE__*/_jsxDEV(\"group\", {\n    position: [0, 0, 0.012],\n    children: [/*#__PURE__*/_jsxDEV(\"mesh\", {\n      children: [/*#__PURE__*/_jsxDEV(\"circleGeometry\", {\n        args: [size / 2, 32]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: \"blue\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 51\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"mesh\", {\n      position: [0, 0, 0.001],\n      children: [/*#__PURE__*/_jsxDEV(\"circleGeometry\", {\n        args: [size * 0.45, 32]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 38\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: borderColor\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 79\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"mesh\", {\n      position: [0, 0, 0.002],\n      children: [/*#__PURE__*/_jsxDEV(\"circleGeometry\", {\n        args: [size * 0.4, 32]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 38\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: \"blue\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 78\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 122,\n    columnNumber: 11\n  }, this),\n  // Circle\n  () => /*#__PURE__*/_jsxDEV(\"group\", {\n    position: [0, 0, 0.012],\n    children: [/*#__PURE__*/_jsxDEV(\"mesh\", {\n      children: [/*#__PURE__*/_jsxDEV(\"circleGeometry\", {\n        args: [size / 2, 32]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: \"green\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 51\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"mesh\", {\n      position: [0, 0, 0.001],\n      children: [/*#__PURE__*/_jsxDEV(\"circleGeometry\", {\n        args: [size * 0.45, 32]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 38\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: borderColor\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 79\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"mesh\", {\n      position: [0, 0, 0.002],\n      children: [/*#__PURE__*/_jsxDEV(\"circleGeometry\", {\n        args: [size * 0.4, 32]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 38\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: \"green\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 78\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 127,\n    columnNumber: 11\n  }, this),\n  // Circle\n  () => /*#__PURE__*/_jsxDEV(\"group\", {\n    position: [0, 0, 0.012],\n    children: [/*#__PURE__*/_jsxDEV(\"mesh\", {\n      children: [/*#__PURE__*/_jsxDEV(\"circleGeometry\", {\n        args: [size / 2, 32]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: \"orange\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 51\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"mesh\", {\n      position: [0, 0, 0.001],\n      children: [/*#__PURE__*/_jsxDEV(\"circleGeometry\", {\n        args: [size * 0.45, 32]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 38\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: borderColor\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 79\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"mesh\", {\n      position: [0, 0, 0.002],\n      children: [/*#__PURE__*/_jsxDEV(\"circleGeometry\", {\n        args: [size * 0.4, 32]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 38\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: \"orange\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 78\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 132,\n    columnNumber: 11\n  }, this),\n  // Circle\n  () => /*#__PURE__*/_jsxDEV(\"group\", {\n    position: [0, 0, 0.012],\n    children: [/*#__PURE__*/_jsxDEV(\"mesh\", {\n      children: [/*#__PURE__*/_jsxDEV(\"circleGeometry\", {\n        args: [size / 2, 32]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: \"yellow\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 51\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"mesh\", {\n      position: [0, 0, 0.001],\n      children: [/*#__PURE__*/_jsxDEV(\"circleGeometry\", {\n        args: [size * 0.45, 32]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 38\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: borderColor\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 79\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"mesh\", {\n      position: [0, 0, 0.002],\n      children: [/*#__PURE__*/_jsxDEV(\"circleGeometry\", {\n        args: [size * 0.4, 32]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 38\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: \"yellow\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 78\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 137,\n    columnNumber: 11\n  }, this),\n  // Circle\n\n  // 10-14: Triangles (flat cones to create triangle shapes) with individual face border colors\n  () => /*#__PURE__*/_jsxDEV(\"group\", {\n    position: [0, 0, 0.012],\n    children: [/*#__PURE__*/_jsxDEV(\"mesh\", {\n      rotation: [Math.PI / 2, 0, 0],\n      children: [/*#__PURE__*/_jsxDEV(\"coneGeometry\", {\n        args: [size / 2, 0.01, 3]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 42\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: \"cyan\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 83\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"mesh\", {\n      position: [0, 0, 0.001],\n      rotation: [Math.PI / 2, 0, 0],\n      children: [/*#__PURE__*/_jsxDEV(\"coneGeometry\", {\n        args: [size * 0.45, 0.01, 3]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 67\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: borderColor\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 111\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"mesh\", {\n      position: [0, 0, 0.002],\n      rotation: [Math.PI / 2, 0, 0],\n      children: [/*#__PURE__*/_jsxDEV(\"coneGeometry\", {\n        args: [size * 0.4, 0.01, 3]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 67\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: \"cyan\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 110\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 144,\n    columnNumber: 11\n  }, this),\n  // Triangle\n  () => /*#__PURE__*/_jsxDEV(\"group\", {\n    position: [0, 0, 0.012],\n    children: [/*#__PURE__*/_jsxDEV(\"mesh\", {\n      rotation: [Math.PI / 2, 0, 0],\n      children: [/*#__PURE__*/_jsxDEV(\"coneGeometry\", {\n        args: [size / 2, 0.01, 3]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 42\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: \"magenta\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 83\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"mesh\", {\n      position: [0, 0, 0.001],\n      rotation: [Math.PI / 2, 0, 0],\n      children: [/*#__PURE__*/_jsxDEV(\"coneGeometry\", {\n        args: [size * 0.45, 0.01, 3]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 67\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: borderColor\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 111\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"mesh\", {\n      position: [0, 0, 0.002],\n      rotation: [Math.PI / 2, 0, 0],\n      children: [/*#__PURE__*/_jsxDEV(\"coneGeometry\", {\n        args: [size * 0.4, 0.01, 3]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 67\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: \"magenta\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 110\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 149,\n    columnNumber: 11\n  }, this),\n  // Triangle\n  () => /*#__PURE__*/_jsxDEV(\"group\", {\n    position: [0, 0, 0.012],\n    children: [/*#__PURE__*/_jsxDEV(\"mesh\", {\n      rotation: [Math.PI / 2, 0, 0],\n      children: [/*#__PURE__*/_jsxDEV(\"coneGeometry\", {\n        args: [size / 2, 0.01, 3]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 42\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: \"lime\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 83\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"mesh\", {\n      position: [0, 0, 0.001],\n      rotation: [Math.PI / 2, 0, 0],\n      children: [/*#__PURE__*/_jsxDEV(\"coneGeometry\", {\n        args: [size * 0.45, 0.01, 3]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 67\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: borderColor\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 111\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"mesh\", {\n      position: [0, 0, 0.002],\n      rotation: [Math.PI / 2, 0, 0],\n      children: [/*#__PURE__*/_jsxDEV(\"coneGeometry\", {\n        args: [size * 0.4, 0.01, 3]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 67\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: \"lime\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 110\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 154,\n    columnNumber: 11\n  }, this),\n  // Triangle\n  () => /*#__PURE__*/_jsxDEV(\"group\", {\n    position: [0, 0, 0.012],\n    children: [/*#__PURE__*/_jsxDEV(\"mesh\", {\n      rotation: [Math.PI / 2, 0, 0],\n      children: [/*#__PURE__*/_jsxDEV(\"coneGeometry\", {\n        args: [size / 2, 0.01, 3]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 42\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: \"pink\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 83\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"mesh\", {\n      position: [0, 0, 0.001],\n      rotation: [Math.PI / 2, 0, 0],\n      children: [/*#__PURE__*/_jsxDEV(\"coneGeometry\", {\n        args: [size * 0.45, 0.01, 3]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 67\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: borderColor\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 111\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"mesh\", {\n      position: [0, 0, 0.002],\n      rotation: [Math.PI / 2, 0, 0],\n      children: [/*#__PURE__*/_jsxDEV(\"coneGeometry\", {\n        args: [size * 0.4, 0.01, 3]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 67\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: \"pink\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 110\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 159,\n    columnNumber: 11\n  }, this),\n  // Triangle\n  () => /*#__PURE__*/_jsxDEV(\"group\", {\n    position: [0, 0, 0.012],\n    children: [/*#__PURE__*/_jsxDEV(\"mesh\", {\n      rotation: [0, 0, Math.PI / 4],\n      children: [/*#__PURE__*/_jsxDEV(\"planeGeometry\", {\n        args: [size, size]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 42\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: \"purple\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 79\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"mesh\", {\n      position: [0, 0, 0.001],\n      rotation: [0, 0, Math.PI / 4],\n      children: [/*#__PURE__*/_jsxDEV(\"planeGeometry\", {\n        args: [size * 0.95, size * 0.95]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 67\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: borderColor\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 114\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"mesh\", {\n      position: [0, 0, 0.002],\n      rotation: [0, 0, Math.PI / 4],\n      children: [/*#__PURE__*/_jsxDEV(\"planeGeometry\", {\n        args: [size * 0.9, size * 0.9]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 67\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: \"purple\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 112\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 164,\n    columnNumber: 11\n  }, this),\n  // Diamond\n\n  // 15-19: Diamonds (rotated squares) with individual face border colors\n  () => /*#__PURE__*/_jsxDEV(\"group\", {\n    position: [0, 0, 0.012],\n    children: [/*#__PURE__*/_jsxDEV(\"mesh\", {\n      rotation: [0, 0, Math.PI / 4],\n      children: [/*#__PURE__*/_jsxDEV(\"planeGeometry\", {\n        args: [size, size]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 42\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: \"red\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 79\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"mesh\", {\n      position: [0, 0, 0.001],\n      rotation: [0, 0, Math.PI / 4],\n      children: [/*#__PURE__*/_jsxDEV(\"planeGeometry\", {\n        args: [size * 0.95, size * 0.95]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 67\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: borderColor\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 114\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"mesh\", {\n      position: [0, 0, 0.002],\n      rotation: [0, 0, Math.PI / 4],\n      children: [/*#__PURE__*/_jsxDEV(\"planeGeometry\", {\n        args: [size * 0.9, size * 0.9]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 67\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: \"red\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 112\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 171,\n    columnNumber: 11\n  }, this),\n  // Diamond\n  () => /*#__PURE__*/_jsxDEV(\"group\", {\n    position: [0, 0, 0.012],\n    children: [/*#__PURE__*/_jsxDEV(\"mesh\", {\n      rotation: [0, 0, Math.PI / 4],\n      children: [/*#__PURE__*/_jsxDEV(\"planeGeometry\", {\n        args: [size, size]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 42\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: \"blue\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 79\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"mesh\", {\n      position: [0, 0, 0.001],\n      rotation: [0, 0, Math.PI / 4],\n      children: [/*#__PURE__*/_jsxDEV(\"planeGeometry\", {\n        args: [size * 0.95, size * 0.95]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 67\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: borderColor\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 114\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"mesh\", {\n      position: [0, 0, 0.002],\n      rotation: [0, 0, Math.PI / 4],\n      children: [/*#__PURE__*/_jsxDEV(\"planeGeometry\", {\n        args: [size * 0.9, size * 0.9]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 67\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: \"blue\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 112\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 176,\n    columnNumber: 11\n  }, this),\n  // Diamond\n  () => /*#__PURE__*/_jsxDEV(\"group\", {\n    position: [0, 0, 0.012],\n    children: [/*#__PURE__*/_jsxDEV(\"mesh\", {\n      rotation: [0, 0, Math.PI / 4],\n      children: [/*#__PURE__*/_jsxDEV(\"planeGeometry\", {\n        args: [size, size]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 42\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: \"green\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 79\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"mesh\", {\n      position: [0, 0, 0.001],\n      rotation: [0, 0, Math.PI / 4],\n      children: [/*#__PURE__*/_jsxDEV(\"planeGeometry\", {\n        args: [size * 0.95, size * 0.95]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 67\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: borderColor\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 114\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"mesh\", {\n      position: [0, 0, 0.002],\n      rotation: [0, 0, Math.PI / 4],\n      children: [/*#__PURE__*/_jsxDEV(\"planeGeometry\", {\n        args: [size * 0.9, size * 0.9]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 67\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: \"green\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 112\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 181,\n    columnNumber: 11\n  }, this),\n  // Diamond\n  () => /*#__PURE__*/_jsxDEV(\"group\", {\n    position: [0, 0, 0.012],\n    children: [/*#__PURE__*/_jsxDEV(\"mesh\", {\n      rotation: [0, 0, Math.PI / 4],\n      children: [/*#__PURE__*/_jsxDEV(\"planeGeometry\", {\n        args: [size, size]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 42\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: \"orange\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 79\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"mesh\", {\n      position: [0, 0, 0.001],\n      rotation: [0, 0, Math.PI / 4],\n      children: [/*#__PURE__*/_jsxDEV(\"planeGeometry\", {\n        args: [size * 0.95, size * 0.95]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 67\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: borderColor\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 114\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"mesh\", {\n      position: [0, 0, 0.002],\n      rotation: [0, 0, Math.PI / 4],\n      children: [/*#__PURE__*/_jsxDEV(\"planeGeometry\", {\n        args: [size * 0.9, size * 0.9]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 67\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: \"orange\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 112\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 186,\n    columnNumber: 11\n  }, this),\n  // Diamond\n  () => /*#__PURE__*/_jsxDEV(\"group\", {\n    position: [0, 0, 0.012],\n    children: [/*#__PURE__*/_jsxDEV(\"mesh\", {\n      rotation: [0, 0, Math.PI / 4],\n      children: [/*#__PURE__*/_jsxDEV(\"planeGeometry\", {\n        args: [size, size]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 42\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: \"purple\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 79\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"mesh\", {\n      position: [0, 0, 0.001],\n      rotation: [0, 0, Math.PI / 4],\n      children: [/*#__PURE__*/_jsxDEV(\"planeGeometry\", {\n        args: [size * 0.95, size * 0.95]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 67\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: borderColor\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 114\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"mesh\", {\n      position: [0, 0, 0.002],\n      rotation: [0, 0, Math.PI / 4],\n      children: [/*#__PURE__*/_jsxDEV(\"planeGeometry\", {\n        args: [size * 0.9, size * 0.9]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 67\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: \"purple\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 112\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 194,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 191,\n    columnNumber: 11\n  }, this),\n  // Diamond\n\n  // 20-25: Triangles (flat cones to create triangle shapes) with individual face border colors\n  () => /*#__PURE__*/_jsxDEV(\"group\", {\n    position: [0, 0, 0.012],\n    children: [/*#__PURE__*/_jsxDEV(\"mesh\", {\n      rotation: [Math.PI / 2, 0, 0],\n      children: [/*#__PURE__*/_jsxDEV(\"coneGeometry\", {\n        args: [size / 2, 0.01, 3]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 42\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: \"cyan\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 83\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 199,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"mesh\", {\n      position: [0, 0, 0.001],\n      rotation: [Math.PI / 2, 0, 0],\n      children: [/*#__PURE__*/_jsxDEV(\"coneGeometry\", {\n        args: [size * 0.45, 0.01, 3]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 67\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: borderColor\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 111\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 200,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"mesh\", {\n      position: [0, 0, 0.002],\n      rotation: [Math.PI / 2, 0, 0],\n      children: [/*#__PURE__*/_jsxDEV(\"coneGeometry\", {\n        args: [size * 0.4, 0.01, 3]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 67\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: \"cyan\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 110\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 201,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 198,\n    columnNumber: 11\n  }, this),\n  // Triangle\n  () => /*#__PURE__*/_jsxDEV(\"group\", {\n    position: [0, 0, 0.012],\n    children: [/*#__PURE__*/_jsxDEV(\"mesh\", {\n      rotation: [Math.PI / 2, 0, 0],\n      children: [/*#__PURE__*/_jsxDEV(\"coneGeometry\", {\n        args: [size / 2, 0.01, 3]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 204,\n        columnNumber: 42\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: \"magenta\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 204,\n        columnNumber: 83\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 204,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"mesh\", {\n      position: [0, 0, 0.001],\n      rotation: [Math.PI / 2, 0, 0],\n      children: [/*#__PURE__*/_jsxDEV(\"coneGeometry\", {\n        args: [size * 0.45, 0.01, 3]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 67\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: borderColor\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 111\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 205,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"mesh\", {\n      position: [0, 0, 0.002],\n      rotation: [Math.PI / 2, 0, 0],\n      children: [/*#__PURE__*/_jsxDEV(\"coneGeometry\", {\n        args: [size * 0.4, 0.01, 3]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 67\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: \"magenta\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 110\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 206,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 203,\n    columnNumber: 11\n  }, this),\n  // Triangle\n  () => /*#__PURE__*/_jsxDEV(\"group\", {\n    position: [0, 0, 0.012],\n    children: [/*#__PURE__*/_jsxDEV(\"mesh\", {\n      rotation: [Math.PI / 2, 0, 0],\n      children: [/*#__PURE__*/_jsxDEV(\"coneGeometry\", {\n        args: [size / 2, 0.01, 3]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 42\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: \"lime\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 83\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 209,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"mesh\", {\n      position: [0, 0, 0.001],\n      rotation: [Math.PI / 2, 0, 0],\n      children: [/*#__PURE__*/_jsxDEV(\"coneGeometry\", {\n        args: [size * 0.45, 0.01, 3]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 67\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: borderColor\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 111\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 210,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"mesh\", {\n      position: [0, 0, 0.002],\n      rotation: [Math.PI / 2, 0, 0],\n      children: [/*#__PURE__*/_jsxDEV(\"coneGeometry\", {\n        args: [size * 0.4, 0.01, 3]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 211,\n        columnNumber: 67\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: \"lime\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 211,\n        columnNumber: 110\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 211,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 208,\n    columnNumber: 11\n  }, this),\n  // Triangle\n  () => /*#__PURE__*/_jsxDEV(\"group\", {\n    position: [0, 0, 0.012],\n    children: [/*#__PURE__*/_jsxDEV(\"mesh\", {\n      rotation: [Math.PI / 2, 0, 0],\n      children: [/*#__PURE__*/_jsxDEV(\"coneGeometry\", {\n        args: [size / 2, 0.01, 3]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 42\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: \"pink\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 83\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 214,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"mesh\", {\n      position: [0, 0, 0.001],\n      rotation: [Math.PI / 2, 0, 0],\n      children: [/*#__PURE__*/_jsxDEV(\"coneGeometry\", {\n        args: [size * 0.45, 0.01, 3]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 215,\n        columnNumber: 67\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: borderColor\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 215,\n        columnNumber: 111\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 215,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"mesh\", {\n      position: [0, 0, 0.002],\n      rotation: [Math.PI / 2, 0, 0],\n      children: [/*#__PURE__*/_jsxDEV(\"coneGeometry\", {\n        args: [size * 0.4, 0.01, 3]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 67\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: \"pink\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 110\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 216,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 213,\n    columnNumber: 11\n  }, this),\n  // Triangle\n  () => /*#__PURE__*/_jsxDEV(\"group\", {\n    position: [0, 0, 0.012],\n    children: [/*#__PURE__*/_jsxDEV(\"mesh\", {\n      rotation: [Math.PI / 2, 0, 0],\n      children: [/*#__PURE__*/_jsxDEV(\"coneGeometry\", {\n        args: [size / 2, 0.01, 3]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 219,\n        columnNumber: 42\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: \"purple\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 219,\n        columnNumber: 83\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 219,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"mesh\", {\n      position: [0, 0, 0.001],\n      rotation: [Math.PI / 2, 0, 0],\n      children: [/*#__PURE__*/_jsxDEV(\"coneGeometry\", {\n        args: [size * 0.45, 0.01, 3]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 220,\n        columnNumber: 67\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: borderColor\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 220,\n        columnNumber: 111\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 220,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"mesh\", {\n      position: [0, 0, 0.002],\n      rotation: [Math.PI / 2, 0, 0],\n      children: [/*#__PURE__*/_jsxDEV(\"coneGeometry\", {\n        args: [size * 0.4, 0.01, 3]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 221,\n        columnNumber: 67\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: \"purple\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 221,\n        columnNumber: 110\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 221,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 218,\n    columnNumber: 11\n  }, this),\n  // Triangle\n  () => /*#__PURE__*/_jsxDEV(\"group\", {\n    position: [0, 0, 0.012],\n    children: [/*#__PURE__*/_jsxDEV(\"mesh\", {\n      rotation: [Math.PI / 2, 0, 0],\n      children: [/*#__PURE__*/_jsxDEV(\"coneGeometry\", {\n        args: [size / 2, 0.01, 3]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 224,\n        columnNumber: 42\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: \"yellow\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 224,\n        columnNumber: 83\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 224,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"mesh\", {\n      position: [0, 0, 0.001],\n      rotation: [Math.PI / 2, 0, 0],\n      children: [/*#__PURE__*/_jsxDEV(\"coneGeometry\", {\n        args: [size * 0.45, 0.01, 3]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 225,\n        columnNumber: 67\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: borderColor\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 225,\n        columnNumber: 111\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 225,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"mesh\", {\n      position: [0, 0, 0.002],\n      rotation: [Math.PI / 2, 0, 0],\n      children: [/*#__PURE__*/_jsxDEV(\"coneGeometry\", {\n        args: [size * 0.4, 0.01, 3]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 226,\n        columnNumber: 67\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: \"yellow\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 226,\n        columnNumber: 110\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 226,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 223,\n    columnNumber: 11\n  }, this) // Triangle\n  ];\n  const shapeIndex = pieceId;\n  return shapes[shapeIndex]();\n}\n\n// Function to create unique shapes for each piece\nfunction createShape(pieceId, size) {\n  const shapes = [\n  // 0-4: Basic geometric shapes (Squares)\n  () => /*#__PURE__*/_jsxDEV(\"group\", {\n    position: [0, 0, 0.012],\n    children: [/*#__PURE__*/_jsxDEV(\"mesh\", {\n      children: [/*#__PURE__*/_jsxDEV(\"planeGeometry\", {\n        args: [size, size]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 238,\n        columnNumber: 49\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: \"red\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 238,\n        columnNumber: 86\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 238,\n      columnNumber: 43\n    }, this), /*#__PURE__*/_jsxDEV(\"mesh\", {\n      position: [0, 0, 0.001],\n      children: [/*#__PURE__*/_jsxDEV(\"planeGeometry\", {\n        args: [size * 0.95, size * 0.95]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 238,\n        columnNumber: 157\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: \"black\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 238,\n        columnNumber: 204\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 238,\n      columnNumber: 126\n    }, this), /*#__PURE__*/_jsxDEV(\"mesh\", {\n      position: [0, 0, 0.002],\n      children: [/*#__PURE__*/_jsxDEV(\"planeGeometry\", {\n        args: [size * 0.9, size * 0.9]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 238,\n        columnNumber: 277\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: \"red\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 238,\n        columnNumber: 322\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 238,\n      columnNumber: 246\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 238,\n    columnNumber: 11\n  }, this),\n  // Square\n  () => /*#__PURE__*/_jsxDEV(\"group\", {\n    position: [0, 0, 0.012],\n    children: [/*#__PURE__*/_jsxDEV(\"mesh\", {\n      children: [/*#__PURE__*/_jsxDEV(\"planeGeometry\", {\n        args: [size, size]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 239,\n        columnNumber: 49\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: \"blue\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 239,\n        columnNumber: 86\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 239,\n      columnNumber: 43\n    }, this), /*#__PURE__*/_jsxDEV(\"mesh\", {\n      position: [0, 0, 0.001],\n      children: [/*#__PURE__*/_jsxDEV(\"planeGeometry\", {\n        args: [size * 0.95, size * 0.95]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 239,\n        columnNumber: 158\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: \"black\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 239,\n        columnNumber: 205\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 239,\n      columnNumber: 127\n    }, this), /*#__PURE__*/_jsxDEV(\"mesh\", {\n      position: [0, 0, 0.002],\n      children: [/*#__PURE__*/_jsxDEV(\"planeGeometry\", {\n        args: [size * 0.9, size * 0.9]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 239,\n        columnNumber: 278\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: \"blue\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 239,\n        columnNumber: 323\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 239,\n      columnNumber: 247\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 239,\n    columnNumber: 11\n  }, this),\n  // Square\n  () => /*#__PURE__*/_jsxDEV(\"group\", {\n    position: [0, 0, 0.012],\n    children: [/*#__PURE__*/_jsxDEV(\"mesh\", {\n      children: [/*#__PURE__*/_jsxDEV(\"planeGeometry\", {\n        args: [size, size]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 240,\n        columnNumber: 49\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: \"green\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 240,\n        columnNumber: 86\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 240,\n      columnNumber: 43\n    }, this), /*#__PURE__*/_jsxDEV(\"mesh\", {\n      position: [0, 0, 0.001],\n      children: [/*#__PURE__*/_jsxDEV(\"planeGeometry\", {\n        args: [size * 0.95, size * 0.95]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 240,\n        columnNumber: 159\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: \"black\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 240,\n        columnNumber: 206\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 240,\n      columnNumber: 128\n    }, this), /*#__PURE__*/_jsxDEV(\"mesh\", {\n      position: [0, 0, 0.002],\n      children: [/*#__PURE__*/_jsxDEV(\"planeGeometry\", {\n        args: [size * 0.9, size * 0.9]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 240,\n        columnNumber: 279\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: \"green\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 240,\n        columnNumber: 324\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 240,\n      columnNumber: 248\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 240,\n    columnNumber: 11\n  }, this),\n  // Square\n  () => /*#__PURE__*/_jsxDEV(\"group\", {\n    position: [0, 0, 0.012],\n    children: [/*#__PURE__*/_jsxDEV(\"mesh\", {\n      children: [/*#__PURE__*/_jsxDEV(\"planeGeometry\", {\n        args: [size, size]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 241,\n        columnNumber: 49\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: \"orange\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 241,\n        columnNumber: 86\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 241,\n      columnNumber: 43\n    }, this), /*#__PURE__*/_jsxDEV(\"mesh\", {\n      position: [0, 0, 0.001],\n      children: [/*#__PURE__*/_jsxDEV(\"planeGeometry\", {\n        args: [size * 0.95, size * 0.95]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 241,\n        columnNumber: 160\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: \"black\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 241,\n        columnNumber: 207\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 241,\n      columnNumber: 129\n    }, this), /*#__PURE__*/_jsxDEV(\"mesh\", {\n      position: [0, 0, 0.002],\n      children: [/*#__PURE__*/_jsxDEV(\"planeGeometry\", {\n        args: [size * 0.9, size * 0.9]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 241,\n        columnNumber: 280\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: \"orange\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 241,\n        columnNumber: 325\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 241,\n      columnNumber: 249\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 241,\n    columnNumber: 11\n  }, this),\n  // Square\n  () => /*#__PURE__*/_jsxDEV(\"group\", {\n    position: [0, 0, 0.012],\n    children: [/*#__PURE__*/_jsxDEV(\"mesh\", {\n      children: [/*#__PURE__*/_jsxDEV(\"planeGeometry\", {\n        args: [size, size]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 242,\n        columnNumber: 49\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: \"purple\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 242,\n        columnNumber: 86\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 242,\n      columnNumber: 43\n    }, this), /*#__PURE__*/_jsxDEV(\"mesh\", {\n      position: [0, 0, 0.001],\n      children: [/*#__PURE__*/_jsxDEV(\"planeGeometry\", {\n        args: [size * 0.95, size * 0.95]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 242,\n        columnNumber: 160\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: \"black\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 242,\n        columnNumber: 207\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 242,\n      columnNumber: 129\n    }, this), /*#__PURE__*/_jsxDEV(\"mesh\", {\n      position: [0, 0, 0.002],\n      children: [/*#__PURE__*/_jsxDEV(\"planeGeometry\", {\n        args: [size * 0.9, size * 0.9]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 242,\n        columnNumber: 280\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: \"purple\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 242,\n        columnNumber: 325\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 242,\n      columnNumber: 249\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 242,\n    columnNumber: 11\n  }, this),\n  // Square\n\n  // 5-9: Circles\n  () => /*#__PURE__*/_jsxDEV(\"group\", {\n    position: [0, 0, 0.012],\n    children: [/*#__PURE__*/_jsxDEV(\"mesh\", {\n      children: [/*#__PURE__*/_jsxDEV(\"circleGeometry\", {\n        args: [size / 2, 32]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 245,\n        columnNumber: 49\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: \"red\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 245,\n        columnNumber: 87\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 245,\n      columnNumber: 43\n    }, this), /*#__PURE__*/_jsxDEV(\"mesh\", {\n      position: [0, 0, 0.001],\n      children: [/*#__PURE__*/_jsxDEV(\"circleGeometry\", {\n        args: [size * 0.45, 32]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 245,\n        columnNumber: 158\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: \"black\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 245,\n        columnNumber: 199\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 245,\n      columnNumber: 127\n    }, this), /*#__PURE__*/_jsxDEV(\"mesh\", {\n      position: [0, 0, 0.002],\n      children: [/*#__PURE__*/_jsxDEV(\"circleGeometry\", {\n        args: [size * 0.4, 32]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 245,\n        columnNumber: 272\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: \"red\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 245,\n        columnNumber: 312\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 245,\n      columnNumber: 241\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 245,\n    columnNumber: 11\n  }, this),\n  // Circle\n  () => /*#__PURE__*/_jsxDEV(\"group\", {\n    position: [0, 0, 0.012],\n    children: [/*#__PURE__*/_jsxDEV(\"mesh\", {\n      children: [/*#__PURE__*/_jsxDEV(\"circleGeometry\", {\n        args: [size / 2, 32]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 246,\n        columnNumber: 49\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: \"blue\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 246,\n        columnNumber: 87\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 246,\n      columnNumber: 43\n    }, this), /*#__PURE__*/_jsxDEV(\"mesh\", {\n      position: [0, 0, 0.001],\n      children: [/*#__PURE__*/_jsxDEV(\"circleGeometry\", {\n        args: [size * 0.45, 32]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 246,\n        columnNumber: 159\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: \"black\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 246,\n        columnNumber: 200\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 246,\n      columnNumber: 128\n    }, this), /*#__PURE__*/_jsxDEV(\"mesh\", {\n      position: [0, 0, 0.002],\n      children: [/*#__PURE__*/_jsxDEV(\"circleGeometry\", {\n        args: [size * 0.4, 32]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 246,\n        columnNumber: 273\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: \"blue\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 246,\n        columnNumber: 313\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 246,\n      columnNumber: 242\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 246,\n    columnNumber: 11\n  }, this),\n  // Circle\n  () => /*#__PURE__*/_jsxDEV(\"group\", {\n    position: [0, 0, 0.012],\n    children: [/*#__PURE__*/_jsxDEV(\"mesh\", {\n      children: [/*#__PURE__*/_jsxDEV(\"circleGeometry\", {\n        args: [size / 2, 32]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 247,\n        columnNumber: 49\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: \"green\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 247,\n        columnNumber: 87\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 247,\n      columnNumber: 43\n    }, this), /*#__PURE__*/_jsxDEV(\"mesh\", {\n      position: [0, 0, 0.001],\n      children: [/*#__PURE__*/_jsxDEV(\"circleGeometry\", {\n        args: [size * 0.45, 32]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 247,\n        columnNumber: 160\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: \"black\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 247,\n        columnNumber: 201\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 247,\n      columnNumber: 129\n    }, this), /*#__PURE__*/_jsxDEV(\"mesh\", {\n      position: [0, 0, 0.002],\n      children: [/*#__PURE__*/_jsxDEV(\"circleGeometry\", {\n        args: [size * 0.4, 32]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 247,\n        columnNumber: 274\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: \"green\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 247,\n        columnNumber: 314\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 247,\n      columnNumber: 243\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 247,\n    columnNumber: 11\n  }, this),\n  // Circle\n  () => /*#__PURE__*/_jsxDEV(\"group\", {\n    position: [0, 0, 0.012],\n    children: [/*#__PURE__*/_jsxDEV(\"mesh\", {\n      children: [/*#__PURE__*/_jsxDEV(\"circleGeometry\", {\n        args: [size / 2, 32]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 248,\n        columnNumber: 49\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: \"orange\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 248,\n        columnNumber: 87\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 248,\n      columnNumber: 43\n    }, this), /*#__PURE__*/_jsxDEV(\"mesh\", {\n      position: [0, 0, 0.001],\n      children: [/*#__PURE__*/_jsxDEV(\"circleGeometry\", {\n        args: [size * 0.45, 32]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 248,\n        columnNumber: 161\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: \"black\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 248,\n        columnNumber: 202\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 248,\n      columnNumber: 130\n    }, this), /*#__PURE__*/_jsxDEV(\"mesh\", {\n      position: [0, 0, 0.002],\n      children: [/*#__PURE__*/_jsxDEV(\"circleGeometry\", {\n        args: [size * 0.4, 32]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 248,\n        columnNumber: 275\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: \"orange\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 248,\n        columnNumber: 315\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 248,\n      columnNumber: 244\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 248,\n    columnNumber: 11\n  }, this),\n  // Circle\n  () => /*#__PURE__*/_jsxDEV(\"group\", {\n    position: [0, 0, 0.012],\n    children: [/*#__PURE__*/_jsxDEV(\"mesh\", {\n      children: [/*#__PURE__*/_jsxDEV(\"circleGeometry\", {\n        args: [size / 2, 32]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 249,\n        columnNumber: 49\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: \"yellow\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 249,\n        columnNumber: 87\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 249,\n      columnNumber: 43\n    }, this), /*#__PURE__*/_jsxDEV(\"mesh\", {\n      position: [0, 0, 0.001],\n      children: [/*#__PURE__*/_jsxDEV(\"circleGeometry\", {\n        args: [size * 0.45, 32]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 249,\n        columnNumber: 161\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: \"black\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 249,\n        columnNumber: 202\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 249,\n      columnNumber: 130\n    }, this), /*#__PURE__*/_jsxDEV(\"mesh\", {\n      position: [0, 0, 0.002],\n      children: [/*#__PURE__*/_jsxDEV(\"circleGeometry\", {\n        args: [size * 0.4, 32]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 249,\n        columnNumber: 275\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: \"yellow\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 249,\n        columnNumber: 315\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 249,\n      columnNumber: 244\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 249,\n    columnNumber: 11\n  }, this),\n  // Circle\n\n  // 10-14: Triangles (flat cones to create triangle shapes)\n  () => /*#__PURE__*/_jsxDEV(\"group\", {\n    position: [0, 0, 0.012],\n    children: [/*#__PURE__*/_jsxDEV(\"mesh\", {\n      rotation: [Math.PI / 2, 0, 0],\n      children: [/*#__PURE__*/_jsxDEV(\"coneGeometry\", {\n        args: [size / 2, 0.01, 3]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 252,\n        columnNumber: 78\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: \"cyan\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 252,\n        columnNumber: 119\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 252,\n      columnNumber: 43\n    }, this), /*#__PURE__*/_jsxDEV(\"mesh\", {\n      position: [0, 0, 0.001],\n      rotation: [Math.PI / 2, 0, 0],\n      children: [/*#__PURE__*/_jsxDEV(\"coneGeometry\", {\n        args: [size * 0.45, 0.01, 3]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 252,\n        columnNumber: 220\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: \"black\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 252,\n        columnNumber: 264\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 252,\n      columnNumber: 160\n    }, this), /*#__PURE__*/_jsxDEV(\"mesh\", {\n      position: [0, 0, 0.002],\n      rotation: [Math.PI / 2, 0, 0],\n      children: [/*#__PURE__*/_jsxDEV(\"coneGeometry\", {\n        args: [size * 0.4, 0.01, 3]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 252,\n        columnNumber: 366\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: \"cyan\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 252,\n        columnNumber: 409\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 252,\n      columnNumber: 306\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 252,\n    columnNumber: 11\n  }, this),\n  // Triangle\n  () => /*#__PURE__*/_jsxDEV(\"group\", {\n    position: [0, 0, 0.012],\n    children: [/*#__PURE__*/_jsxDEV(\"mesh\", {\n      rotation: [Math.PI / 2, 0, 0],\n      children: [/*#__PURE__*/_jsxDEV(\"coneGeometry\", {\n        args: [size / 2, 0.01, 3]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 253,\n        columnNumber: 78\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: \"magenta\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 253,\n        columnNumber: 119\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 253,\n      columnNumber: 43\n    }, this), /*#__PURE__*/_jsxDEV(\"mesh\", {\n      position: [0, 0, 0.001],\n      rotation: [Math.PI / 2, 0, 0],\n      children: [/*#__PURE__*/_jsxDEV(\"coneGeometry\", {\n        args: [size * 0.45, 0.01, 3]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 253,\n        columnNumber: 223\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: \"black\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 253,\n        columnNumber: 267\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 253,\n      columnNumber: 163\n    }, this), /*#__PURE__*/_jsxDEV(\"mesh\", {\n      position: [0, 0, 0.002],\n      rotation: [Math.PI / 2, 0, 0],\n      children: [/*#__PURE__*/_jsxDEV(\"coneGeometry\", {\n        args: [size * 0.4, 0.01, 3]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 253,\n        columnNumber: 369\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: \"magenta\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 253,\n        columnNumber: 412\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 253,\n      columnNumber: 309\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 253,\n    columnNumber: 11\n  }, this),\n  // Triangle\n  () => /*#__PURE__*/_jsxDEV(\"group\", {\n    position: [0, 0, 0.012],\n    children: [/*#__PURE__*/_jsxDEV(\"mesh\", {\n      rotation: [Math.PI / 2, 0, 0],\n      children: [/*#__PURE__*/_jsxDEV(\"coneGeometry\", {\n        args: [size / 2, 0.01, 3]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 254,\n        columnNumber: 78\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: \"lime\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 254,\n        columnNumber: 119\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 254,\n      columnNumber: 43\n    }, this), /*#__PURE__*/_jsxDEV(\"mesh\", {\n      position: [0, 0, 0.001],\n      rotation: [Math.PI / 2, 0, 0],\n      children: [/*#__PURE__*/_jsxDEV(\"coneGeometry\", {\n        args: [size * 0.45, 0.01, 3]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 254,\n        columnNumber: 220\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: \"black\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 254,\n        columnNumber: 264\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 254,\n      columnNumber: 160\n    }, this), /*#__PURE__*/_jsxDEV(\"mesh\", {\n      position: [0, 0, 0.002],\n      rotation: [Math.PI / 2, 0, 0],\n      children: [/*#__PURE__*/_jsxDEV(\"coneGeometry\", {\n        args: [size * 0.4, 0.01, 3]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 254,\n        columnNumber: 366\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: \"lime\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 254,\n        columnNumber: 409\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 254,\n      columnNumber: 306\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 254,\n    columnNumber: 11\n  }, this),\n  // Triangle\n  () => /*#__PURE__*/_jsxDEV(\"group\", {\n    position: [0, 0, 0.012],\n    children: [/*#__PURE__*/_jsxDEV(\"mesh\", {\n      rotation: [Math.PI / 2, 0, 0],\n      children: [/*#__PURE__*/_jsxDEV(\"coneGeometry\", {\n        args: [size / 2, 0.01, 3]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 255,\n        columnNumber: 78\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: \"pink\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 255,\n        columnNumber: 119\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 255,\n      columnNumber: 43\n    }, this), /*#__PURE__*/_jsxDEV(\"mesh\", {\n      position: [0, 0, 0.001],\n      rotation: [Math.PI / 2, 0, 0],\n      children: [/*#__PURE__*/_jsxDEV(\"coneGeometry\", {\n        args: [size * 0.45, 0.01, 3]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 255,\n        columnNumber: 220\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: \"black\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 255,\n        columnNumber: 264\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 255,\n      columnNumber: 160\n    }, this), /*#__PURE__*/_jsxDEV(\"mesh\", {\n      position: [0, 0, 0.002],\n      rotation: [Math.PI / 2, 0, 0],\n      children: [/*#__PURE__*/_jsxDEV(\"coneGeometry\", {\n        args: [size * 0.4, 0.01, 3]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 255,\n        columnNumber: 366\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: \"pink\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 255,\n        columnNumber: 409\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 255,\n      columnNumber: 306\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 255,\n    columnNumber: 11\n  }, this),\n  // Triangle\n  () => /*#__PURE__*/_jsxDEV(\"group\", {\n    position: [0, 0, 0.012],\n    children: [/*#__PURE__*/_jsxDEV(\"mesh\", {\n      rotation: [0, 0, Math.PI / 4],\n      children: [/*#__PURE__*/_jsxDEV(\"planeGeometry\", {\n        args: [size, size]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 256,\n        columnNumber: 78\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: \"purple\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 256,\n        columnNumber: 115\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 256,\n      columnNumber: 43\n    }, this), /*#__PURE__*/_jsxDEV(\"mesh\", {\n      position: [0, 0, 0.001],\n      rotation: [0, 0, Math.PI / 4],\n      children: [/*#__PURE__*/_jsxDEV(\"planeGeometry\", {\n        args: [size * 0.95, size * 0.95]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 256,\n        columnNumber: 218\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: \"black\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 256,\n        columnNumber: 265\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 256,\n      columnNumber: 158\n    }, this), /*#__PURE__*/_jsxDEV(\"mesh\", {\n      position: [0, 0, 0.002],\n      rotation: [0, 0, Math.PI / 4],\n      children: [/*#__PURE__*/_jsxDEV(\"planeGeometry\", {\n        args: [size * 0.9, size * 0.9]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 256,\n        columnNumber: 367\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: \"purple\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 256,\n        columnNumber: 412\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 256,\n      columnNumber: 307\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 256,\n    columnNumber: 11\n  }, this),\n  // Diamond\n\n  // 15-19: Diamonds (rotated squares)\n  () => /*#__PURE__*/_jsxDEV(\"group\", {\n    position: [0, 0, 0.012],\n    children: [/*#__PURE__*/_jsxDEV(\"mesh\", {\n      rotation: [0, 0, Math.PI / 4],\n      children: [/*#__PURE__*/_jsxDEV(\"planeGeometry\", {\n        args: [size, size]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 259,\n        columnNumber: 78\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: \"red\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 259,\n        columnNumber: 115\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 259,\n      columnNumber: 43\n    }, this), /*#__PURE__*/_jsxDEV(\"mesh\", {\n      position: [0, 0, 0.001],\n      rotation: [0, 0, Math.PI / 4],\n      children: [/*#__PURE__*/_jsxDEV(\"planeGeometry\", {\n        args: [size * 0.95, size * 0.95]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 259,\n        columnNumber: 215\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: \"black\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 259,\n        columnNumber: 262\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 259,\n      columnNumber: 155\n    }, this), /*#__PURE__*/_jsxDEV(\"mesh\", {\n      position: [0, 0, 0.002],\n      rotation: [0, 0, Math.PI / 4],\n      children: [/*#__PURE__*/_jsxDEV(\"planeGeometry\", {\n        args: [size * 0.9, size * 0.9]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 259,\n        columnNumber: 364\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: \"red\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 259,\n        columnNumber: 409\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 259,\n      columnNumber: 304\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 259,\n    columnNumber: 11\n  }, this),\n  // Diamond\n  () => /*#__PURE__*/_jsxDEV(\"group\", {\n    position: [0, 0, 0.012],\n    children: [/*#__PURE__*/_jsxDEV(\"mesh\", {\n      rotation: [0, 0, Math.PI / 4],\n      children: [/*#__PURE__*/_jsxDEV(\"planeGeometry\", {\n        args: [size, size]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 260,\n        columnNumber: 78\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: \"blue\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 260,\n        columnNumber: 115\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 260,\n      columnNumber: 43\n    }, this), /*#__PURE__*/_jsxDEV(\"mesh\", {\n      position: [0, 0, 0.001],\n      rotation: [0, 0, Math.PI / 4],\n      children: [/*#__PURE__*/_jsxDEV(\"planeGeometry\", {\n        args: [size * 0.95, size * 0.95]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 260,\n        columnNumber: 216\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: \"black\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 260,\n        columnNumber: 263\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 260,\n      columnNumber: 156\n    }, this), /*#__PURE__*/_jsxDEV(\"mesh\", {\n      position: [0, 0, 0.002],\n      rotation: [0, 0, Math.PI / 4],\n      children: [/*#__PURE__*/_jsxDEV(\"planeGeometry\", {\n        args: [size * 0.9, size * 0.9]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 260,\n        columnNumber: 365\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: \"blue\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 260,\n        columnNumber: 410\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 260,\n      columnNumber: 305\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 260,\n    columnNumber: 11\n  }, this),\n  // Diamond\n  () => /*#__PURE__*/_jsxDEV(\"group\", {\n    position: [0, 0, 0.012],\n    children: [/*#__PURE__*/_jsxDEV(\"mesh\", {\n      rotation: [0, 0, Math.PI / 4],\n      children: [/*#__PURE__*/_jsxDEV(\"planeGeometry\", {\n        args: [size, size]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 261,\n        columnNumber: 78\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: \"green\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 261,\n        columnNumber: 115\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 261,\n      columnNumber: 43\n    }, this), /*#__PURE__*/_jsxDEV(\"mesh\", {\n      position: [0, 0, 0.001],\n      rotation: [0, 0, Math.PI / 4],\n      children: [/*#__PURE__*/_jsxDEV(\"planeGeometry\", {\n        args: [size * 0.95, size * 0.95]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 261,\n        columnNumber: 217\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: \"black\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 261,\n        columnNumber: 264\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 261,\n      columnNumber: 157\n    }, this), /*#__PURE__*/_jsxDEV(\"mesh\", {\n      position: [0, 0, 0.002],\n      rotation: [0, 0, Math.PI / 4],\n      children: [/*#__PURE__*/_jsxDEV(\"planeGeometry\", {\n        args: [size * 0.9, size * 0.9]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 261,\n        columnNumber: 366\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: \"green\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 261,\n        columnNumber: 411\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 261,\n      columnNumber: 306\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 261,\n    columnNumber: 11\n  }, this),\n  // Diamond\n  () => /*#__PURE__*/_jsxDEV(\"group\", {\n    position: [0, 0, 0.012],\n    children: [/*#__PURE__*/_jsxDEV(\"mesh\", {\n      rotation: [0, 0, Math.PI / 4],\n      children: [/*#__PURE__*/_jsxDEV(\"planeGeometry\", {\n        args: [size, size]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 262,\n        columnNumber: 78\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: \"orange\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 262,\n        columnNumber: 115\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 262,\n      columnNumber: 43\n    }, this), /*#__PURE__*/_jsxDEV(\"mesh\", {\n      position: [0, 0, 0.001],\n      rotation: [0, 0, Math.PI / 4],\n      children: [/*#__PURE__*/_jsxDEV(\"planeGeometry\", {\n        args: [size * 0.95, size * 0.95]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 262,\n        columnNumber: 218\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: \"black\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 262,\n        columnNumber: 265\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 262,\n      columnNumber: 158\n    }, this), /*#__PURE__*/_jsxDEV(\"mesh\", {\n      position: [0, 0, 0.002],\n      rotation: [0, 0, Math.PI / 4],\n      children: [/*#__PURE__*/_jsxDEV(\"planeGeometry\", {\n        args: [size * 0.9, size * 0.9]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 262,\n        columnNumber: 367\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: \"orange\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 262,\n        columnNumber: 412\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 262,\n      columnNumber: 307\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 262,\n    columnNumber: 11\n  }, this),\n  // Diamond\n  () => /*#__PURE__*/_jsxDEV(\"group\", {\n    position: [0, 0, 0.012],\n    children: [/*#__PURE__*/_jsxDEV(\"mesh\", {\n      rotation: [0, 0, Math.PI / 4],\n      children: [/*#__PURE__*/_jsxDEV(\"planeGeometry\", {\n        args: [size, size]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 263,\n        columnNumber: 78\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: \"purple\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 263,\n        columnNumber: 115\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 263,\n      columnNumber: 43\n    }, this), /*#__PURE__*/_jsxDEV(\"mesh\", {\n      position: [0, 0, 0.001],\n      rotation: [0, 0, Math.PI / 4],\n      children: [/*#__PURE__*/_jsxDEV(\"planeGeometry\", {\n        args: [size * 0.95, size * 0.95]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 263,\n        columnNumber: 218\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: \"black\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 263,\n        columnNumber: 265\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 263,\n      columnNumber: 158\n    }, this), /*#__PURE__*/_jsxDEV(\"mesh\", {\n      position: [0, 0, 0.002],\n      rotation: [0, 0, Math.PI / 4],\n      children: [/*#__PURE__*/_jsxDEV(\"planeGeometry\", {\n        args: [size * 0.9, size * 0.9]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 263,\n        columnNumber: 367\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: \"purple\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 263,\n        columnNumber: 412\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 263,\n      columnNumber: 307\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 263,\n    columnNumber: 11\n  }, this),\n  // Diamond\n\n  // 20-25: Triangles (flat cones to create triangle shapes)\n  () => /*#__PURE__*/_jsxDEV(\"group\", {\n    position: [0, 0, 0.012],\n    children: [/*#__PURE__*/_jsxDEV(\"mesh\", {\n      rotation: [Math.PI / 2, 0, 0],\n      children: [/*#__PURE__*/_jsxDEV(\"coneGeometry\", {\n        args: [size / 2, 0.01, 3]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 266,\n        columnNumber: 78\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: \"cyan\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 266,\n        columnNumber: 119\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 266,\n      columnNumber: 43\n    }, this), /*#__PURE__*/_jsxDEV(\"mesh\", {\n      position: [0, 0, 0.001],\n      rotation: [Math.PI / 2, 0, 0],\n      children: [/*#__PURE__*/_jsxDEV(\"coneGeometry\", {\n        args: [size * 0.45, 0.01, 3]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 266,\n        columnNumber: 220\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: \"black\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 266,\n        columnNumber: 264\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 266,\n      columnNumber: 160\n    }, this), /*#__PURE__*/_jsxDEV(\"mesh\", {\n      position: [0, 0, 0.002],\n      rotation: [Math.PI / 2, 0, 0],\n      children: [/*#__PURE__*/_jsxDEV(\"coneGeometry\", {\n        args: [size * 0.4, 0.01, 3]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 266,\n        columnNumber: 366\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: \"cyan\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 266,\n        columnNumber: 409\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 266,\n      columnNumber: 306\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 266,\n    columnNumber: 11\n  }, this),\n  // Triangle\n  () => /*#__PURE__*/_jsxDEV(\"group\", {\n    position: [0, 0, 0.012],\n    children: [/*#__PURE__*/_jsxDEV(\"mesh\", {\n      rotation: [Math.PI / 2, 0, 0],\n      children: [/*#__PURE__*/_jsxDEV(\"coneGeometry\", {\n        args: [size / 2, 0.01, 3]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 267,\n        columnNumber: 78\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: \"magenta\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 267,\n        columnNumber: 119\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 267,\n      columnNumber: 43\n    }, this), /*#__PURE__*/_jsxDEV(\"mesh\", {\n      position: [0, 0, 0.001],\n      rotation: [Math.PI / 2, 0, 0],\n      children: [/*#__PURE__*/_jsxDEV(\"coneGeometry\", {\n        args: [size * 0.45, 0.01, 3]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 267,\n        columnNumber: 223\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: \"black\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 267,\n        columnNumber: 267\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 267,\n      columnNumber: 163\n    }, this), /*#__PURE__*/_jsxDEV(\"mesh\", {\n      position: [0, 0, 0.002],\n      rotation: [Math.PI / 2, 0, 0],\n      children: [/*#__PURE__*/_jsxDEV(\"coneGeometry\", {\n        args: [size * 0.4, 0.01, 3]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 267,\n        columnNumber: 369\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: \"magenta\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 267,\n        columnNumber: 412\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 267,\n      columnNumber: 309\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 267,\n    columnNumber: 11\n  }, this),\n  // Triangle\n  () => /*#__PURE__*/_jsxDEV(\"group\", {\n    position: [0, 0, 0.012],\n    children: [/*#__PURE__*/_jsxDEV(\"mesh\", {\n      rotation: [Math.PI / 2, 0, 0],\n      children: [/*#__PURE__*/_jsxDEV(\"coneGeometry\", {\n        args: [size / 2, 0.01, 3]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 268,\n        columnNumber: 78\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: \"lime\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 268,\n        columnNumber: 119\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 268,\n      columnNumber: 43\n    }, this), /*#__PURE__*/_jsxDEV(\"mesh\", {\n      position: [0, 0, 0.001],\n      rotation: [Math.PI / 2, 0, 0],\n      children: [/*#__PURE__*/_jsxDEV(\"coneGeometry\", {\n        args: [size * 0.45, 0.01, 3]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 268,\n        columnNumber: 220\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: \"black\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 268,\n        columnNumber: 264\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 268,\n      columnNumber: 160\n    }, this), /*#__PURE__*/_jsxDEV(\"mesh\", {\n      position: [0, 0, 0.002],\n      rotation: [Math.PI / 2, 0, 0],\n      children: [/*#__PURE__*/_jsxDEV(\"coneGeometry\", {\n        args: [size * 0.4, 0.01, 3]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 268,\n        columnNumber: 366\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: \"lime\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 268,\n        columnNumber: 409\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 268,\n      columnNumber: 306\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 268,\n    columnNumber: 11\n  }, this),\n  // Triangle\n  () => /*#__PURE__*/_jsxDEV(\"group\", {\n    position: [0, 0, 0.012],\n    children: [/*#__PURE__*/_jsxDEV(\"mesh\", {\n      rotation: [Math.PI / 2, 0, 0],\n      children: [/*#__PURE__*/_jsxDEV(\"coneGeometry\", {\n        args: [size / 2, 0.01, 3]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 269,\n        columnNumber: 78\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: \"pink\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 269,\n        columnNumber: 119\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 269,\n      columnNumber: 43\n    }, this), /*#__PURE__*/_jsxDEV(\"mesh\", {\n      position: [0, 0, 0.001],\n      rotation: [Math.PI / 2, 0, 0],\n      children: [/*#__PURE__*/_jsxDEV(\"coneGeometry\", {\n        args: [size * 0.45, 0.01, 3]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 269,\n        columnNumber: 220\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: \"black\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 269,\n        columnNumber: 264\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 269,\n      columnNumber: 160\n    }, this), /*#__PURE__*/_jsxDEV(\"mesh\", {\n      position: [0, 0, 0.002],\n      rotation: [Math.PI / 2, 0, 0],\n      children: [/*#__PURE__*/_jsxDEV(\"coneGeometry\", {\n        args: [size * 0.4, 0.01, 3]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 269,\n        columnNumber: 366\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: \"pink\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 269,\n        columnNumber: 409\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 269,\n      columnNumber: 306\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 269,\n    columnNumber: 11\n  }, this),\n  // Triangle\n  () => /*#__PURE__*/_jsxDEV(\"group\", {\n    position: [0, 0, 0.012],\n    children: [/*#__PURE__*/_jsxDEV(\"mesh\", {\n      rotation: [Math.PI / 2, 0, 0],\n      children: [/*#__PURE__*/_jsxDEV(\"coneGeometry\", {\n        args: [size / 2, 0.01, 3]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 270,\n        columnNumber: 78\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: \"purple\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 270,\n        columnNumber: 119\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 270,\n      columnNumber: 43\n    }, this), /*#__PURE__*/_jsxDEV(\"mesh\", {\n      position: [0, 0, 0.001],\n      rotation: [Math.PI / 2, 0, 0],\n      children: [/*#__PURE__*/_jsxDEV(\"coneGeometry\", {\n        args: [size * 0.45, 0.01, 3]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 270,\n        columnNumber: 222\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: \"black\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 270,\n        columnNumber: 266\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 270,\n      columnNumber: 162\n    }, this), /*#__PURE__*/_jsxDEV(\"mesh\", {\n      position: [0, 0, 0.002],\n      rotation: [Math.PI / 2, 0, 0],\n      children: [/*#__PURE__*/_jsxDEV(\"coneGeometry\", {\n        args: [size * 0.4, 0.01, 3]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 270,\n        columnNumber: 368\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: \"purple\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 270,\n        columnNumber: 411\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 270,\n      columnNumber: 308\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 270,\n    columnNumber: 11\n  }, this),\n  // Triangle\n  () => /*#__PURE__*/_jsxDEV(\"group\", {\n    position: [0, 0, 0.012],\n    children: [/*#__PURE__*/_jsxDEV(\"mesh\", {\n      rotation: [Math.PI / 2, 0, 0],\n      children: [/*#__PURE__*/_jsxDEV(\"coneGeometry\", {\n        args: [size / 2, 0.01, 3]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 271,\n        columnNumber: 78\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: \"yellow\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 271,\n        columnNumber: 119\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 271,\n      columnNumber: 43\n    }, this), /*#__PURE__*/_jsxDEV(\"mesh\", {\n      position: [0, 0, 0.001],\n      rotation: [Math.PI / 2, 0, 0],\n      children: [/*#__PURE__*/_jsxDEV(\"coneGeometry\", {\n        args: [size * 0.45, 0.01, 3]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 271,\n        columnNumber: 222\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: \"black\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 271,\n        columnNumber: 266\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 271,\n      columnNumber: 162\n    }, this), /*#__PURE__*/_jsxDEV(\"mesh\", {\n      position: [0, 0, 0.002],\n      rotation: [Math.PI / 2, 0, 0],\n      children: [/*#__PURE__*/_jsxDEV(\"coneGeometry\", {\n        args: [size * 0.4, 0.01, 3]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 271,\n        columnNumber: 368\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: \"yellow\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 271,\n        columnNumber: 411\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 271,\n      columnNumber: 308\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 271,\n    columnNumber: 11\n  }, this) // Triangle\n  ];\n  const shapeIndex = pieceId; // Changed from pieceId % shapes.length\n  return shapes[shapeIndex]();\n}\n\n// Individual cube piece component with smooth rotation\nfunction CubePiece({\n  position,\n  colors,\n  size = 0.95,\n  pieceId = 0,\n  isHighlighted = false,\n  highlightInfo = null,\n  rotatingFace = null,\n  rotationProgress = 0\n}) {\n  _s();\n  const meshRef = useRef();\n  const groupRef = useRef();\n\n  // Log piece information for debugging\n  React.useEffect(() => {\n    const shapeTypes = ['Square', 'Square', 'Square', 'Square', 'Square', 'Circle', 'Circle', 'Circle', 'Circle', 'Circle', 'Triangle', 'Triangle', 'Triangle', 'Triangle', 'Diamond', 'Diamond', 'Diamond', 'Diamond', 'Diamond', 'Diamond', 'Triangle', 'Triangle', 'Triangle', 'Triangle', 'Triangle', 'Triangle'];\n    const shapeColors = ['Red', 'Blue', 'Green', 'Orange', 'Purple', 'Red', 'Blue', 'Green', 'Orange', 'Yellow', 'Cyan', 'Magenta', 'Lime', 'Pink', 'Purple', 'Red', 'Blue', 'Green', 'Orange', 'Purple', 'Cyan', 'Magenta', 'Lime', 'Pink', 'Purple', 'Yellow'];\n    const shapeType = shapeTypes[pieceId] || 'Unknown'; // Changed from pieceId % shapeTypes.length\n    const shapeColor = shapeColors[pieceId] || 'Unknown'; // Changed from pieceId % shapeColors.length\n\n    // Debug specific pieces only\n    if (pieceId === 0 || pieceId === 17 || pieceId === 25 || pieceId === 1 || pieceId === 11) {\n      console.log(`🔍 ${shapeColor} ${shapeType} Piece ${pieceId} at position [${position.join(', ')}]`);\n      console.log(`  Stored Colors:`, colors);\n\n      // Show what colors should be visible based on position\n      const [x, y, z] = position;\n      const visibleFaces = [];\n      if (x === 1) visibleFaces.push('right');\n      if (x === -1) visibleFaces.push('left');\n      if (y === 1) visibleFaces.push('top');\n      if (y === -1) visibleFaces.push('bottom');\n      if (z === 1) visibleFaces.push('front');\n      if (z === -1) visibleFaces.push('back');\n      console.log(`  Visible faces:`, visibleFaces);\n      console.log(`  Colors on visible faces:`, visibleFaces.map(face => `${face}: ${colors[face]}`));\n    }\n  }, [pieceId, position, colors]);\n\n  // Color mapping\n  const colorMap = {\n    'white': '#FFFFFF',\n    'yellow': '#FFD700',\n    'red': '#DC143C',\n    // More vibrant red (crimson)\n    'orange': '#FF8C00',\n    // More vibrant orange\n    'blue': '#0000FF',\n    'green': '#00FF00',\n    'purple': '#800080',\n    'cyan': '#00FFFF',\n    'magenta': '#FF00FF',\n    'lime': '#00FF00',\n    'pink': '#FFC0CB',\n    'black': '#000000' // Keep black as black\n  };\n\n  // Create cube geometry\n  const cubeGeometry = useMemo(() => new THREE.BoxGeometry(size, size, size), [size]);\n\n  // Create face geometry\n  const faceGeometry = useMemo(() => {\n    const geometry = new THREE.PlaneGeometry(size, size);\n    return geometry;\n  }, [size]);\n\n  // Get the color for a face based on the face index - always use original colors\n  const getFaceColor = faceIndex => {\n    // Always use the piece's stored colors - no rotation needed\n    switch (faceIndex) {\n      case 0:\n        return colors.front;\n      case 1:\n        return colors.back;\n      case 2:\n        return colors.right;\n      case 3:\n        return colors.left;\n      case 4:\n        return colors.top;\n      case 5:\n        return colors.bottom;\n      default:\n        return 'black';\n    }\n  };\n\n  // Check if a face should be visible based on the piece's original position\n  const isFaceVisible = faceIndex => {\n    const [x, y, z] = position;\n\n    // Determine which faces are visible based on original position\n    const visibleFaces = [];\n    if (x === 1) visibleFaces.push(2); // Right face visible\n    if (x === -1) visibleFaces.push(3); // Left face visible\n    if (y === 1) visibleFaces.push(4); // Top face visible\n    if (y === -1) visibleFaces.push(5); // Bottom face visible\n    if (z === 1) visibleFaces.push(0); // Front face visible\n    if (z === -1) visibleFaces.push(1); // Back face visible\n\n    return visibleFaces.includes(faceIndex);\n  };\n\n  // Check if this piece is part of the currently rotating face\n  const isPartOfRotatingFace = useCallback(() => {\n    if (!rotatingFace) return false;\n    const [x, y, z] = position;\n    const {\n      face\n    } = rotatingFace;\n    switch (face) {\n      case 'F':\n        return z === 1;\n      case 'B':\n        return z === -1;\n      case 'R':\n        return x === 1;\n      case 'L':\n        return x === -1;\n      case 'U':\n        return y === 1;\n      case 'D':\n        return y === -1;\n      default:\n        return false;\n    }\n  }, [position, rotatingFace]);\n\n  // Calculate group rotation for smooth animation\n  const getGroupRotationAngle = () => {\n    if (!rotatingFace || !isPartOfRotatingFace()) {\n      return {\n        x: 0,\n        y: 0,\n        z: 0\n      };\n    }\n    const {\n      face,\n      direction\n    } = rotatingFace;\n    const sign = direction === 'clockwise' ? 1 : -1;\n    const angle = Math.PI / 2 * rotationProgress * sign; // 90 degrees total\n\n    switch (face) {\n      case 'F':\n        return {\n          x: 0,\n          y: 0,\n          z: angle\n        };\n      case 'B':\n        return {\n          x: 0,\n          y: 0,\n          z: -angle\n        };\n      case 'R':\n        return {\n          x: angle,\n          y: 0,\n          z: 0\n        };\n      case 'L':\n        return {\n          x: -angle,\n          y: 0,\n          z: 0\n        };\n      case 'U':\n        return {\n          x: 0,\n          y: angle,\n          z: 0\n        };\n      case 'D':\n        return {\n          x: 0,\n          y: -angle,\n          z: 0\n        };\n      default:\n        return {\n          x: 0,\n          y: 0,\n          z: 0\n        };\n    }\n  };\n\n  // For group rotation, NO individual position offsets - all pieces stay in their original positions\n  // The rotation will be applied to the entire group, not individual pieces\n  const getGroupPositionOffset = () => {\n    // Return zero offset - pieces should NOT move individually during group rotation\n    return {\n      x: 0,\n      y: 0,\n      z: 0\n    };\n  };\n\n  // For group rotation, individual pieces don't need to rotate - the group handles it\n  // Just use the original position without any offsets or individual rotations\n  const finalPosition = position;\n  return /*#__PURE__*/_jsxDEV(\"group\", {\n    ref: groupRef,\n    position: finalPosition,\n    rotation: [0, 0, 0] // No individual rotation - handled by the group\n    ,\n    children: [/*#__PURE__*/_jsxDEV(\"mesh\", {\n      geometry: cubeGeometry,\n      children: /*#__PURE__*/_jsxDEV(\"meshPhongMaterial\", {\n        color: isPartOfRotatingFace() ? \"#666666\" : \"#333333\",\n        emissive: isPartOfRotatingFace() ? \"#444444\" : \"#000000\",\n        emissiveIntensity: isPartOfRotatingFace() ? 0.3 : 0\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 426,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 425,\n      columnNumber: 7\n    }, this), [0, 1, 2, 3, 4, 5].map(faceIndex => {\n      // Only render faces that should be visible based on original position\n      if (!isFaceVisible(faceIndex)) {\n        return null;\n      }\n      const faceColor = getFaceColor(faceIndex);\n\n      // Define face positions and rotations correctly\n      let facePosition, faceRotation;\n      switch (faceIndex) {\n        case 0:\n          // Front face (Z+)\n          facePosition = [0, 0, size / 2 + 0.001];\n          faceRotation = [0, 0, 0];\n          break;\n        case 1:\n          // Back face (Z-)\n          facePosition = [0, 0, -size / 2 - 0.001];\n          faceRotation = [0, Math.PI, 0];\n          break;\n        case 2:\n          // Right face (X+)\n          facePosition = [size / 2 + 0.001, 0, 0];\n          faceRotation = [0, Math.PI / 2, 0];\n          break;\n        case 3:\n          // Left face (X-)\n          facePosition = [-size / 2 - 0.001, 0, 0];\n          faceRotation = [0, -Math.PI / 2, 0];\n          break;\n        case 4:\n          // Top face (Y+)\n          facePosition = [0, size / 2 + 0.001, 0];\n          faceRotation = [-Math.PI / 2, 0, 0];\n          break;\n        case 5:\n          // Bottom face (Y-)\n          facePosition = [0, -size / 2 - 0.001, 0];\n          faceRotation = [Math.PI / 2, 0, 0];\n          break;\n        default:\n          facePosition = [0, 0, 0];\n          faceRotation = [0, 0, 0];\n      }\n\n      // Check if this face should be highlighted (painted pink)\n      const faceNames = ['front', 'back', 'right', 'left', 'top', 'bottom'];\n      const currentFaceName = faceNames[faceIndex];\n      const shouldHighlight = isHighlighted && highlightInfo && highlightInfo.blackVisibleFaces && highlightInfo.blackVisibleFaces.includes(currentFaceName);\n\n      // If this face should be highlighted, paint it bright pink\n      const displayColor = shouldHighlight ? '#FF1493' : colorMap[faceColor] || '#000000';\n      return /*#__PURE__*/_jsxDEV(\"mesh\", {\n        position: facePosition,\n        rotation: faceRotation,\n        geometry: faceGeometry,\n        children: /*#__PURE__*/_jsxDEV(\"meshPhongMaterial\", {\n          color: displayColor,\n          side: THREE.FrontSide,\n          emissive: isPartOfRotatingFace() ? displayColor : \"#000000\",\n          emissiveIntensity: isPartOfRotatingFace() ? 0.5 : 0.1\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 492,\n          columnNumber: 13\n        }, this)\n      }, faceIndex, false, {\n        fileName: _jsxFileName,\n        lineNumber: 486,\n        columnNumber: 11\n      }, this);\n    }), [0, 1, 2, 3, 4, 5].map(faceIndex => {\n      // Only render shapes on faces that should be visible based on original position\n      if (!isFaceVisible(faceIndex)) {\n        return null;\n      }\n\n      // Define face positions and rotations correctly (same as colored faces)\n      let facePosition, faceRotation;\n      switch (faceIndex) {\n        case 0:\n          // Front face (Z+)\n          facePosition = [0, 0, size / 2 + 0.002];\n          faceRotation = [0, 0, 0];\n          break;\n        case 1:\n          // Back face (Z-)\n          facePosition = [0, 0, -size / 2 - 0.002];\n          faceRotation = [0, Math.PI, 0];\n          break;\n        case 2:\n          // Right face (X+)\n          facePosition = [size / 2 + 0.002, 0, 0];\n          faceRotation = [0, Math.PI / 2, 0];\n          break;\n        case 3:\n          // Left face (X-)\n          facePosition = [-size / 2 - 0.002, 0, 0];\n          faceRotation = [0, -Math.PI / 2, 0];\n          break;\n        case 4:\n          // Top face (Y+)\n          facePosition = [0, size / 2 + 0.002, 0];\n          faceRotation = [-Math.PI / 2, 0, 0];\n          break;\n        case 5:\n          // Bottom face (Y-)\n          facePosition = [0, -size / 2 - 0.002, 0];\n          faceRotation = [Math.PI / 2, 0, 0];\n          break;\n        default:\n          facePosition = [0, 0, 0];\n          faceRotation = [0, 0, 0];\n      }\n\n      // Get the face color for this specific face\n      const faceColor = getFaceColor(faceIndex);\n      return /*#__PURE__*/_jsxDEV(\"group\", {\n        position: facePosition,\n        rotation: faceRotation,\n        children: createShapeWithFaceBorder(pieceId, size * 0.3, faceIndex)\n      }, `shape-${faceIndex}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 546,\n        columnNumber: 11\n      }, this);\n    })]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 419,\n    columnNumber: 5\n  }, this);\n}\n\n// Function to get the original solved colors for a piece based on its pieceId\n_s(CubePiece, \"+tYIy54zh/FRg917VQN/JOakoT0=\");\n_c = CubePiece;\nfunction getOriginalColors(pieceId) {\n  // Map pieceId to original solved position\n  const positions = [];\n  for (let x = -1; x <= 1; x++) {\n    for (let y = -1; y <= 1; y++) {\n      for (let z = -1; z <= 1; z++) {\n        if (x === 0 && y === 0 && z === 0) continue;\n        positions.push([x, y, z]);\n      }\n    }\n  }\n  const originalPosition = positions[pieceId];\n  const [x, y, z] = originalPosition;\n\n  // Assign colors based on original solved position\n  // All faces should have proper colors, not black\n  let colors = {\n    front: 'white',\n    // Default to white for front\n    back: 'yellow',\n    // Default to yellow for back\n    right: 'red',\n    // Default to red for right\n    left: 'orange',\n    // Default to orange for left\n    top: 'blue',\n    // Default to blue for top\n    bottom: 'green' // Default to green for bottom\n  };\n\n  // Override with correct colors based on position in solved state\n  if (x === -1) colors.left = 'orange';\n  if (x === 1) colors.right = 'red';\n  if (y === -1) colors.bottom = 'green';\n  if (y === 1) colors.top = 'blue';\n  if (z === -1) colors.back = 'yellow';\n  if (z === 1) colors.front = 'white';\n  return colors;\n}\n\n// Pure JavaScript global state manager - NO React dependencies\nconst CubeStateManager = {\n  state: null,\n  initialized: false,\n  listeners: [],\n  getState() {\n    var _this$state;\n    console.log('🔄 CubeStateManager.getState called, initialized:', this.initialized);\n    if (!this.initialized) {\n      console.log('🔄 CubeStateManager.getState: Not initialized, calling initialize()');\n      this.initialize();\n    }\n    console.log('🔄 CubeStateManager.getState: Returning state with', (_this$state = this.state) === null || _this$state === void 0 ? void 0 : _this$state.length, 'pieces');\n    if (this.state && this.state.length > 0) {\n      console.log('🔄 CubeStateManager.getState: First piece colors:', JSON.stringify(this.state[0].colors));\n    }\n    return this.state;\n  },\n  setState(newState) {\n    var _this$state2, _this$state3;\n    console.log('🔄 CubeStateManager.setState called');\n    console.log('Current state colors:', (_this$state2 = this.state) === null || _this$state2 === void 0 ? void 0 : _this$state2.map(p => `${p.pieceId}: ${JSON.stringify(p.colors)}`));\n    console.log('NewState type:', typeof newState, newState);\n    if (typeof newState === 'function') {\n      console.log('🔄 setState: Using function update');\n      this.state = newState(this.state);\n    } else {\n      console.log('🔄 setState: Using direct assignment');\n      this.state = newState;\n    }\n    console.log('🔄 CubeStateManager.setState completed');\n    console.log('New state colors:', (_this$state3 = this.state) === null || _this$state3 === void 0 ? void 0 : _this$state3.map(p => `${p.pieceId}: ${JSON.stringify(p.colors)}`));\n\n    // Notify all listeners\n    console.log('🔄 Notifying', this.listeners.length, 'listeners');\n    this.listeners.forEach(listener => listener());\n  },\n  subscribe(listener) {\n    this.listeners.push(listener);\n    return () => {\n      this.listeners = this.listeners.filter(l => l !== listener);\n    };\n  },\n  initialize() {\n    console.log('🔄 CubeStateManager: INITIALIZING CUBE STATE - This should only happen once!');\n    logToTerminal('🔄 CubeStateManager: INITIALIZING CUBE STATE - This should only happen once!', null, 'INFO');\n    const state = [];\n\n    // Create 26 pieces (3x3x3 minus center)\n    for (let x = -1; x <= 1; x++) {\n      for (let y = -1; y <= 1; y++) {\n        for (let z = -1; z <= 1; z++) {\n          // Skip the center piece\n          if (x === 0 && y === 0 && z === 0) continue;\n\n          // Get pieceId based on position in solved state\n          const pieceId = state.length;\n\n          // Get original colors for this piece\n          const colors = getOriginalColors(pieceId);\n\n          // Debug logging for initial state\n          console.log(`Initial piece ${pieceId} at [${x}, ${y}, ${z}]:`, colors);\n          state.push({\n            position: [x, y, z],\n            colors,\n            rotationHistory: [],\n            // Track all rotations this piece has undergone\n            pieceId: pieceId // Store the pieceId for reference\n          });\n        }\n      }\n    }\n\n    // Log the complete initial cube state as JSON\n    console.log('🎯 INITIAL CUBE STATE (End of Initial Load):');\n    console.log(JSON.stringify(state, null, 2));\n\n    // Also log to terminal (this will show in the terminal where npm start is running)\n    logToTerminal('🎯 INITIAL CUBE STATE (End of Initial Load)', state, 'INFO');\n    this.state = state;\n    this.initialized = true;\n  }\n};\n\n// Simple React component that uses the global state manager\nfunction CubeStateProvider({\n  children\n}) {\n  _s2();\n  const [forceUpdate, setForceUpdate] = useState(0);\n\n  // Subscribe to state changes\n  useEffect(() => {\n    const unsubscribe = CubeStateManager.subscribe(() => {\n      setForceUpdate(prev => prev + 1);\n    });\n    return unsubscribe;\n  }, []);\n  const cubeState = CubeStateManager.getState();\n\n  // Function to update cube state\n  const setCubeState = useCallback(newState => {\n    console.log('🔄 setCubeState called - BEFORE update');\n    console.log('Current state colors:', CubeStateManager.getState().map(p => `${p.pieceId}: ${JSON.stringify(p.colors)}`));\n    CubeStateManager.setState(newState);\n    console.log('🔄 setCubeState called - AFTER update');\n    console.log('New state colors:', CubeStateManager.getState().map(p => `${p.pieceId}: ${JSON.stringify(p.colors)}`));\n  }, []);\n  const [isAnimating, setIsAnimating] = useState(false);\n  const [rotatingFace, setRotatingFace] = useState(null);\n  const [rotationProgress, setRotationProgress] = useState(0);\n  const [moveHistory, setMoveHistory] = useState([]); // Simple move history for solve\n  const [hasRotated, setHasRotated] = useState(false); // Track if any rotations have occurred\n\n  // Debug cube state changes\n  React.useEffect(() => {\n    console.log('🔄 CUBE STATE CHANGED:', cubeState.map(p => `${p.pieceId}: [${p.position.join(', ')}] colors: ${JSON.stringify(p.colors)}`));\n\n    // Log to terminal: cube state changes\n    logToTerminal(`🎯 useCubeState useEffect triggered`, null, 'INFO');\n    logToTerminal(`🔄 CUBE STATE CHANGED`, cubeState.map(p => `${p.pieceId}: [${p.position.join(', ')}] colors: ${JSON.stringify(p.colors)}`), 'INFO');\n\n    // Temporarily disabled color reset detection to debug visual issue\n    // Only check for color resets if rotations have occurred (not during initial load)\n    if (false && hasRotated) {\n      const hasOriginalColors = cubeState.every((piece, index) => {\n        const originalColors = getOriginalColors(index);\n        return JSON.stringify(piece.colors) === JSON.stringify(originalColors);\n      });\n      if (hasOriginalColors && cubeState.length > 0) {\n        logToTerminal('🚨 COLOR RESET DETECTED: All pieces have original colors!', null, 'ERROR');\n        logToTerminal('🚨 This indicates the cube state was reinitialized!', null, 'ERROR');\n      }\n    }\n  }, [cubeState, hasRotated]);\n\n  // Consolidated rotation logic\n  const applyRotation = useCallback((pieces, face, direction) => {\n    logRotationStep('A', face, direction, 'applyRotation called');\n    logRotationStep('B', face, direction, 'Input pieces colors', pieces.map(p => `${p.pieceId}: ${JSON.stringify(p.colors)}`));\n\n    // Filter pieces that are part of the rotating face\n    const rotatingPieces = pieces.filter(piece => {\n      const [x, y, z] = piece.position;\n      switch (face) {\n        case 'F':\n          return z === 1;\n        // Front face\n        case 'B':\n          return z === -1;\n        // Back face\n        case 'R':\n          return x === 1;\n        // Right face\n        case 'L':\n          return x === -1;\n        // Left face\n        case 'U':\n          return y === 1;\n        // Up face\n        case 'D':\n          return y === -1;\n        // Down face\n        default:\n          return false;\n      }\n    });\n    console.log(`🎯 Found ${rotatingPieces.length} pieces on ${face} face`);\n    logRotationStep('B1', face, direction, `Found ${rotatingPieces.length} pieces on face`, rotatingPieces.map(p => `${p.pieceId}: [${p.position.join(', ')}]`));\n    rotatingPieces.forEach(piece => {\n      const [x, y, z] = piece.position;\n      let newX = x,\n        newY = y,\n        newZ = z;\n\n      // Apply 3D transformation based on face\n      switch (face) {\n        case 'F':\n          // Front face rotation (Z+ plane)\n          if (direction === 'clockwise') {\n            newX = -y;\n            newY = x;\n          } else {\n            newX = y;\n            newY = -x;\n          }\n          break;\n        case 'B':\n          // Back face rotation (Z- plane)\n          if (direction === 'clockwise') {\n            newX = y;\n            newY = -x;\n          } else {\n            newX = -y;\n            newY = x;\n          }\n          break;\n        case 'R':\n          // Right face rotation (X+ plane)\n          if (direction === 'clockwise') {\n            newY = -z;\n            newZ = y;\n          } else {\n            newY = z;\n            newZ = -y;\n          }\n          break;\n        case 'L':\n          // Left face rotation (X- plane)\n          if (direction === 'clockwise') {\n            newY = z;\n            newZ = -y;\n          } else {\n            newY = -z;\n            newZ = y;\n          }\n          break;\n        case 'U':\n          // Up face rotation (Y+ plane)\n          if (direction === 'clockwise') {\n            newX = z;\n            newZ = -x;\n          } else {\n            newX = -z;\n            newZ = x;\n          }\n          break;\n        case 'D':\n          // Down face rotation (Y- plane)\n          if (direction === 'clockwise') {\n            newX = -z;\n            newZ = x;\n          } else {\n            newX = z;\n            newZ = -x;\n          }\n          break;\n      }\n      console.log(`🔄 Piece ${piece.pieceId} moving from [${x}, ${y}, ${z}] to [${newX}, ${newY}, ${newZ}]`);\n\n      // Update position\n      piece.position = [newX, newY, newZ];\n\n      // Rotate colors to match new orientation\n      const newColors = {\n        ...piece.colors\n      };\n      switch (face) {\n        case 'F':\n          // Front face rotation (Z+ plane)\n          if (direction === 'clockwise') {\n            const temp = newColors.top;\n            newColors.top = newColors.left;\n            newColors.left = newColors.bottom;\n            newColors.bottom = newColors.right;\n            newColors.right = temp;\n          } else {\n            const temp = newColors.top;\n            newColors.top = newColors.right;\n            newColors.right = newColors.bottom;\n            newColors.bottom = newColors.left;\n            newColors.left = temp;\n          }\n          break;\n        case 'B':\n          // Back face rotation (Z- plane)\n          if (direction === 'clockwise') {\n            const temp = newColors.top;\n            newColors.top = newColors.right;\n            newColors.right = newColors.bottom;\n            newColors.bottom = newColors.left;\n            newColors.left = temp;\n          } else {\n            const temp = newColors.top;\n            newColors.top = newColors.left;\n            newColors.left = newColors.bottom;\n            newColors.bottom = newColors.right;\n            newColors.right = temp;\n          }\n          break;\n        case 'R':\n          // Right face rotation (X+ plane)\n          if (direction === 'clockwise') {\n            const temp = newColors.top;\n            newColors.top = newColors.back;\n            newColors.back = newColors.bottom;\n            newColors.bottom = newColors.front;\n            newColors.front = temp;\n          } else {\n            const temp = newColors.top;\n            newColors.top = newColors.front;\n            newColors.front = newColors.bottom;\n            newColors.bottom = newColors.back;\n            newColors.back = temp;\n          }\n          break;\n        case 'L':\n          // Left face rotation (X- plane)\n          if (direction === 'clockwise') {\n            const temp = newColors.top;\n            newColors.top = newColors.front;\n            newColors.front = newColors.bottom;\n            newColors.bottom = newColors.back;\n            newColors.back = temp;\n          } else {\n            const temp = newColors.top;\n            newColors.top = newColors.back;\n            newColors.back = newColors.bottom;\n            newColors.bottom = newColors.front;\n            newColors.front = temp;\n          }\n          break;\n        case 'U':\n          // Up face rotation (Y+ plane)\n          if (direction === 'clockwise') {\n            const temp = newColors.front;\n            newColors.front = newColors.right;\n            newColors.right = newColors.back;\n            newColors.back = newColors.left;\n            newColors.left = temp;\n          } else {\n            const temp = newColors.front;\n            newColors.front = newColors.left;\n            newColors.left = newColors.back;\n            newColors.back = newColors.right;\n            newColors.right = temp;\n          }\n          break;\n        case 'D':\n          // Down face rotation (Y- plane)\n          if (direction === 'clockwise') {\n            const temp = newColors.front;\n            newColors.front = newColors.left;\n            newColors.left = newColors.back;\n            newColors.back = newColors.right;\n            newColors.right = temp;\n          } else {\n            const temp = newColors.front;\n            newColors.front = newColors.right;\n            newColors.right = newColors.back;\n            newColors.back = newColors.left;\n            newColors.left = temp;\n          }\n          break;\n      }\n      piece.colors = newColors;\n\n      // Add to rotation history\n      piece.rotationHistory.push({\n        move: face,\n        direction: direction,\n        fromPosition: [x, y, z],\n        toPosition: [newX, newY, newZ],\n        timestamp: new Date().toISOString()\n      });\n    });\n    logRotationStep('C', face, direction, 'Output pieces colors', pieces.map(p => `${p.pieceId}: ${JSON.stringify(p.colors)}`));\n    logRotationStep('D', face, direction, 'applyRotation completed');\n  }, []);\n\n  // Function to rotate a face with smooth 3D animation\n  const rotateFaceWithAnimation = useCallback((face, direction, onComplete) => {\n    console.log(`🎯 Rotating face ${face} ${direction} with smooth animation`);\n\n    // Log rotation start to terminal\n    logRotationStep('3', face, direction, 'rotateFaceWithAnimation called');\n    logRotationStep('4', face, direction, 'ROTATION STARTED');\n\n    // Record the move for solve (same as manual rotation)\n    setMoveHistory(prev => {\n      const newHistory = [...prev, {\n        face,\n        direction,\n        timestamp: Date.now()\n      }];\n      console.log(`📝 RECORDED MOVE: ${face} ${direction} (Total moves: ${newHistory.length})`);\n      return newHistory;\n    });\n\n    // Set the rotating face for visual feedback\n    setRotatingFace({\n      face,\n      direction\n    });\n    setRotationProgress(0);\n\n    // Smooth animation using requestAnimationFrame\n    const animationDuration = 500; // 500ms for smooth rotation\n    const startTime = performance.now();\n    const animate = currentTime => {\n      const elapsed = currentTime - startTime;\n      const progress = Math.min(elapsed / animationDuration, 1);\n\n      // Ease out animation for smoother feel\n      const easedProgress = 1 - Math.pow(1 - progress, 3);\n      setRotationProgress(easedProgress);\n      if (progress < 1) {\n        requestAnimationFrame(animate);\n      } else {\n        // Animation complete - apply the actual position changes\n        logRotationStep('5', face, direction, 'setCubeState called');\n        setCubeState(prevState => {\n          console.log(`🔄 Applying position changes for ${face} ${direction}`);\n          console.log('Previous state colors:', prevState.map(p => `${p.pieceId}: ${JSON.stringify(p.colors)}`));\n\n          // Log to terminal: rotation completion and state update\n          logRotationStep('6', face, direction, 'ROTATION COMPLETED');\n          logRotationStep('7', face, direction, 'BEFORE STATE UPDATE - Colors', prevState.map(p => `${p.pieceId}: ${JSON.stringify(p.colors)}`));\n          const newState = [...prevState];\n          const pieces = newState.map((piece, index) => ({\n            ...piece,\n            pieceId: index\n          }));\n\n          // Log positions before rotation\n          console.log('📍 Positions before rotation:', pieces.map(p => `${p.pieceId}: [${p.position.join(', ')}]`));\n          logToTerminal(`📍 BEFORE ROTATION - Positions:`, pieces.map(p => `${p.pieceId}: [${p.position.join(', ')}]`), 'INFO');\n\n          // Apply rotation using consolidated logic\n          logRotationStep('8', face, direction, 'Calling applyRotation');\n          applyRotation(pieces, face, direction);\n\n          // Log positions after rotation\n          console.log('📍 Positions after rotation:', pieces.map(p => `${p.pieceId}: [${p.position.join(', ')}]`));\n          logRotationStep('9', face, direction, 'AFTER ROTATION - Positions', pieces.map(p => `${p.pieceId}: [${p.position.join(', ')}]`));\n\n          // Update the newState with the modified pieces\n          pieces.forEach((piece, index) => {\n            newState[index] = {\n              pieceId: piece.pieceId,\n              // Keep the pieceId\n              position: piece.position,\n              colors: piece.colors,\n              rotationHistory: piece.rotationHistory\n            };\n          });\n          console.log('✅ Position changes applied to cube state');\n          console.log('New state colors:', newState.map(p => `${p.pieceId}: ${JSON.stringify(p.colors)}`));\n\n          // Log to terminal: final state after update\n          logRotationStep('10', face, direction, 'AFTER STATE UPDATE - Colors', newState.map(p => `${p.pieceId}: ${JSON.stringify(p.colors)}`));\n          return newState;\n        });\n\n        // Reset animation state\n        setRotatingFace(null);\n        setRotationProgress(0);\n        if (onComplete) onComplete();\n      }\n    };\n    requestAnimationFrame(animate);\n  }, [applyRotation, setCubeState]);\n\n  // Function to execute moves with realistic face rotation animations\n  const executeMovesWithAnimation = useCallback((moves, onComplete) => {\n    let currentMoveIndex = 0;\n    const executeNextMove = () => {\n      if (currentMoveIndex >= moves.length) {\n        if (onComplete) onComplete();\n        return;\n      }\n      const move = moves[currentMoveIndex];\n      console.log(`🔄 Executing move ${currentMoveIndex + 1}/${moves.length}: ${move.face} ${move.direction}`);\n\n      // Execute the move with realistic face rotation\n      rotateFaceWithAnimation(move.face, move.direction, () => {\n        currentMoveIndex++;\n        // Small delay between moves for visual clarity\n        setTimeout(executeNextMove, 25);\n      });\n    };\n    executeNextMove();\n  }, [rotateFaceWithAnimation]);\n\n  // Generate optimal solve sequence using beginner's method\n  const generateOptimalSolve = useCallback(currentState => {\n    // This is a simplified version - in reality, you'd use proper algorithms like CFOP\n    // For now, we'll use the reverse of all moves, but optimize the sequence\n\n    const allMoves = [];\n    currentState.forEach(piece => {\n      piece.rotationHistory.forEach(move => {\n        allMoves.push({\n          face: move.move,\n          direction: move.direction,\n          timestamp: move.timestamp\n        });\n      });\n    });\n    console.log(`🔍 DEBUG: Found ${allMoves.length} moves in rotation history`);\n\n    // Sort moves by timestamp\n    allMoves.sort((a, b) => new Date(a.timestamp) - new Date(b.timestamp));\n    console.log('🔍 DEBUG: Original moves:', allMoves.map(m => `${m.face} ${m.direction}`));\n\n    // Reverse the moves and optimize\n    const reversedMoves = allMoves.reverse().map(move => ({\n      face: move.face,\n      direction: move.direction === 'clockwise' ? 'counterclockwise' : 'clockwise'\n    }));\n    console.log('🔍 DEBUG: Reversed moves:', reversedMoves.map(m => `${m.face} ${m.direction}`));\n\n    // Optimize the sequence by removing redundant moves\n    const optimizedMoves = optimizeMoveSequence(reversedMoves);\n    console.log(`🔍 DEBUG: Optimized moves: ${optimizedMoves.length}`, optimizedMoves.map(m => `${m.face} ${m.direction}`));\n    return optimizedMoves;\n  }, []);\n\n  // Optimize move sequence by removing redundant moves\n  const optimizeMoveSequence = useCallback(moves => {\n    // For now, don't optimize too aggressively to ensure we don't break the solve\n    // Just return the original moves to ensure the cube gets solved\n    return moves;\n  }, []);\n\n  // Rotate a face of the cube with smooth animation\n  const rotateFace = useCallback((face, direction) => {\n    console.log(`🔥🔥🔥 ROTATE FACE CALLED: ${face} ${direction} 🔥🔥🔥`);\n    logRotationStep('1', face, direction, 'rotateFace called');\n    logToTerminal('🚀 TEST LOG: rotateFace function called', {\n      face,\n      direction\n    }, 'SUCCESS');\n    logToTerminal('🎯 DEBUG: About to start rotation animation', {\n      face,\n      direction,\n      isAnimating\n    }, 'INFO');\n\n    // Also log to browser console for easier visibility\n    console.log('🚀🚀🚀 ROTATION STARTED - Browser Console Log 🚀🚀🚀');\n    console.log('Face:', face, 'Direction:', direction);\n    console.log('Current cube state colors:', cubeState.map(p => `${p.pieceId}: ${JSON.stringify(p.colors)}`));\n    if (isAnimating) {\n      logToTerminal(`⚠️ rotateFace: Already animating, skipping`, null, 'WARNING');\n      return;\n    }\n    logRotationStep('2', face, direction, 'Starting rotation');\n    setHasRotated(true); // Mark that rotations have occurred\n    setIsAnimating(true);\n\n    // Use the smooth animation function\n    rotateFaceWithAnimation(face, direction, () => {\n      logToTerminal(`✅ rotateFace: Animation completed`, null, 'SUCCESS');\n\n      // Log final colors to browser console\n      console.log('🎯🎯🎯 ROTATION COMPLETED - Browser Console Log 🎯🎯🎯');\n      console.log('Final cube state colors:', cubeState.map(p => `${p.pieceId}: ${JSON.stringify(p.colors)}`));\n      setIsAnimating(false);\n    });\n  }, [isAnimating, rotateFaceWithAnimation, cubeState]);\n\n  // Scramble the cube with realistic face rotations\n  const scramble = useCallback(() => {\n    if (isAnimating) return;\n    setHasRotated(true); // Mark that rotations have occurred\n    setIsAnimating(true);\n\n    // DON'T clear move history - keep all previous moves (manual + scramble)\n    console.log(`🎲 SCRAMBLING CUBE - Current move history: ${moveHistory.length} moves`);\n    const moves = ['F', 'B', 'R', 'L', 'U', 'D'];\n    const directions = ['clockwise', 'counterclockwise'];\n    const scrambleSequence = [];\n\n    // Generate 20 random moves\n    for (let i = 0; i < 20; i++) {\n      const move = moves[Math.floor(Math.random() * moves.length)];\n      const direction = directions[Math.floor(Math.random() * directions.length)];\n      scrambleSequence.push({\n        face: move,\n        direction\n      });\n    }\n    console.log('🎲 SCRAMBLING CUBE with sequence:', scrambleSequence.map(m => `${m.face} ${m.direction}`));\n\n    // Execute scramble moves with realistic animations\n    executeMovesWithAnimation(scrambleSequence, () => {\n      setIsAnimating(false);\n      console.log('✅ CUBE SCRAMBLED!');\n\n      // Log final state\n      setCubeState(currentState => {\n        console.log('🎯 CUBE STATE AFTER SCRAMBLE:');\n        console.log(JSON.stringify(currentState, null, 2));\n        logToTerminal('CUBE STATE AFTER SCRAMBLE', currentState);\n        return currentState;\n      });\n    });\n  }, [isAnimating, executeMovesWithAnimation, moveHistory, setCubeState]);\n\n  // Reset the cube to solved state\n  const reset = useCallback(() => {\n    // Clear move history when resetting\n    setMoveHistory([]);\n    setHasRotated(false); // Reset the rotation flag since we're going back to original state\n\n    setCubeState(() => {\n      const state = [];\n\n      // Create 26 pieces (3x3x3 minus center)\n      for (let x = -1; x <= 1; x++) {\n        for (let y = -1; y <= 1; y++) {\n          for (let z = -1; z <= 1; z++) {\n            // Skip the center piece\n            if (x === 0 && y === 0 && z === 0) continue;\n\n            // Get pieceId based on position in solved state\n            const pieceId = state.length;\n\n            // Get original colors for this piece\n            const colors = getOriginalColors(pieceId);\n\n            // Debug logging for initial state\n            console.log(`Initial piece ${pieceId} at [${x}, ${y}, ${z}]:`, colors);\n            state.push({\n              position: [x, y, z],\n              colors,\n              rotationHistory: [],\n              // Track all rotations this piece has undergone\n              pieceId: pieceId // Store the pieceId for reference\n            });\n          }\n        }\n      }\n\n      // Log the complete initial cube state as JSON\n      console.log('🎯 INITIAL CUBE STATE (End of Initial Load):');\n      console.log(JSON.stringify(state, null, 2));\n\n      // Also log to terminal (this will show in the terminal where npm start is running)\n      logToTerminal('INITIAL CUBE STATE (End of Initial Load)', state);\n      return state;\n    });\n  }, [setCubeState]);\n\n  // Simple solve function that reverses all recorded moves\n  const solve = useCallback(() => {\n    if (isAnimating) return;\n    setIsAnimating(true);\n    console.log(`🎯 SOLVING CUBE: Reversing ${moveHistory.length} moves`);\n    console.log('📋 Move history:', moveHistory.map(m => `${m.face} ${m.direction}`));\n    console.log('📋 Full move history object:', moveHistory);\n    if (moveHistory.length === 0) {\n      console.log('⚠️ No moves to reverse - cube might already be solved or no moves were recorded');\n      setIsAnimating(false);\n      return;\n    }\n\n    // Create reverse sequence (last move first, opposite direction)\n    const solveSequence = moveHistory.slice().reverse().map(move => ({\n      face: move.face,\n      direction: move.direction === 'clockwise' ? 'counterclockwise' : 'clockwise'\n    }));\n    console.log('🔄 Reversed sequence:', solveSequence.map(m => `${m.face} ${m.direction}`));\n    console.log(`🚀 Starting solve with ${solveSequence.length} moves...`);\n\n    // Execute moves with realistic face rotations\n    executeMovesWithAnimation(solveSequence, () => {\n      // Clear move history after solving\n      setMoveHistory([]);\n      setIsAnimating(false);\n      console.log('✅ CUBE SOLVED!');\n    });\n  }, [isAnimating, moveHistory, executeMovesWithAnimation]);\n\n  // Debug: Log the state being passed to children\n  console.log('🔄 CubeStateProvider: Passing state to children, cubeState length:', cubeState.length);\n  if (cubeState.length > 0) {\n    console.log('🔄 CubeStateProvider: First piece being passed:', cubeState[0].pieceId, JSON.stringify(cubeState[0].colors));\n  }\n  return children({\n    cubeState,\n    isAnimating,\n    rotatingFace,\n    rotationProgress,\n    rotateFace,\n    scramble,\n    reset,\n    solve\n  });\n}\n\n// Main cube group component with enhanced structure\n_s2(CubeStateProvider, \"TN9SAxGGOivajAg1SgRCpFPCwLM=\");\n_c2 = CubeStateProvider;\nfunction CubeGroup({\n  cubeState,\n  isAnimating,\n  rotatingFace,\n  rotationProgress,\n  rotateFace,\n  scramble,\n  reset,\n  solve,\n  isRotating,\n  autoRotate = false,\n  onScramble,\n  onReset,\n  onSolve,\n  onRotateFace,\n  onCubeStateChange,\n  highlightedPieces = []\n}) {\n  _s3();\n  const groupRef = useRef();\n  const [rotationSpeed] = useState({\n    x: 0.005,\n    y: 0.01\n  });\n\n  // Set up refs for parent component\n  React.useEffect(() => {\n    console.log('🎯 CubeGroup: Setting up refs');\n    if (onRotateFace) {\n      console.log('🎯 CubeGroup: Setting rotateFace ref');\n      onRotateFace(rotateFace);\n    }\n    if (onScramble) {\n      console.log('🎯 CubeGroup: Setting scramble ref');\n      onScramble(scramble);\n    }\n    if (onReset) {\n      console.log('🎯 CubeGroup: Setting reset ref');\n      onReset(reset);\n    }\n    if (onSolve) {\n      console.log('🎯 CubeGroup: Setting solve ref');\n      onSolve(solve);\n    }\n  }, [rotateFace, scramble, reset, solve, onRotateFace, onScramble, onReset, onSolve]);\n\n  // Auto-trigger rotation removed\n\n  // Removed excessive re-render logging\n\n  // Helper functions for enhanced debugging\n  const getShapeType = pieceId => {\n    const shapeTypes = ['Square', 'Square', 'Square', 'Square', 'Square', 'Circle', 'Circle', 'Circle', 'Circle', 'Circle', 'Triangle', 'Triangle', 'Triangle', 'Triangle', 'Diamond', 'Diamond', 'Diamond', 'Diamond', 'Diamond', 'Diamond', 'Triangle', 'Triangle', 'Triangle', 'Triangle', 'Triangle', 'Triangle'];\n    return shapeTypes[pieceId] || 'Unknown';\n  };\n  const getShapeColor = pieceId => {\n    const shapeColors = ['Red', 'Red', 'Red', 'Red', 'Red', 'Blue', 'Blue', 'Blue', 'Blue', 'Blue', 'Green', 'Green', 'Green', 'Green', 'Yellow', 'Yellow', 'Yellow', 'Yellow', 'Yellow', 'Yellow', 'Orange', 'Orange', 'Orange', 'Orange', 'Orange', 'Orange'];\n    return shapeColors[pieceId] || 'Unknown';\n  };\n\n  // Auto-rotation effect\n  useEffect(() => {\n    let animationId;\n    if (autoRotate && groupRef.current) {\n      const animate = () => {\n        if (groupRef.current) {\n          groupRef.current.rotation.x += rotationSpeed.x;\n          groupRef.current.rotation.y += rotationSpeed.y;\n          animationId = requestAnimationFrame(animate);\n        }\n      };\n      animate();\n    }\n    return () => {\n      if (animationId) {\n        cancelAnimationFrame(animationId);\n      }\n    };\n  }, [autoRotate, rotationSpeed]);\n\n  // Manual rotation effect\n  useEffect(() => {\n    if (isRotating && groupRef.current) {\n      groupRef.current.rotation.x += 0.01;\n      groupRef.current.rotation.y += 0.01;\n    }\n  }, [isRotating]);\n\n  // Helper function to determine if a piece is part of the rotating face\n  const isPartOfRotatingFace = useCallback((piece, rotatingFace) => {\n    if (!rotatingFace) return false;\n    const [x, y, z] = piece.position;\n    const {\n      face\n    } = rotatingFace;\n    switch (face) {\n      case 'R':\n        return x === 1;\n      case 'L':\n        return x === -1;\n      case 'U':\n        return y === 1;\n      case 'D':\n        return y === -1;\n      case 'F':\n        return z === 1;\n      case 'B':\n        return z === -1;\n      default:\n        return false;\n    }\n  }, []);\n\n  // Helper function to get rotation angle for a piece\n  const getRotationAngle = useCallback((piece, rotatingFace, rotationProgress) => {\n    if (!rotatingFace || !isPartOfRotatingFace(piece, rotatingFace)) {\n      return {\n        x: 0,\n        y: 0,\n        z: 0\n      };\n    }\n    const {\n      face,\n      direction\n    } = rotatingFace;\n    const sign = direction === 'clockwise' ? 1 : -1;\n    const angle = Math.PI / 2 * rotationProgress * sign; // 90 degrees total\n\n    switch (face) {\n      case 'F':\n        return {\n          x: 0,\n          y: 0,\n          z: angle\n        };\n      case 'B':\n        return {\n          x: 0,\n          y: 0,\n          z: -angle\n        };\n      case 'R':\n        return {\n          x: angle,\n          y: 0,\n          z: 0\n        };\n      case 'L':\n        return {\n          x: -angle,\n          y: 0,\n          z: 0\n        };\n      case 'U':\n        return {\n          x: 0,\n          y: angle,\n          z: 0\n        };\n      case 'D':\n        return {\n          x: 0,\n          y: -angle,\n          z: 0\n        };\n      default:\n        return {\n          x: 0,\n          y: 0,\n          z: 0\n        };\n    }\n  }, [isPartOfRotatingFace]);\n\n  // Group rotation: Create separate groups for rotating and non-rotating pieces\n  const rotatingPieces = [];\n  const nonRotatingPieces = [];\n  cubeState.forEach((piece, index) => {\n    const pieceId = piece.pieceId || index;\n    const isHighlighted = highlightedPieces.includes(pieceId);\n    const highlightInfo = isHighlighted ? {\n      shapeType: getShapeType(pieceId),\n      shapeColor: getShapeColor(pieceId),\n      pieceId: pieceId\n    } : null;\n    const cubePiece = /*#__PURE__*/_jsxDEV(CubePiece, {\n      position: piece.position,\n      colors: piece.colors,\n      pieceId: pieceId,\n      isHighlighted: isHighlighted,\n      highlightInfo: highlightInfo,\n      rotatingFace: rotatingFace,\n      rotationProgress: rotationProgress\n    }, `piece-${pieceId}`, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1395,\n      columnNumber: 7\n    }, this);\n\n    // Check if this piece is part of the rotating face\n    if (rotatingFace && isPartOfRotatingFace(piece, rotatingFace)) {\n      rotatingPieces.push(cubePiece);\n    } else {\n      nonRotatingPieces.push(cubePiece);\n    }\n  });\n\n  // Get rotation angle for the rotating group\n  const groupRotationAngle = rotatingFace ? getRotationAngle(cubeState[0], rotatingFace, rotationProgress) : {\n    x: 0,\n    y: 0,\n    z: 0\n  };\n  return /*#__PURE__*/_jsxDEV(\"group\", {\n    ref: groupRef,\n    children: [nonRotatingPieces, rotatingPieces.length > 0 && /*#__PURE__*/_jsxDEV(\"group\", {\n      rotation: [groupRotationAngle.x, groupRotationAngle.y, groupRotationAngle.z],\n      children: rotatingPieces\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1425,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 1419,\n    columnNumber: 5\n  }, this);\n}\n\n// Main Rubik's Cube component\n_s3(CubeGroup, \"2g92ErdL3bVRw0ysxfr88YCNvF8=\");\n_c3 = CubeGroup;\nfunction RubiksCube({\n  isRotating,\n  autoRotate = false,\n  onScramble,\n  onReset,\n  onSolve,\n  onRotateFace,\n  onCubeStateChange,\n  highlightedPieces = []\n}) {\n  return /*#__PURE__*/_jsxDEV(Canvas, {\n    camera: {\n      position: [5, 5, 5],\n      fov: 50\n    },\n    style: {\n      background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"ambientLight\", {\n      intensity: 0.6\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1440,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"directionalLight\", {\n      position: [10, 10, 5],\n      intensity: 1\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1441,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"pointLight\", {\n      position: [-10, -10, -5],\n      intensity: 0.5\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1442,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CubeStateProvider, {\n      children: ({\n        cubeState,\n        isAnimating,\n        rotatingFace,\n        rotationProgress,\n        rotateFace,\n        scramble,\n        reset,\n        solve\n      }) => /*#__PURE__*/_jsxDEV(CubeGroup, {\n        cubeState: cubeState,\n        isAnimating: isAnimating,\n        rotatingFace: rotatingFace,\n        rotationProgress: rotationProgress,\n        rotateFace: rotateFace,\n        scramble: scramble,\n        reset: reset,\n        solve: solve,\n        isRotating: isRotating,\n        autoRotate: autoRotate,\n        onScramble: onScramble,\n        onReset: onReset,\n        onSolve: onSolve,\n        onRotateFace: onRotateFace,\n        onCubeStateChange: onCubeStateChange,\n        highlightedPieces: highlightedPieces\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1446,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1444,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 1436,\n    columnNumber: 5\n  }, this);\n}\n_c4 = RubiksCube;\nexport default RubiksCube;\nvar _c, _c2, _c3, _c4;\n$RefreshReg$(_c, \"CubePiece\");\n$RefreshReg$(_c2, \"CubeStateProvider\");\n$RefreshReg$(_c3, \"CubeGroup\");\n$RefreshReg$(_c4, \"RubiksCube\");","map":{"version":3,"names":["React","useState","useRef","useMemo","useCallback","useEffect","Canvas","useFrame","OrbitControls","Environment","THREE","jsxDEV","_jsxDEV","console","log","logRotationStep","step","face","direction","data","timestamp","Date","toLocaleTimeString","message","logToTerminal","type","prefix","fullMessage","logEntry","JSON","stringify","repeat","fetch","method","headers","body","then","response","ok","Error","status","catch","error","fileLogLine","createShapeWithFaceBorder","pieceId","size","faceIndex","borderColors","borderColor","shapes","position","children","args","fileName","_jsxFileName","lineNumber","columnNumber","color","rotation","Math","PI","shapeIndex","createShape","CubePiece","colors","isHighlighted","highlightInfo","rotatingFace","rotationProgress","_s","meshRef","groupRef","shapeTypes","shapeColors","shapeType","shapeColor","join","x","y","z","visibleFaces","push","map","colorMap","cubeGeometry","BoxGeometry","faceGeometry","geometry","PlaneGeometry","getFaceColor","front","back","right","left","top","bottom","isFaceVisible","includes","isPartOfRotatingFace","getGroupRotationAngle","sign","angle","getGroupPositionOffset","finalPosition","ref","emissive","emissiveIntensity","faceColor","facePosition","faceRotation","faceNames","currentFaceName","shouldHighlight","blackVisibleFaces","displayColor","side","FrontSide","_c","getOriginalColors","positions","originalPosition","CubeStateManager","state","initialized","listeners","getState","_this$state","initialize","length","setState","newState","_this$state2","_this$state3","p","forEach","listener","subscribe","filter","l","rotationHistory","CubeStateProvider","_s2","forceUpdate","setForceUpdate","unsubscribe","prev","cubeState","setCubeState","isAnimating","setIsAnimating","setRotatingFace","setRotationProgress","moveHistory","setMoveHistory","hasRotated","setHasRotated","hasOriginalColors","every","piece","index","originalColors","applyRotation","pieces","rotatingPieces","newX","newY","newZ","newColors","temp","move","fromPosition","toPosition","toISOString","rotateFaceWithAnimation","onComplete","newHistory","now","animationDuration","startTime","performance","animate","currentTime","elapsed","progress","min","easedProgress","pow","requestAnimationFrame","prevState","executeMovesWithAnimation","moves","currentMoveIndex","executeNextMove","setTimeout","generateOptimalSolve","currentState","allMoves","sort","a","b","m","reversedMoves","reverse","optimizedMoves","optimizeMoveSequence","rotateFace","scramble","directions","scrambleSequence","i","floor","random","reset","solve","solveSequence","slice","_c2","CubeGroup","isRotating","autoRotate","onScramble","onReset","onSolve","onRotateFace","onCubeStateChange","highlightedPieces","_s3","rotationSpeed","getShapeType","getShapeColor","animationId","current","cancelAnimationFrame","getRotationAngle","nonRotatingPieces","cubePiece","groupRotationAngle","_c3","RubiksCube","camera","fov","style","background","intensity","_c4","$RefreshReg$"],"sources":["C:/Repo/GitHub/rubiks-cube/src/components/RubiksCube.js"],"sourcesContent":["import React, { useState, useRef, useMemo, useCallback, useEffect } from 'react';\r\nimport { Canvas, useFrame } from '@react-three/fiber';\r\nimport { OrbitControls, Environment } from '@react-three/drei';\r\nimport * as THREE from 'three';\r\n\r\n// FORCE RELOAD - B ROTATION DEBUG - UPDATED AT 5:30 PM\r\nconsole.log('🔥 RUBIKSCUBE.JS LOADED - B ROTATION DEBUG MODE - UPDATED');\r\n\r\n// Special logging function for rotation tracking\r\nconst logRotationStep = (step, face, direction, data = null) => {\r\n  const timestamp = new Date().toLocaleTimeString();\r\n  const message = `🔄 ROTATION STEP ${step}: ${face} ${direction}`;\r\n  logToTerminal(message, data, 'INFO');\r\n};\r\n\r\n// Enhanced logging function that will be visible in terminal\r\nconst logToTerminal = (message, data = null, type = 'INFO') => {\r\n  const timestamp = new Date().toLocaleTimeString();\r\n  const prefix = type === 'ERROR' ? '❌' : type === 'WARNING' ? '⚠️' : type === 'SUCCESS' ? '✅' : '🎯';\r\n  const fullMessage = `${prefix} [${timestamp}] ${message}`;\r\n  \r\n  // Create a more structured log entry\r\n  const logEntry = {\r\n    timestamp: timestamp,\r\n    type: type,\r\n    message: message,\r\n    data: data\r\n  };\r\n  \r\n  // Log to browser console with enhanced formatting\r\n  console.log(`\\n${fullMessage}`);\r\n  if (data) {\r\n    if (typeof data === 'object') {\r\n    console.log(JSON.stringify(data, null, 2));\r\n    } else {\r\n      console.log(data);\r\n    }\r\n  }\r\n  console.log('='.repeat(80) + '\\n');\r\n  \r\n  // Send to log server to print in terminal\r\n  fetch('http://localhost:3001/log', {\r\n    method: 'POST',\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n    },\r\n    body: JSON.stringify(logEntry)\r\n  })\r\n  .then(response => {\r\n    if (!response.ok) {\r\n      throw new Error(`HTTP error! status: ${response.status}`);\r\n    }\r\n    console.log('✅ Log sent to terminal successfully');\r\n  })\r\n  .catch(error => {\r\n    console.error('❌ Could not send log to terminal server:', error);\r\n    console.log('💡 Make sure the log server is running with: npm run log-server');\r\n  });\r\n  \r\n  // Also write to local file for analysis\r\n  const fileLogLine = `[${timestamp}] ${type}: ${message}${data ? ' | Data: ' + JSON.stringify(data) : ''}\\n`;\r\n  fetch('http://localhost:3001/write-log', {\r\n    method: 'POST',\r\n    headers: {\r\n      'Content-Type': 'text/plain',\r\n    },\r\n    body: fileLogLine\r\n  })\r\n  .catch(error => {\r\n    console.log('File logging not available:', error.message);\r\n  });\r\n};\r\n\r\n// Function to create unique shapes for each piece with different border colors per face\r\nfunction createShapeWithFaceBorder(pieceId, size, faceIndex) {\r\n  // Use the 6 standard Rubik's cube colors for borders\r\n  const borderColors = [\r\n    '#FFFFFF', // Face 0 (front) - White\r\n    '#FF8C00', // Face 1 (back) - Orange  \r\n    '#00FF00', // Face 2 (right) - Green\r\n    '#DC143C', // Face 3 (left) - Red\r\n    '#0000FF', // Face 4 (top) - Blue\r\n    '#FFD700'  // Face 5 (bottom) - Yellow\r\n  ];\r\n  \r\n  const borderColor = borderColors[faceIndex] || '#000000';\r\n\r\n  const shapes = [\r\n    // 0-4: Basic geometric shapes (Squares) with individual face border colors\r\n    () => <group position={[0, 0, 0.012]}>\r\n      <mesh><planeGeometry args={[size, size]} /><meshBasicMaterial color=\"red\" /></mesh>\r\n      <mesh position={[0, 0, 0.001]}><planeGeometry args={[size*0.95, size*0.95]} /><meshBasicMaterial color={borderColor} /></mesh>\r\n      <mesh position={[0, 0, 0.002]}><planeGeometry args={[size*0.9, size*0.9]} /><meshBasicMaterial color=\"red\" /></mesh>\r\n    </group>, // Square\r\n    () => <group position={[0, 0, 0.012]}>\r\n      <mesh><planeGeometry args={[size, size]} /><meshBasicMaterial color=\"blue\" /></mesh>\r\n      <mesh position={[0, 0, 0.001]}><planeGeometry args={[size*0.95, size*0.95]} /><meshBasicMaterial color={borderColor} /></mesh>\r\n      <mesh position={[0, 0, 0.002]}><planeGeometry args={[size*0.9, size*0.9]} /><meshBasicMaterial color=\"blue\" /></mesh>\r\n    </group>, // Square\r\n    () => <group position={[0, 0, 0.012]}>\r\n      <mesh><planeGeometry args={[size, size]} /><meshBasicMaterial color=\"green\" /></mesh>\r\n      <mesh position={[0, 0, 0.001]}><planeGeometry args={[size*0.95, size*0.95]} /><meshBasicMaterial color={borderColor} /></mesh>\r\n      <mesh position={[0, 0, 0.002]}><planeGeometry args={[size*0.9, size*0.9]} /><meshBasicMaterial color=\"green\" /></mesh>\r\n    </group>, // Square\r\n    () => <group position={[0, 0, 0.012]}>\r\n      <mesh><planeGeometry args={[size, size]} /><meshBasicMaterial color=\"orange\" /></mesh>\r\n      <mesh position={[0, 0, 0.001]}><planeGeometry args={[size*0.95, size*0.95]} /><meshBasicMaterial color={borderColor} /></mesh>\r\n      <mesh position={[0, 0, 0.002]}><planeGeometry args={[size*0.9, size*0.9]} /><meshBasicMaterial color=\"orange\" /></mesh>\r\n    </group>, // Square\r\n    () => <group position={[0, 0, 0.012]}>\r\n      <mesh><planeGeometry args={[size, size]} /><meshBasicMaterial color=\"purple\" /></mesh>\r\n      <mesh position={[0, 0, 0.001]}><planeGeometry args={[size*0.95, size*0.95]} /><meshBasicMaterial color={borderColor} /></mesh>\r\n      <mesh position={[0, 0, 0.002]}><planeGeometry args={[size*0.9, size*0.9]} /><meshBasicMaterial color=\"purple\" /></mesh>\r\n    </group>, // Square\r\n\r\n    // 5-9: Circles with individual face border colors\r\n    () => <group position={[0, 0, 0.012]}>\r\n      <mesh><circleGeometry args={[size/2, 32]} /><meshBasicMaterial color=\"red\" /></mesh>\r\n      <mesh position={[0, 0, 0.001]}><circleGeometry args={[size*0.45, 32]} /><meshBasicMaterial color={borderColor} /></mesh>\r\n      <mesh position={[0, 0, 0.002]}><circleGeometry args={[size*0.4, 32]} /><meshBasicMaterial color=\"red\" /></mesh>\r\n    </group>, // Circle\r\n    () => <group position={[0, 0, 0.012]}>\r\n      <mesh><circleGeometry args={[size/2, 32]} /><meshBasicMaterial color=\"blue\" /></mesh>\r\n      <mesh position={[0, 0, 0.001]}><circleGeometry args={[size*0.45, 32]} /><meshBasicMaterial color={borderColor} /></mesh>\r\n      <mesh position={[0, 0, 0.002]}><circleGeometry args={[size*0.4, 32]} /><meshBasicMaterial color=\"blue\" /></mesh>\r\n    </group>, // Circle\r\n    () => <group position={[0, 0, 0.012]}>\r\n      <mesh><circleGeometry args={[size/2, 32]} /><meshBasicMaterial color=\"green\" /></mesh>\r\n      <mesh position={[0, 0, 0.001]}><circleGeometry args={[size*0.45, 32]} /><meshBasicMaterial color={borderColor} /></mesh>\r\n      <mesh position={[0, 0, 0.002]}><circleGeometry args={[size*0.4, 32]} /><meshBasicMaterial color=\"green\" /></mesh>\r\n    </group>, // Circle\r\n    () => <group position={[0, 0, 0.012]}>\r\n      <mesh><circleGeometry args={[size/2, 32]} /><meshBasicMaterial color=\"orange\" /></mesh>\r\n      <mesh position={[0, 0, 0.001]}><circleGeometry args={[size*0.45, 32]} /><meshBasicMaterial color={borderColor} /></mesh>\r\n      <mesh position={[0, 0, 0.002]}><circleGeometry args={[size*0.4, 32]} /><meshBasicMaterial color=\"orange\" /></mesh>\r\n    </group>, // Circle\r\n    () => <group position={[0, 0, 0.012]}>\r\n      <mesh><circleGeometry args={[size/2, 32]} /><meshBasicMaterial color=\"yellow\" /></mesh>\r\n      <mesh position={[0, 0, 0.001]}><circleGeometry args={[size*0.45, 32]} /><meshBasicMaterial color={borderColor} /></mesh>\r\n      <mesh position={[0, 0, 0.002]}><circleGeometry args={[size*0.4, 32]} /><meshBasicMaterial color=\"yellow\" /></mesh>\r\n    </group>, // Circle\r\n\r\n    // 10-14: Triangles (flat cones to create triangle shapes) with individual face border colors\r\n    () => <group position={[0, 0, 0.012]}>\r\n      <mesh rotation={[Math.PI/2, 0, 0]}><coneGeometry args={[size/2, 0.01, 3]} /><meshBasicMaterial color=\"cyan\" /></mesh>\r\n      <mesh position={[0, 0, 0.001]} rotation={[Math.PI/2, 0, 0]}><coneGeometry args={[size*0.45, 0.01, 3]} /><meshBasicMaterial color={borderColor} /></mesh>\r\n      <mesh position={[0, 0, 0.002]} rotation={[Math.PI/2, 0, 0]}><coneGeometry args={[size*0.4, 0.01, 3]} /><meshBasicMaterial color=\"cyan\" /></mesh>\r\n    </group>, // Triangle\r\n    () => <group position={[0, 0, 0.012]}>\r\n      <mesh rotation={[Math.PI/2, 0, 0]}><coneGeometry args={[size/2, 0.01, 3]} /><meshBasicMaterial color=\"magenta\" /></mesh>\r\n      <mesh position={[0, 0, 0.001]} rotation={[Math.PI/2, 0, 0]}><coneGeometry args={[size*0.45, 0.01, 3]} /><meshBasicMaterial color={borderColor} /></mesh>\r\n      <mesh position={[0, 0, 0.002]} rotation={[Math.PI/2, 0, 0]}><coneGeometry args={[size*0.4, 0.01, 3]} /><meshBasicMaterial color=\"magenta\" /></mesh>\r\n    </group>, // Triangle\r\n    () => <group position={[0, 0, 0.012]}>\r\n      <mesh rotation={[Math.PI/2, 0, 0]}><coneGeometry args={[size/2, 0.01, 3]} /><meshBasicMaterial color=\"lime\" /></mesh>\r\n      <mesh position={[0, 0, 0.001]} rotation={[Math.PI/2, 0, 0]}><coneGeometry args={[size*0.45, 0.01, 3]} /><meshBasicMaterial color={borderColor} /></mesh>\r\n      <mesh position={[0, 0, 0.002]} rotation={[Math.PI/2, 0, 0]}><coneGeometry args={[size*0.4, 0.01, 3]} /><meshBasicMaterial color=\"lime\" /></mesh>\r\n    </group>, // Triangle\r\n    () => <group position={[0, 0, 0.012]}>\r\n      <mesh rotation={[Math.PI/2, 0, 0]}><coneGeometry args={[size/2, 0.01, 3]} /><meshBasicMaterial color=\"pink\" /></mesh>\r\n      <mesh position={[0, 0, 0.001]} rotation={[Math.PI/2, 0, 0]}><coneGeometry args={[size*0.45, 0.01, 3]} /><meshBasicMaterial color={borderColor} /></mesh>\r\n      <mesh position={[0, 0, 0.002]} rotation={[Math.PI/2, 0, 0]}><coneGeometry args={[size*0.4, 0.01, 3]} /><meshBasicMaterial color=\"pink\" /></mesh>\r\n    </group>, // Triangle\r\n    () => <group position={[0, 0, 0.012]}>\r\n      <mesh rotation={[0, 0, Math.PI/4]}><planeGeometry args={[size, size]} /><meshBasicMaterial color=\"purple\" /></mesh>\r\n      <mesh position={[0, 0, 0.001]} rotation={[0, 0, Math.PI/4]}><planeGeometry args={[size*0.95, size*0.95]} /><meshBasicMaterial color={borderColor} /></mesh>\r\n      <mesh position={[0, 0, 0.002]} rotation={[0, 0, Math.PI/4]}><planeGeometry args={[size*0.9, size*0.9]} /><meshBasicMaterial color=\"purple\" /></mesh>\r\n    </group>, // Diamond\r\n\r\n    // 15-19: Diamonds (rotated squares) with individual face border colors\r\n    () => <group position={[0, 0, 0.012]}>\r\n      <mesh rotation={[0, 0, Math.PI/4]}><planeGeometry args={[size, size]} /><meshBasicMaterial color=\"red\" /></mesh>\r\n      <mesh position={[0, 0, 0.001]} rotation={[0, 0, Math.PI/4]}><planeGeometry args={[size*0.95, size*0.95]} /><meshBasicMaterial color={borderColor} /></mesh>\r\n      <mesh position={[0, 0, 0.002]} rotation={[0, 0, Math.PI/4]}><planeGeometry args={[size*0.9, size*0.9]} /><meshBasicMaterial color=\"red\" /></mesh>\r\n    </group>, // Diamond\r\n    () => <group position={[0, 0, 0.012]}>\r\n      <mesh rotation={[0, 0, Math.PI/4]}><planeGeometry args={[size, size]} /><meshBasicMaterial color=\"blue\" /></mesh>\r\n      <mesh position={[0, 0, 0.001]} rotation={[0, 0, Math.PI/4]}><planeGeometry args={[size*0.95, size*0.95]} /><meshBasicMaterial color={borderColor} /></mesh>\r\n      <mesh position={[0, 0, 0.002]} rotation={[0, 0, Math.PI/4]}><planeGeometry args={[size*0.9, size*0.9]} /><meshBasicMaterial color=\"blue\" /></mesh>\r\n    </group>, // Diamond\r\n    () => <group position={[0, 0, 0.012]}>\r\n      <mesh rotation={[0, 0, Math.PI/4]}><planeGeometry args={[size, size]} /><meshBasicMaterial color=\"green\" /></mesh>\r\n      <mesh position={[0, 0, 0.001]} rotation={[0, 0, Math.PI/4]}><planeGeometry args={[size*0.95, size*0.95]} /><meshBasicMaterial color={borderColor} /></mesh>\r\n      <mesh position={[0, 0, 0.002]} rotation={[0, 0, Math.PI/4]}><planeGeometry args={[size*0.9, size*0.9]} /><meshBasicMaterial color=\"green\" /></mesh>\r\n    </group>, // Diamond\r\n    () => <group position={[0, 0, 0.012]}>\r\n      <mesh rotation={[0, 0, Math.PI/4]}><planeGeometry args={[size, size]} /><meshBasicMaterial color=\"orange\" /></mesh>\r\n      <mesh position={[0, 0, 0.001]} rotation={[0, 0, Math.PI/4]}><planeGeometry args={[size*0.95, size*0.95]} /><meshBasicMaterial color={borderColor} /></mesh>\r\n      <mesh position={[0, 0, 0.002]} rotation={[0, 0, Math.PI/4]}><planeGeometry args={[size*0.9, size*0.9]} /><meshBasicMaterial color=\"orange\" /></mesh>\r\n    </group>, // Diamond\r\n    () => <group position={[0, 0, 0.012]}>\r\n      <mesh rotation={[0, 0, Math.PI/4]}><planeGeometry args={[size, size]} /><meshBasicMaterial color=\"purple\" /></mesh>\r\n      <mesh position={[0, 0, 0.001]} rotation={[0, 0, Math.PI/4]}><planeGeometry args={[size*0.95, size*0.95]} /><meshBasicMaterial color={borderColor} /></mesh>\r\n      <mesh position={[0, 0, 0.002]} rotation={[0, 0, Math.PI/4]}><planeGeometry args={[size*0.9, size*0.9]} /><meshBasicMaterial color=\"purple\" /></mesh>\r\n    </group>, // Diamond\r\n\r\n    // 20-25: Triangles (flat cones to create triangle shapes) with individual face border colors\r\n    () => <group position={[0, 0, 0.012]}>\r\n      <mesh rotation={[Math.PI/2, 0, 0]}><coneGeometry args={[size/2, 0.01, 3]} /><meshBasicMaterial color=\"cyan\" /></mesh>\r\n      <mesh position={[0, 0, 0.001]} rotation={[Math.PI/2, 0, 0]}><coneGeometry args={[size*0.45, 0.01, 3]} /><meshBasicMaterial color={borderColor} /></mesh>\r\n      <mesh position={[0, 0, 0.002]} rotation={[Math.PI/2, 0, 0]}><coneGeometry args={[size*0.4, 0.01, 3]} /><meshBasicMaterial color=\"cyan\" /></mesh>\r\n    </group>, // Triangle\r\n    () => <group position={[0, 0, 0.012]}>\r\n      <mesh rotation={[Math.PI/2, 0, 0]}><coneGeometry args={[size/2, 0.01, 3]} /><meshBasicMaterial color=\"magenta\" /></mesh>\r\n      <mesh position={[0, 0, 0.001]} rotation={[Math.PI/2, 0, 0]}><coneGeometry args={[size*0.45, 0.01, 3]} /><meshBasicMaterial color={borderColor} /></mesh>\r\n      <mesh position={[0, 0, 0.002]} rotation={[Math.PI/2, 0, 0]}><coneGeometry args={[size*0.4, 0.01, 3]} /><meshBasicMaterial color=\"magenta\" /></mesh>\r\n    </group>, // Triangle\r\n    () => <group position={[0, 0, 0.012]}>\r\n      <mesh rotation={[Math.PI/2, 0, 0]}><coneGeometry args={[size/2, 0.01, 3]} /><meshBasicMaterial color=\"lime\" /></mesh>\r\n      <mesh position={[0, 0, 0.001]} rotation={[Math.PI/2, 0, 0]}><coneGeometry args={[size*0.45, 0.01, 3]} /><meshBasicMaterial color={borderColor} /></mesh>\r\n      <mesh position={[0, 0, 0.002]} rotation={[Math.PI/2, 0, 0]}><coneGeometry args={[size*0.4, 0.01, 3]} /><meshBasicMaterial color=\"lime\" /></mesh>\r\n    </group>, // Triangle\r\n    () => <group position={[0, 0, 0.012]}>\r\n      <mesh rotation={[Math.PI/2, 0, 0]}><coneGeometry args={[size/2, 0.01, 3]} /><meshBasicMaterial color=\"pink\" /></mesh>\r\n      <mesh position={[0, 0, 0.001]} rotation={[Math.PI/2, 0, 0]}><coneGeometry args={[size*0.45, 0.01, 3]} /><meshBasicMaterial color={borderColor} /></mesh>\r\n      <mesh position={[0, 0, 0.002]} rotation={[Math.PI/2, 0, 0]}><coneGeometry args={[size*0.4, 0.01, 3]} /><meshBasicMaterial color=\"pink\" /></mesh>\r\n    </group>, // Triangle\r\n    () => <group position={[0, 0, 0.012]}>\r\n      <mesh rotation={[Math.PI/2, 0, 0]}><coneGeometry args={[size/2, 0.01, 3]} /><meshBasicMaterial color=\"purple\" /></mesh>\r\n      <mesh position={[0, 0, 0.001]} rotation={[Math.PI/2, 0, 0]}><coneGeometry args={[size*0.45, 0.01, 3]} /><meshBasicMaterial color={borderColor} /></mesh>\r\n      <mesh position={[0, 0, 0.002]} rotation={[Math.PI/2, 0, 0]}><coneGeometry args={[size*0.4, 0.01, 3]} /><meshBasicMaterial color=\"purple\" /></mesh>\r\n    </group>, // Triangle\r\n    () => <group position={[0, 0, 0.012]}>\r\n      <mesh rotation={[Math.PI/2, 0, 0]}><coneGeometry args={[size/2, 0.01, 3]} /><meshBasicMaterial color=\"yellow\" /></mesh>\r\n      <mesh position={[0, 0, 0.001]} rotation={[Math.PI/2, 0, 0]}><coneGeometry args={[size*0.45, 0.01, 3]} /><meshBasicMaterial color={borderColor} /></mesh>\r\n      <mesh position={[0, 0, 0.002]} rotation={[Math.PI/2, 0, 0]}><coneGeometry args={[size*0.4, 0.01, 3]} /><meshBasicMaterial color=\"yellow\" /></mesh>\r\n    </group> // Triangle\r\n  ];\r\n  \r\n  const shapeIndex = pieceId;\r\n  return shapes[shapeIndex]();\r\n}\r\n\r\n// Function to create unique shapes for each piece\r\nfunction createShape(pieceId, size) {\r\n  const shapes = [\r\n    // 0-4: Basic geometric shapes (Squares)\r\n    () => <group position={[0, 0, 0.012]}><mesh><planeGeometry args={[size, size]} /><meshBasicMaterial color=\"red\" /></mesh><mesh position={[0, 0, 0.001]}><planeGeometry args={[size*0.95, size*0.95]} /><meshBasicMaterial color=\"black\" /></mesh><mesh position={[0, 0, 0.002]}><planeGeometry args={[size*0.9, size*0.9]} /><meshBasicMaterial color=\"red\" /></mesh></group>, // Square\r\n    () => <group position={[0, 0, 0.012]}><mesh><planeGeometry args={[size, size]} /><meshBasicMaterial color=\"blue\" /></mesh><mesh position={[0, 0, 0.001]}><planeGeometry args={[size*0.95, size*0.95]} /><meshBasicMaterial color=\"black\" /></mesh><mesh position={[0, 0, 0.002]}><planeGeometry args={[size*0.9, size*0.9]} /><meshBasicMaterial color=\"blue\" /></mesh></group>, // Square\r\n    () => <group position={[0, 0, 0.012]}><mesh><planeGeometry args={[size, size]} /><meshBasicMaterial color=\"green\" /></mesh><mesh position={[0, 0, 0.001]}><planeGeometry args={[size*0.95, size*0.95]} /><meshBasicMaterial color=\"black\" /></mesh><mesh position={[0, 0, 0.002]}><planeGeometry args={[size*0.9, size*0.9]} /><meshBasicMaterial color=\"green\" /></mesh></group>, // Square\r\n    () => <group position={[0, 0, 0.012]}><mesh><planeGeometry args={[size, size]} /><meshBasicMaterial color=\"orange\" /></mesh><mesh position={[0, 0, 0.001]}><planeGeometry args={[size*0.95, size*0.95]} /><meshBasicMaterial color=\"black\" /></mesh><mesh position={[0, 0, 0.002]}><planeGeometry args={[size*0.9, size*0.9]} /><meshBasicMaterial color=\"orange\" /></mesh></group>, // Square\r\n    () => <group position={[0, 0, 0.012]}><mesh><planeGeometry args={[size, size]} /><meshBasicMaterial color=\"purple\" /></mesh><mesh position={[0, 0, 0.001]}><planeGeometry args={[size*0.95, size*0.95]} /><meshBasicMaterial color=\"black\" /></mesh><mesh position={[0, 0, 0.002]}><planeGeometry args={[size*0.9, size*0.9]} /><meshBasicMaterial color=\"purple\" /></mesh></group>, // Square\r\n\r\n    // 5-9: Circles\r\n    () => <group position={[0, 0, 0.012]}><mesh><circleGeometry args={[size/2, 32]} /><meshBasicMaterial color=\"red\" /></mesh><mesh position={[0, 0, 0.001]}><circleGeometry args={[size*0.45, 32]} /><meshBasicMaterial color=\"black\" /></mesh><mesh position={[0, 0, 0.002]}><circleGeometry args={[size*0.4, 32]} /><meshBasicMaterial color=\"red\" /></mesh></group>, // Circle\r\n    () => <group position={[0, 0, 0.012]}><mesh><circleGeometry args={[size/2, 32]} /><meshBasicMaterial color=\"blue\" /></mesh><mesh position={[0, 0, 0.001]}><circleGeometry args={[size*0.45, 32]} /><meshBasicMaterial color=\"black\" /></mesh><mesh position={[0, 0, 0.002]}><circleGeometry args={[size*0.4, 32]} /><meshBasicMaterial color=\"blue\" /></mesh></group>, // Circle\r\n    () => <group position={[0, 0, 0.012]}><mesh><circleGeometry args={[size/2, 32]} /><meshBasicMaterial color=\"green\" /></mesh><mesh position={[0, 0, 0.001]}><circleGeometry args={[size*0.45, 32]} /><meshBasicMaterial color=\"black\" /></mesh><mesh position={[0, 0, 0.002]}><circleGeometry args={[size*0.4, 32]} /><meshBasicMaterial color=\"green\" /></mesh></group>, // Circle\r\n    () => <group position={[0, 0, 0.012]}><mesh><circleGeometry args={[size/2, 32]} /><meshBasicMaterial color=\"orange\" /></mesh><mesh position={[0, 0, 0.001]}><circleGeometry args={[size*0.45, 32]} /><meshBasicMaterial color=\"black\" /></mesh><mesh position={[0, 0, 0.002]}><circleGeometry args={[size*0.4, 32]} /><meshBasicMaterial color=\"orange\" /></mesh></group>, // Circle\r\n    () => <group position={[0, 0, 0.012]}><mesh><circleGeometry args={[size/2, 32]} /><meshBasicMaterial color=\"yellow\" /></mesh><mesh position={[0, 0, 0.001]}><circleGeometry args={[size*0.45, 32]} /><meshBasicMaterial color=\"black\" /></mesh><mesh position={[0, 0, 0.002]}><circleGeometry args={[size*0.4, 32]} /><meshBasicMaterial color=\"yellow\" /></mesh></group>, // Circle\r\n\r\n    // 10-14: Triangles (flat cones to create triangle shapes)\r\n    () => <group position={[0, 0, 0.012]}><mesh rotation={[Math.PI/2, 0, 0]}><coneGeometry args={[size/2, 0.01, 3]} /><meshBasicMaterial color=\"cyan\" /></mesh><mesh position={[0, 0, 0.001]} rotation={[Math.PI/2, 0, 0]}><coneGeometry args={[size*0.45, 0.01, 3]} /><meshBasicMaterial color=\"black\" /></mesh><mesh position={[0, 0, 0.002]} rotation={[Math.PI/2, 0, 0]}><coneGeometry args={[size*0.4, 0.01, 3]} /><meshBasicMaterial color=\"cyan\" /></mesh></group>, // Triangle\r\n    () => <group position={[0, 0, 0.012]}><mesh rotation={[Math.PI/2, 0, 0]}><coneGeometry args={[size/2, 0.01, 3]} /><meshBasicMaterial color=\"magenta\" /></mesh><mesh position={[0, 0, 0.001]} rotation={[Math.PI/2, 0, 0]}><coneGeometry args={[size*0.45, 0.01, 3]} /><meshBasicMaterial color=\"black\" /></mesh><mesh position={[0, 0, 0.002]} rotation={[Math.PI/2, 0, 0]}><coneGeometry args={[size*0.4, 0.01, 3]} /><meshBasicMaterial color=\"magenta\" /></mesh></group>, // Triangle\r\n    () => <group position={[0, 0, 0.012]}><mesh rotation={[Math.PI/2, 0, 0]}><coneGeometry args={[size/2, 0.01, 3]} /><meshBasicMaterial color=\"lime\" /></mesh><mesh position={[0, 0, 0.001]} rotation={[Math.PI/2, 0, 0]}><coneGeometry args={[size*0.45, 0.01, 3]} /><meshBasicMaterial color=\"black\" /></mesh><mesh position={[0, 0, 0.002]} rotation={[Math.PI/2, 0, 0]}><coneGeometry args={[size*0.4, 0.01, 3]} /><meshBasicMaterial color=\"lime\" /></mesh></group>, // Triangle\r\n    () => <group position={[0, 0, 0.012]}><mesh rotation={[Math.PI/2, 0, 0]}><coneGeometry args={[size/2, 0.01, 3]} /><meshBasicMaterial color=\"pink\" /></mesh><mesh position={[0, 0, 0.001]} rotation={[Math.PI/2, 0, 0]}><coneGeometry args={[size*0.45, 0.01, 3]} /><meshBasicMaterial color=\"black\" /></mesh><mesh position={[0, 0, 0.002]} rotation={[Math.PI/2, 0, 0]}><coneGeometry args={[size*0.4, 0.01, 3]} /><meshBasicMaterial color=\"pink\" /></mesh></group>, // Triangle\r\n    () => <group position={[0, 0, 0.012]}><mesh rotation={[0, 0, Math.PI/4]}><planeGeometry args={[size, size]} /><meshBasicMaterial color=\"purple\" /></mesh><mesh position={[0, 0, 0.001]} rotation={[0, 0, Math.PI/4]}><planeGeometry args={[size*0.95, size*0.95]} /><meshBasicMaterial color=\"black\" /></mesh><mesh position={[0, 0, 0.002]} rotation={[0, 0, Math.PI/4]}><planeGeometry args={[size*0.9, size*0.9]} /><meshBasicMaterial color=\"purple\" /></mesh></group>, // Diamond\r\n\r\n    // 15-19: Diamonds (rotated squares)\r\n    () => <group position={[0, 0, 0.012]}><mesh rotation={[0, 0, Math.PI/4]}><planeGeometry args={[size, size]} /><meshBasicMaterial color=\"red\" /></mesh><mesh position={[0, 0, 0.001]} rotation={[0, 0, Math.PI/4]}><planeGeometry args={[size*0.95, size*0.95]} /><meshBasicMaterial color=\"black\" /></mesh><mesh position={[0, 0, 0.002]} rotation={[0, 0, Math.PI/4]}><planeGeometry args={[size*0.9, size*0.9]} /><meshBasicMaterial color=\"red\" /></mesh></group>, // Diamond\r\n    () => <group position={[0, 0, 0.012]}><mesh rotation={[0, 0, Math.PI/4]}><planeGeometry args={[size, size]} /><meshBasicMaterial color=\"blue\" /></mesh><mesh position={[0, 0, 0.001]} rotation={[0, 0, Math.PI/4]}><planeGeometry args={[size*0.95, size*0.95]} /><meshBasicMaterial color=\"black\" /></mesh><mesh position={[0, 0, 0.002]} rotation={[0, 0, Math.PI/4]}><planeGeometry args={[size*0.9, size*0.9]} /><meshBasicMaterial color=\"blue\" /></mesh></group>, // Diamond\r\n    () => <group position={[0, 0, 0.012]}><mesh rotation={[0, 0, Math.PI/4]}><planeGeometry args={[size, size]} /><meshBasicMaterial color=\"green\" /></mesh><mesh position={[0, 0, 0.001]} rotation={[0, 0, Math.PI/4]}><planeGeometry args={[size*0.95, size*0.95]} /><meshBasicMaterial color=\"black\" /></mesh><mesh position={[0, 0, 0.002]} rotation={[0, 0, Math.PI/4]}><planeGeometry args={[size*0.9, size*0.9]} /><meshBasicMaterial color=\"green\" /></mesh></group>, // Diamond\r\n    () => <group position={[0, 0, 0.012]}><mesh rotation={[0, 0, Math.PI/4]}><planeGeometry args={[size, size]} /><meshBasicMaterial color=\"orange\" /></mesh><mesh position={[0, 0, 0.001]} rotation={[0, 0, Math.PI/4]}><planeGeometry args={[size*0.95, size*0.95]} /><meshBasicMaterial color=\"black\" /></mesh><mesh position={[0, 0, 0.002]} rotation={[0, 0, Math.PI/4]}><planeGeometry args={[size*0.9, size*0.9]} /><meshBasicMaterial color=\"orange\" /></mesh></group>, // Diamond\r\n    () => <group position={[0, 0, 0.012]}><mesh rotation={[0, 0, Math.PI/4]}><planeGeometry args={[size, size]} /><meshBasicMaterial color=\"purple\" /></mesh><mesh position={[0, 0, 0.001]} rotation={[0, 0, Math.PI/4]}><planeGeometry args={[size*0.95, size*0.95]} /><meshBasicMaterial color=\"black\" /></mesh><mesh position={[0, 0, 0.002]} rotation={[0, 0, Math.PI/4]}><planeGeometry args={[size*0.9, size*0.9]} /><meshBasicMaterial color=\"purple\" /></mesh></group>, // Diamond\r\n\r\n    // 20-25: Triangles (flat cones to create triangle shapes)\r\n    () => <group position={[0, 0, 0.012]}><mesh rotation={[Math.PI/2, 0, 0]}><coneGeometry args={[size/2, 0.01, 3]} /><meshBasicMaterial color=\"cyan\" /></mesh><mesh position={[0, 0, 0.001]} rotation={[Math.PI/2, 0, 0]}><coneGeometry args={[size*0.45, 0.01, 3]} /><meshBasicMaterial color=\"black\" /></mesh><mesh position={[0, 0, 0.002]} rotation={[Math.PI/2, 0, 0]}><coneGeometry args={[size*0.4, 0.01, 3]} /><meshBasicMaterial color=\"cyan\" /></mesh></group>, // Triangle\r\n    () => <group position={[0, 0, 0.012]}><mesh rotation={[Math.PI/2, 0, 0]}><coneGeometry args={[size/2, 0.01, 3]} /><meshBasicMaterial color=\"magenta\" /></mesh><mesh position={[0, 0, 0.001]} rotation={[Math.PI/2, 0, 0]}><coneGeometry args={[size*0.45, 0.01, 3]} /><meshBasicMaterial color=\"black\" /></mesh><mesh position={[0, 0, 0.002]} rotation={[Math.PI/2, 0, 0]}><coneGeometry args={[size*0.4, 0.01, 3]} /><meshBasicMaterial color=\"magenta\" /></mesh></group>, // Triangle\r\n    () => <group position={[0, 0, 0.012]}><mesh rotation={[Math.PI/2, 0, 0]}><coneGeometry args={[size/2, 0.01, 3]} /><meshBasicMaterial color=\"lime\" /></mesh><mesh position={[0, 0, 0.001]} rotation={[Math.PI/2, 0, 0]}><coneGeometry args={[size*0.45, 0.01, 3]} /><meshBasicMaterial color=\"black\" /></mesh><mesh position={[0, 0, 0.002]} rotation={[Math.PI/2, 0, 0]}><coneGeometry args={[size*0.4, 0.01, 3]} /><meshBasicMaterial color=\"lime\" /></mesh></group>, // Triangle\r\n    () => <group position={[0, 0, 0.012]}><mesh rotation={[Math.PI/2, 0, 0]}><coneGeometry args={[size/2, 0.01, 3]} /><meshBasicMaterial color=\"pink\" /></mesh><mesh position={[0, 0, 0.001]} rotation={[Math.PI/2, 0, 0]}><coneGeometry args={[size*0.45, 0.01, 3]} /><meshBasicMaterial color=\"black\" /></mesh><mesh position={[0, 0, 0.002]} rotation={[Math.PI/2, 0, 0]}><coneGeometry args={[size*0.4, 0.01, 3]} /><meshBasicMaterial color=\"pink\" /></mesh></group>, // Triangle\r\n    () => <group position={[0, 0, 0.012]}><mesh rotation={[Math.PI/2, 0, 0]}><coneGeometry args={[size/2, 0.01, 3]} /><meshBasicMaterial color=\"purple\" /></mesh><mesh position={[0, 0, 0.001]} rotation={[Math.PI/2, 0, 0]}><coneGeometry args={[size*0.45, 0.01, 3]} /><meshBasicMaterial color=\"black\" /></mesh><mesh position={[0, 0, 0.002]} rotation={[Math.PI/2, 0, 0]}><coneGeometry args={[size*0.4, 0.01, 3]} /><meshBasicMaterial color=\"purple\" /></mesh></group>, // Triangle\r\n    () => <group position={[0, 0, 0.012]}><mesh rotation={[Math.PI/2, 0, 0]}><coneGeometry args={[size/2, 0.01, 3]} /><meshBasicMaterial color=\"yellow\" /></mesh><mesh position={[0, 0, 0.001]} rotation={[Math.PI/2, 0, 0]}><coneGeometry args={[size*0.45, 0.01, 3]} /><meshBasicMaterial color=\"black\" /></mesh><mesh position={[0, 0, 0.002]} rotation={[Math.PI/2, 0, 0]}><coneGeometry args={[size*0.4, 0.01, 3]} /><meshBasicMaterial color=\"yellow\" /></mesh></group> // Triangle\r\n  ];\r\n  \r\n  const shapeIndex = pieceId; // Changed from pieceId % shapes.length\r\n  return shapes[shapeIndex]();\r\n}\r\n\r\n// Individual cube piece component with smooth rotation\r\nfunction CubePiece({ position, colors, size = 0.95, pieceId = 0, isHighlighted = false, highlightInfo = null, rotatingFace = null, rotationProgress = 0 }) {\r\n  const meshRef = useRef();\r\n  const groupRef = useRef();\r\n  \r\n  // Log piece information for debugging\r\n  React.useEffect(() => {\r\n    const shapeTypes = ['Square', 'Square', 'Square', 'Square', 'Square', 'Circle', 'Circle', 'Circle', 'Circle', 'Circle', 'Triangle', 'Triangle', 'Triangle', 'Triangle', 'Diamond', 'Diamond', 'Diamond', 'Diamond', 'Diamond', 'Diamond', 'Triangle', 'Triangle', 'Triangle', 'Triangle', 'Triangle', 'Triangle'];\r\n    const shapeColors = ['Red', 'Blue', 'Green', 'Orange', 'Purple', 'Red', 'Blue', 'Green', 'Orange', 'Yellow', 'Cyan', 'Magenta', 'Lime', 'Pink', 'Purple', 'Red', 'Blue', 'Green', 'Orange', 'Purple', 'Cyan', 'Magenta', 'Lime', 'Pink', 'Purple', 'Yellow'];\r\n    \r\n    const shapeType = shapeTypes[pieceId] || 'Unknown'; // Changed from pieceId % shapeTypes.length\r\n    const shapeColor = shapeColors[pieceId] || 'Unknown'; // Changed from pieceId % shapeColors.length\r\n    \r\n    // Debug specific pieces only\r\n    if (pieceId === 0 || pieceId === 17 || pieceId === 25 || pieceId === 1 || pieceId === 11) {\r\n      console.log(`🔍 ${shapeColor} ${shapeType} Piece ${pieceId} at position [${position.join(', ')}]`);\r\n      console.log(`  Stored Colors:`, colors);\r\n      \r\n      // Show what colors should be visible based on position\r\n      const [x, y, z] = position;\r\n      const visibleFaces = [];\r\n      if (x === 1) visibleFaces.push('right');\r\n      if (x === -1) visibleFaces.push('left');\r\n      if (y === 1) visibleFaces.push('top');\r\n      if (y === -1) visibleFaces.push('bottom');\r\n      if (z === 1) visibleFaces.push('front');\r\n      if (z === -1) visibleFaces.push('back');\r\n      \r\n      console.log(`  Visible faces:`, visibleFaces);\r\n      console.log(`  Colors on visible faces:`, visibleFaces.map(face => `${face}: ${colors[face]}`));\r\n    }\r\n  }, [pieceId, position, colors]);\r\n\r\n  // Color mapping\r\n  const colorMap = {\r\n    'white': '#FFFFFF',\r\n    'yellow': '#FFD700',\r\n    'red': '#DC143C', // More vibrant red (crimson)\r\n    'orange': '#FF8C00', // More vibrant orange\r\n    'blue': '#0000FF',\r\n    'green': '#00FF00',\r\n    'purple': '#800080',\r\n    'cyan': '#00FFFF',\r\n    'magenta': '#FF00FF',\r\n    'lime': '#00FF00',\r\n    'pink': '#FFC0CB',\r\n    'black': '#000000' // Keep black as black\r\n  };\r\n\r\n  // Create cube geometry\r\n  const cubeGeometry = useMemo(() => new THREE.BoxGeometry(size, size, size), [size]);\r\n  \r\n  // Create face geometry\r\n  const faceGeometry = useMemo(() => {\r\n    const geometry = new THREE.PlaneGeometry(size, size);\r\n    return geometry;\r\n  }, [size]);\r\n\r\n  // Get the color for a face based on the face index - always use original colors\r\n  const getFaceColor = (faceIndex) => {\r\n    // Always use the piece's stored colors - no rotation needed\r\n    switch (faceIndex) {\r\n      case 0: return colors.front;\r\n      case 1: return colors.back;\r\n      case 2: return colors.right;\r\n      case 3: return colors.left;\r\n      case 4: return colors.top;\r\n      case 5: return colors.bottom;\r\n      default: return 'black';\r\n    }\r\n  };\r\n\r\n  // Check if a face should be visible based on the piece's original position\r\n  const isFaceVisible = (faceIndex) => {\r\n    const [x, y, z] = position;\r\n    \r\n    // Determine which faces are visible based on original position\r\n    const visibleFaces = [];\r\n    if (x === 1) visibleFaces.push(2); // Right face visible\r\n    if (x === -1) visibleFaces.push(3); // Left face visible\r\n    if (y === 1) visibleFaces.push(4); // Top face visible\r\n    if (y === -1) visibleFaces.push(5); // Bottom face visible\r\n    if (z === 1) visibleFaces.push(0); // Front face visible\r\n    if (z === -1) visibleFaces.push(1); // Back face visible\r\n    \r\n    return visibleFaces.includes(faceIndex);\r\n  };\r\n\r\n  // Check if this piece is part of the currently rotating face\r\n  const isPartOfRotatingFace = useCallback(() => {\r\n    if (!rotatingFace) return false;\r\n    \r\n    const [x, y, z] = position;\r\n    const { face } = rotatingFace;\r\n    \r\n    switch (face) {\r\n      case 'F': return z === 1;\r\n      case 'B': return z === -1;\r\n      case 'R': return x === 1;\r\n      case 'L': return x === -1;\r\n      case 'U': return y === 1;\r\n      case 'D': return y === -1;\r\n      default: return false;\r\n    }\r\n  }, [position, rotatingFace]);\r\n\r\n  // Calculate group rotation for smooth animation\r\n  const getGroupRotationAngle = () => {\r\n    if (!rotatingFace || !isPartOfRotatingFace()) {\r\n      return { x: 0, y: 0, z: 0 };\r\n    }\r\n\r\n    const { face, direction } = rotatingFace;\r\n    const sign = direction === 'clockwise' ? 1 : -1;\r\n    const angle = (Math.PI / 2) * rotationProgress * sign; // 90 degrees total\r\n\r\n    switch (face) {\r\n      case 'F': return { x: 0, y: 0, z: angle };\r\n      case 'B': return { x: 0, y: 0, z: -angle };\r\n      case 'R': return { x: angle, y: 0, z: 0 };\r\n      case 'L': return { x: -angle, y: 0, z: 0 };\r\n      case 'U': return { x: 0, y: angle, z: 0 };\r\n      case 'D': return { x: 0, y: -angle, z: 0 };\r\n      default: return { x: 0, y: 0, z: 0 };\r\n    }\r\n  };\r\n\r\n  // For group rotation, NO individual position offsets - all pieces stay in their original positions\r\n  // The rotation will be applied to the entire group, not individual pieces\r\n  const getGroupPositionOffset = () => {\r\n    // Return zero offset - pieces should NOT move individually during group rotation\r\n    return { x: 0, y: 0, z: 0 };\r\n  };\r\n\r\n\r\n\r\n  // For group rotation, individual pieces don't need to rotate - the group handles it\r\n  // Just use the original position without any offsets or individual rotations\r\n  const finalPosition = position;\r\n\r\n  return (\r\n    <group \r\n      ref={groupRef}\r\n      position={finalPosition}\r\n      rotation={[0, 0, 0]} // No individual rotation - handled by the group\r\n    >\r\n      {/* Solid cube base */}\r\n      <mesh geometry={cubeGeometry}>\r\n        <meshPhongMaterial \r\n          color={isPartOfRotatingFace() ? \"#666666\" : \"#333333\"}\r\n          emissive={isPartOfRotatingFace() ? \"#444444\" : \"#000000\"}\r\n          emissiveIntensity={isPartOfRotatingFace() ? 0.3 : 0}\r\n        />\r\n      </mesh>\r\n      \r\n      {/* Colored faces - only show visible faces */}\r\n      {[0, 1, 2, 3, 4, 5].map((faceIndex) => {\r\n        // Only render faces that should be visible based on original position\r\n        if (!isFaceVisible(faceIndex)) {\r\n          return null;\r\n        }\r\n\r\n        const faceColor = getFaceColor(faceIndex);\r\n        \r\n        // Define face positions and rotations correctly\r\n        let facePosition, faceRotation;\r\n        \r\n        switch (faceIndex) {\r\n          case 0: // Front face (Z+)\r\n            facePosition = [0, 0, size/2 + 0.001];\r\n            faceRotation = [0, 0, 0];\r\n            break;\r\n          case 1: // Back face (Z-)\r\n            facePosition = [0, 0, -size/2 - 0.001];\r\n            faceRotation = [0, Math.PI, 0];\r\n            break;\r\n          case 2: // Right face (X+)\r\n            facePosition = [size/2 + 0.001, 0, 0];\r\n            faceRotation = [0, Math.PI/2, 0];\r\n            break;\r\n          case 3: // Left face (X-)\r\n            facePosition = [-size/2 - 0.001, 0, 0];\r\n            faceRotation = [0, -Math.PI/2, 0];\r\n            break;\r\n          case 4: // Top face (Y+)\r\n            facePosition = [0, size/2 + 0.001, 0];\r\n            faceRotation = [-Math.PI/2, 0, 0];\r\n            break;\r\n          case 5: // Bottom face (Y-)\r\n            facePosition = [0, -size/2 - 0.001, 0];\r\n            faceRotation = [Math.PI/2, 0, 0];\r\n            break;\r\n          default:\r\n            facePosition = [0, 0, 0];\r\n            faceRotation = [0, 0, 0];\r\n        }\r\n        \r\n        // Check if this face should be highlighted (painted pink)\r\n        const faceNames = ['front', 'back', 'right', 'left', 'top', 'bottom'];\r\n        const currentFaceName = faceNames[faceIndex];\r\n        const shouldHighlight = isHighlighted && highlightInfo && \r\n          highlightInfo.blackVisibleFaces && \r\n          highlightInfo.blackVisibleFaces.includes(currentFaceName);\r\n        \r\n        // If this face should be highlighted, paint it bright pink\r\n        const displayColor = shouldHighlight ? '#FF1493' : (colorMap[faceColor] || '#000000');\r\n        \r\n        return (\r\n          <mesh\r\n            key={faceIndex}\r\n            position={facePosition}\r\n            rotation={faceRotation}\r\n            geometry={faceGeometry}\r\n          >\r\n            <meshPhongMaterial \r\n              color={displayColor} \r\n              side={THREE.FrontSide}\r\n              emissive={isPartOfRotatingFace() ? displayColor : \"#000000\"}\r\n              emissiveIntensity={isPartOfRotatingFace() ? 0.5 : 0.1}\r\n            />\r\n          </mesh>\r\n        );\r\n      })}\r\n      \r\n      {/* Debug shape on visible faces only */}\r\n      {[0, 1, 2, 3, 4, 5].map((faceIndex) => {\r\n        // Only render shapes on faces that should be visible based on original position\r\n        if (!isFaceVisible(faceIndex)) {\r\n          return null;\r\n        }\r\n\r\n        // Define face positions and rotations correctly (same as colored faces)\r\n        let facePosition, faceRotation;\r\n        \r\n        switch (faceIndex) {\r\n          case 0: // Front face (Z+)\r\n            facePosition = [0, 0, size/2 + 0.002];\r\n            faceRotation = [0, 0, 0];\r\n            break;\r\n          case 1: // Back face (Z-)\r\n            facePosition = [0, 0, -size/2 - 0.002];\r\n            faceRotation = [0, Math.PI, 0];\r\n            break;\r\n          case 2: // Right face (X+)\r\n            facePosition = [size/2 + 0.002, 0, 0];\r\n            faceRotation = [0, Math.PI/2, 0];\r\n            break;\r\n          case 3: // Left face (X-)\r\n            facePosition = [-size/2 - 0.002, 0, 0];\r\n            faceRotation = [0, -Math.PI/2, 0];\r\n            break;\r\n          case 4: // Top face (Y+)\r\n            facePosition = [0, size/2 + 0.002, 0];\r\n            faceRotation = [-Math.PI/2, 0, 0];\r\n            break;\r\n          case 5: // Bottom face (Y-)\r\n            facePosition = [0, -size/2 - 0.002, 0];\r\n            faceRotation = [Math.PI/2, 0, 0];\r\n            break;\r\n          default:\r\n            facePosition = [0, 0, 0];\r\n            faceRotation = [0, 0, 0];\r\n        }\r\n        \r\n        // Get the face color for this specific face\r\n        const faceColor = getFaceColor(faceIndex);\r\n        \r\n        return (\r\n          <group key={`shape-${faceIndex}`} position={facePosition} rotation={faceRotation}>\r\n            {createShapeWithFaceBorder(pieceId, size * 0.3, faceIndex)}\r\n          </group>\r\n        );\r\n      })}\r\n    </group>\r\n  );\r\n}\r\n\r\n// Function to get the original solved colors for a piece based on its pieceId\r\nfunction getOriginalColors(pieceId) {\r\n  // Map pieceId to original solved position\r\n  const positions = [];\r\n  for (let x = -1; x <= 1; x++) {\r\n    for (let y = -1; y <= 1; y++) {\r\n      for (let z = -1; z <= 1; z++) {\r\n        if (x === 0 && y === 0 && z === 0) continue;\r\n        positions.push([x, y, z]);\r\n      }\r\n    }\r\n  }\r\n  \r\n  const originalPosition = positions[pieceId];\r\n  const [x, y, z] = originalPosition;\r\n  \r\n  // Assign colors based on original solved position\r\n  // All faces should have proper colors, not black\r\n  let colors = {\r\n    front: 'white',   // Default to white for front\r\n    back: 'yellow',   // Default to yellow for back\r\n    right: 'red',     // Default to red for right\r\n    left: 'orange',   // Default to orange for left\r\n    top: 'blue',      // Default to blue for top\r\n    bottom: 'green'   // Default to green for bottom\r\n  };\r\n  \r\n  // Override with correct colors based on position in solved state\r\n  if (x === -1) colors.left = 'orange';\r\n  if (x === 1) colors.right = 'red';\r\n  if (y === -1) colors.bottom = 'green';\r\n  if (y === 1) colors.top = 'blue';\r\n  if (z === -1) colors.back = 'yellow';\r\n  if (z === 1) colors.front = 'white';\r\n  \r\n  return colors;\r\n}\r\n\r\n// Pure JavaScript global state manager - NO React dependencies\r\nconst CubeStateManager = {\r\n  state: null,\r\n  initialized: false,\r\n  listeners: [],\r\n\r\n  getState() {\r\n    console.log('🔄 CubeStateManager.getState called, initialized:', this.initialized);\r\n    if (!this.initialized) {\r\n      console.log('🔄 CubeStateManager.getState: Not initialized, calling initialize()');\r\n      this.initialize();\r\n    }\r\n    console.log('🔄 CubeStateManager.getState: Returning state with', this.state?.length, 'pieces');\r\n    if (this.state && this.state.length > 0) {\r\n      console.log('🔄 CubeStateManager.getState: First piece colors:', JSON.stringify(this.state[0].colors));\r\n    }\r\n    return this.state;\r\n  },\r\n\r\n  setState(newState) {\r\n    console.log('🔄 CubeStateManager.setState called');\r\n    console.log('Current state colors:', this.state?.map(p => `${p.pieceId}: ${JSON.stringify(p.colors)}`));\r\n    console.log('NewState type:', typeof newState, newState);\r\n    \r\n    if (typeof newState === 'function') {\r\n      console.log('🔄 setState: Using function update');\r\n      this.state = newState(this.state);\r\n    } else {\r\n      console.log('🔄 setState: Using direct assignment');\r\n      this.state = newState;\r\n    }\r\n\r\n    console.log('🔄 CubeStateManager.setState completed');\r\n    console.log('New state colors:', this.state?.map(p => `${p.pieceId}: ${JSON.stringify(p.colors)}`));\r\n\r\n    // Notify all listeners\r\n    console.log('🔄 Notifying', this.listeners.length, 'listeners');\r\n    this.listeners.forEach(listener => listener());\r\n  },\r\n\r\n  subscribe(listener) {\r\n    this.listeners.push(listener);\r\n    return () => {\r\n      this.listeners = this.listeners.filter(l => l !== listener);\r\n    };\r\n  },\r\n\r\n  initialize() {\r\n    console.log('🔄 CubeStateManager: INITIALIZING CUBE STATE - This should only happen once!');\r\n    logToTerminal('🔄 CubeStateManager: INITIALIZING CUBE STATE - This should only happen once!', null, 'INFO');\r\n\r\n    const state = [];\r\n    \r\n    // Create 26 pieces (3x3x3 minus center)\r\n    for (let x = -1; x <= 1; x++) {\r\n      for (let y = -1; y <= 1; y++) {\r\n        for (let z = -1; z <= 1; z++) {\r\n          // Skip the center piece\r\n          if (x === 0 && y === 0 && z === 0) continue;\r\n          \r\n          // Get pieceId based on position in solved state\r\n          const pieceId = state.length;\r\n          \r\n          // Get original colors for this piece\r\n          const colors = getOriginalColors(pieceId);\r\n          \r\n          // Debug logging for initial state\r\n          console.log(`Initial piece ${pieceId} at [${x}, ${y}, ${z}]:`, colors);\r\n          \r\n          state.push({ \r\n            position: [x, y, z], \r\n            colors,\r\n            rotationHistory: [], // Track all rotations this piece has undergone\r\n            pieceId: pieceId // Store the pieceId for reference\r\n          });\r\n        }\r\n      }\r\n    }\r\n    \r\n    // Log the complete initial cube state as JSON\r\n    console.log('🎯 INITIAL CUBE STATE (End of Initial Load):');\r\n    console.log(JSON.stringify(state, null, 2));\r\n    \r\n    // Also log to terminal (this will show in the terminal where npm start is running)\r\n    logToTerminal('🎯 INITIAL CUBE STATE (End of Initial Load)', state, 'INFO');\r\n\r\n    this.state = state;\r\n    this.initialized = true;\r\n  }\r\n};\r\n\r\n// Simple React component that uses the global state manager\r\nfunction CubeStateProvider({ children }) {\r\n  const [forceUpdate, setForceUpdate] = useState(0);\r\n  \r\n  // Subscribe to state changes\r\n  useEffect(() => {\r\n    const unsubscribe = CubeStateManager.subscribe(() => {\r\n      setForceUpdate(prev => prev + 1);\r\n    });\r\n    return unsubscribe;\r\n  }, []);\r\n\r\n  const cubeState = CubeStateManager.getState();\r\n\r\n  // Function to update cube state\r\n  const setCubeState = useCallback((newState) => {\r\n    console.log('🔄 setCubeState called - BEFORE update');\r\n    console.log('Current state colors:', CubeStateManager.getState().map(p => `${p.pieceId}: ${JSON.stringify(p.colors)}`));\r\n    \r\n    CubeStateManager.setState(newState);\r\n    \r\n    console.log('🔄 setCubeState called - AFTER update');\r\n    console.log('New state colors:', CubeStateManager.getState().map(p => `${p.pieceId}: ${JSON.stringify(p.colors)}`));\r\n  }, []);\r\n\r\n  const [isAnimating, setIsAnimating] = useState(false);\r\n  const [rotatingFace, setRotatingFace] = useState(null);\r\n  const [rotationProgress, setRotationProgress] = useState(0);\r\n  const [moveHistory, setMoveHistory] = useState([]); // Simple move history for solve\r\n  const [hasRotated, setHasRotated] = useState(false); // Track if any rotations have occurred\r\n\r\n  // Debug cube state changes\r\n  React.useEffect(() => {\r\n    console.log('🔄 CUBE STATE CHANGED:', cubeState.map(p => `${p.pieceId}: [${p.position.join(', ')}] colors: ${JSON.stringify(p.colors)}`));\r\n    \r\n    // Log to terminal: cube state changes\r\n    logToTerminal(`🎯 useCubeState useEffect triggered`, null, 'INFO');\r\n    logToTerminal(`🔄 CUBE STATE CHANGED`, cubeState.map(p => `${p.pieceId}: [${p.position.join(', ')}] colors: ${JSON.stringify(p.colors)}`), 'INFO');\r\n    \r\n    // Temporarily disabled color reset detection to debug visual issue\r\n    // Only check for color resets if rotations have occurred (not during initial load)\r\n    if (false && hasRotated) {\r\n      const hasOriginalColors = cubeState.every((piece, index) => {\r\n        const originalColors = getOriginalColors(index);\r\n        return JSON.stringify(piece.colors) === JSON.stringify(originalColors);\r\n      });\r\n\r\n      if (hasOriginalColors && cubeState.length > 0) {\r\n        logToTerminal('🚨 COLOR RESET DETECTED: All pieces have original colors!', null, 'ERROR');\r\n        logToTerminal('🚨 This indicates the cube state was reinitialized!', null, 'ERROR');\r\n      }\r\n    }\r\n  }, [cubeState, hasRotated]);\r\n\r\n  // Consolidated rotation logic\r\n  const applyRotation = useCallback((pieces, face, direction) => {\r\n    logRotationStep('A', face, direction, 'applyRotation called');\r\n    logRotationStep('B', face, direction, 'Input pieces colors', pieces.map(p => `${p.pieceId}: ${JSON.stringify(p.colors)}`));\r\n    \r\n    // Filter pieces that are part of the rotating face\r\n    const rotatingPieces = pieces.filter(piece => {\r\n      const [x, y, z] = piece.position;\r\n      switch (face) {\r\n        case 'F': return z === 1; // Front face\r\n        case 'B': return z === -1; // Back face\r\n        case 'R': return x === 1; // Right face\r\n        case 'L': return x === -1; // Left face\r\n        case 'U': return y === 1; // Up face\r\n        case 'D': return y === -1; // Down face\r\n        default: return false;\r\n      }\r\n    });\r\n    \r\n    console.log(`🎯 Found ${rotatingPieces.length} pieces on ${face} face`);\r\n    logRotationStep('B1', face, direction, `Found ${rotatingPieces.length} pieces on face`, rotatingPieces.map(p => `${p.pieceId}: [${p.position.join(', ')}]`));\r\n    \r\n    rotatingPieces.forEach(piece => {\r\n      const [x, y, z] = piece.position;\r\n      let newX = x, newY = y, newZ = z;\r\n      \r\n      // Apply 3D transformation based on face\r\n      switch (face) {\r\n        case 'F': // Front face rotation (Z+ plane)\r\n          if (direction === 'clockwise') {\r\n            newX = -y;\r\n            newY = x;\r\n          } else {\r\n            newX = y;\r\n            newY = -x;\r\n          }\r\n          break;\r\n        case 'B': // Back face rotation (Z- plane)\r\n          if (direction === 'clockwise') {\r\n            newX = y;\r\n            newY = -x;\r\n          } else {\r\n            newX = -y;\r\n            newY = x;\r\n          }\r\n          break;\r\n        case 'R': // Right face rotation (X+ plane)\r\n          if (direction === 'clockwise') {\r\n            newY = -z;\r\n            newZ = y;\r\n          } else {\r\n            newY = z;\r\n            newZ = -y;\r\n          }\r\n          break;\r\n        case 'L': // Left face rotation (X- plane)\r\n          if (direction === 'clockwise') {\r\n            newY = z;\r\n            newZ = -y;\r\n          } else {\r\n            newY = -z;\r\n            newZ = y;\r\n          }\r\n          break;\r\n        case 'U': // Up face rotation (Y+ plane)\r\n          if (direction === 'clockwise') {\r\n            newX = z;\r\n            newZ = -x;\r\n          } else {\r\n            newX = -z;\r\n            newZ = x;\r\n          }\r\n          break;\r\n        case 'D': // Down face rotation (Y- plane)\r\n          if (direction === 'clockwise') {\r\n            newX = -z;\r\n            newZ = x;\r\n          } else {\r\n            newX = z;\r\n            newZ = -x;\r\n          }\r\n          break;\r\n      }\r\n      \r\n      console.log(`🔄 Piece ${piece.pieceId} moving from [${x}, ${y}, ${z}] to [${newX}, ${newY}, ${newZ}]`);\r\n      \r\n      // Update position\r\n      piece.position = [newX, newY, newZ];\r\n      \r\n      // Rotate colors to match new orientation\r\n      const newColors = { ...piece.colors };\r\n      switch (face) {\r\n        case 'F': // Front face rotation (Z+ plane)\r\n          if (direction === 'clockwise') {\r\n            const temp = newColors.top;\r\n            newColors.top = newColors.left;\r\n            newColors.left = newColors.bottom;\r\n            newColors.bottom = newColors.right;\r\n            newColors.right = temp;\r\n          } else {\r\n            const temp = newColors.top;\r\n            newColors.top = newColors.right;\r\n            newColors.right = newColors.bottom;\r\n            newColors.bottom = newColors.left;\r\n            newColors.left = temp;\r\n          }\r\n          break;\r\n        case 'B': // Back face rotation (Z- plane)\r\n          if (direction === 'clockwise') {\r\n            const temp = newColors.top;\r\n            newColors.top = newColors.right;\r\n            newColors.right = newColors.bottom;\r\n            newColors.bottom = newColors.left;\r\n            newColors.left = temp;\r\n          } else {\r\n            const temp = newColors.top;\r\n            newColors.top = newColors.left;\r\n            newColors.left = newColors.bottom;\r\n            newColors.bottom = newColors.right;\r\n            newColors.right = temp;\r\n          }\r\n          break;\r\n        case 'R': // Right face rotation (X+ plane)\r\n          if (direction === 'clockwise') {\r\n            const temp = newColors.top;\r\n            newColors.top = newColors.back;\r\n            newColors.back = newColors.bottom;\r\n            newColors.bottom = newColors.front;\r\n            newColors.front = temp;\r\n          } else {\r\n            const temp = newColors.top;\r\n            newColors.top = newColors.front;\r\n            newColors.front = newColors.bottom;\r\n            newColors.bottom = newColors.back;\r\n            newColors.back = temp;\r\n          }\r\n          break;\r\n        case 'L': // Left face rotation (X- plane)\r\n          if (direction === 'clockwise') {\r\n            const temp = newColors.top;\r\n            newColors.top = newColors.front;\r\n            newColors.front = newColors.bottom;\r\n            newColors.bottom = newColors.back;\r\n            newColors.back = temp;\r\n          } else {\r\n            const temp = newColors.top;\r\n            newColors.top = newColors.back;\r\n            newColors.back = newColors.bottom;\r\n            newColors.bottom = newColors.front;\r\n            newColors.front = temp;\r\n          }\r\n          break;\r\n        case 'U': // Up face rotation (Y+ plane)\r\n          if (direction === 'clockwise') {\r\n            const temp = newColors.front;\r\n            newColors.front = newColors.right;\r\n            newColors.right = newColors.back;\r\n            newColors.back = newColors.left;\r\n            newColors.left = temp;\r\n          } else {\r\n            const temp = newColors.front;\r\n            newColors.front = newColors.left;\r\n            newColors.left = newColors.back;\r\n            newColors.back = newColors.right;\r\n            newColors.right = temp;\r\n          }\r\n          break;\r\n        case 'D': // Down face rotation (Y- plane)\r\n          if (direction === 'clockwise') {\r\n            const temp = newColors.front;\r\n            newColors.front = newColors.left;\r\n            newColors.left = newColors.back;\r\n            newColors.back = newColors.right;\r\n            newColors.right = temp;\r\n          } else {\r\n            const temp = newColors.front;\r\n            newColors.front = newColors.right;\r\n            newColors.right = newColors.back;\r\n            newColors.back = newColors.left;\r\n            newColors.left = temp;\r\n          }\r\n          break;\r\n      }\r\n      piece.colors = newColors;\r\n      \r\n      // Add to rotation history\r\n      piece.rotationHistory.push({\r\n        move: face,\r\n        direction: direction,\r\n        fromPosition: [x, y, z],\r\n        toPosition: [newX, newY, newZ],\r\n        timestamp: new Date().toISOString()\r\n      });\r\n    });\r\n    \r\n    logRotationStep('C', face, direction, 'Output pieces colors', pieces.map(p => `${p.pieceId}: ${JSON.stringify(p.colors)}`));\r\n    logRotationStep('D', face, direction, 'applyRotation completed');\r\n  }, []);\r\n\r\n  // Function to rotate a face with smooth 3D animation\r\n  const rotateFaceWithAnimation = useCallback((face, direction, onComplete) => {\r\n    console.log(`🎯 Rotating face ${face} ${direction} with smooth animation`);\r\n    \r\n    // Log rotation start to terminal\r\n    logRotationStep('3', face, direction, 'rotateFaceWithAnimation called');\r\n    logRotationStep('4', face, direction, 'ROTATION STARTED');\r\n    \r\n    // Record the move for solve (same as manual rotation)\r\n    setMoveHistory(prev => {\r\n      const newHistory = [...prev, { face, direction, timestamp: Date.now() }];\r\n      console.log(`📝 RECORDED MOVE: ${face} ${direction} (Total moves: ${newHistory.length})`);\r\n      return newHistory;\r\n    });\r\n    \r\n    // Set the rotating face for visual feedback\r\n    setRotatingFace({ face, direction });\r\n    setRotationProgress(0);\r\n    \r\n    // Smooth animation using requestAnimationFrame\r\n    const animationDuration = 500; // 500ms for smooth rotation\r\n    const startTime = performance.now();\r\n    \r\n    const animate = (currentTime) => {\r\n      const elapsed = currentTime - startTime;\r\n      const progress = Math.min(elapsed / animationDuration, 1);\r\n      \r\n      // Ease out animation for smoother feel\r\n      const easedProgress = 1 - Math.pow(1 - progress, 3);\r\n      setRotationProgress(easedProgress);\r\n      \r\n      if (progress < 1) {\r\n        requestAnimationFrame(animate);\r\n            } else {\r\n        // Animation complete - apply the actual position changes\r\n        logRotationStep('5', face, direction, 'setCubeState called');\r\n        setCubeState(prevState => {\r\n          console.log(`🔄 Applying position changes for ${face} ${direction}`);\r\n          console.log('Previous state colors:', prevState.map(p => `${p.pieceId}: ${JSON.stringify(p.colors)}`));\r\n          \r\n          // Log to terminal: rotation completion and state update\r\n          logRotationStep('6', face, direction, 'ROTATION COMPLETED');\r\n          logRotationStep('7', face, direction, 'BEFORE STATE UPDATE - Colors', prevState.map(p => `${p.pieceId}: ${JSON.stringify(p.colors)}`));\r\n          \r\n          const newState = [...prevState];\r\n          const pieces = newState.map((piece, index) => ({ ...piece, pieceId: index }));\r\n          \r\n          // Log positions before rotation\r\n          console.log('📍 Positions before rotation:', pieces.map(p => `${p.pieceId}: [${p.position.join(', ')}]`));\r\n          logToTerminal(`📍 BEFORE ROTATION - Positions:`, pieces.map(p => `${p.pieceId}: [${p.position.join(', ')}]`), 'INFO');\r\n          \r\n          // Apply rotation using consolidated logic\r\n          logRotationStep('8', face, direction, 'Calling applyRotation');\r\n          applyRotation(pieces, face, direction);\r\n\r\n          // Log positions after rotation\r\n          console.log('📍 Positions after rotation:', pieces.map(p => `${p.pieceId}: [${p.position.join(', ')}]`));\r\n          logRotationStep('9', face, direction, 'AFTER ROTATION - Positions', pieces.map(p => `${p.pieceId}: [${p.position.join(', ')}]`));\r\n\r\n          // Update the newState with the modified pieces\r\n          pieces.forEach((piece, index) => {\r\n            newState[index] = {\r\n              pieceId: piece.pieceId, // Keep the pieceId\r\n              position: piece.position,\r\n              colors: piece.colors,\r\n              rotationHistory: piece.rotationHistory\r\n            };\r\n          });\r\n          \r\n          console.log('✅ Position changes applied to cube state');\r\n          console.log('New state colors:', newState.map(p => `${p.pieceId}: ${JSON.stringify(p.colors)}`));\r\n          \r\n          // Log to terminal: final state after update\r\n          logRotationStep('10', face, direction, 'AFTER STATE UPDATE - Colors', newState.map(p => `${p.pieceId}: ${JSON.stringify(p.colors)}`));\r\n          \r\n          return newState;\r\n        });\r\n        \r\n        // Reset animation state\r\n        setRotatingFace(null);\r\n        setRotationProgress(0);\r\n        if (onComplete) onComplete();\r\n      }\r\n    };\r\n    \r\n    requestAnimationFrame(animate);\r\n  }, [applyRotation, setCubeState]);\r\n\r\n  // Function to execute moves with realistic face rotation animations\r\n  const executeMovesWithAnimation = useCallback((moves, onComplete) => {\r\n    let currentMoveIndex = 0;\r\n    \r\n    const executeNextMove = () => {\r\n      if (currentMoveIndex >= moves.length) {\r\n        if (onComplete) onComplete();\r\n        return;\r\n      }\r\n      \r\n      const move = moves[currentMoveIndex];\r\n      console.log(`🔄 Executing move ${currentMoveIndex + 1}/${moves.length}: ${move.face} ${move.direction}`);\r\n      \r\n      // Execute the move with realistic face rotation\r\n      rotateFaceWithAnimation(move.face, move.direction, () => {\r\n        currentMoveIndex++;\r\n        // Small delay between moves for visual clarity\r\n        setTimeout(executeNextMove, 25);\r\n      });\r\n    };\r\n    \r\n    executeNextMove();\r\n  }, [rotateFaceWithAnimation]);\r\n\r\n  // Generate optimal solve sequence using beginner's method\r\n  const generateOptimalSolve = useCallback((currentState) => {\r\n    // This is a simplified version - in reality, you'd use proper algorithms like CFOP\r\n    // For now, we'll use the reverse of all moves, but optimize the sequence\r\n    \r\n    const allMoves = [];\r\n    currentState.forEach(piece => {\r\n      piece.rotationHistory.forEach(move => {\r\n        allMoves.push({\r\n          face: move.move,\r\n          direction: move.direction,\r\n          timestamp: move.timestamp\r\n        });\r\n      });\r\n    });\r\n    \r\n    console.log(`🔍 DEBUG: Found ${allMoves.length} moves in rotation history`);\r\n    \r\n    // Sort moves by timestamp\r\n    allMoves.sort((a, b) => new Date(a.timestamp) - new Date(b.timestamp));\r\n    \r\n    console.log('🔍 DEBUG: Original moves:', allMoves.map(m => `${m.face} ${m.direction}`));\r\n    \r\n    // Reverse the moves and optimize\r\n    const reversedMoves = allMoves.reverse().map(move => ({\r\n      face: move.face,\r\n      direction: move.direction === 'clockwise' ? 'counterclockwise' : 'clockwise'\r\n    }));\r\n    \r\n    console.log('🔍 DEBUG: Reversed moves:', reversedMoves.map(m => `${m.face} ${m.direction}`));\r\n    \r\n    // Optimize the sequence by removing redundant moves\r\n    const optimizedMoves = optimizeMoveSequence(reversedMoves);\r\n    \r\n    console.log(`🔍 DEBUG: Optimized moves: ${optimizedMoves.length}`, optimizedMoves.map(m => `${m.face} ${m.direction}`));\r\n    \r\n    return optimizedMoves;\r\n  }, []);\r\n\r\n  // Optimize move sequence by removing redundant moves\r\n  const optimizeMoveSequence = useCallback((moves) => {\r\n    // For now, don't optimize too aggressively to ensure we don't break the solve\r\n    // Just return the original moves to ensure the cube gets solved\r\n    return moves;\r\n  }, []);\r\n\r\n  // Rotate a face of the cube with smooth animation\r\n  const rotateFace = useCallback((face, direction) => {\r\n    console.log(`🔥🔥🔥 ROTATE FACE CALLED: ${face} ${direction} 🔥🔥🔥`);\r\n    logRotationStep('1', face, direction, 'rotateFace called');\r\n    logToTerminal('🚀 TEST LOG: rotateFace function called', { face, direction }, 'SUCCESS');\r\n    logToTerminal('🎯 DEBUG: About to start rotation animation', { face, direction, isAnimating }, 'INFO');\r\n    \r\n    // Also log to browser console for easier visibility\r\n    console.log('🚀🚀🚀 ROTATION STARTED - Browser Console Log 🚀🚀🚀');\r\n    console.log('Face:', face, 'Direction:', direction);\r\n    console.log('Current cube state colors:', cubeState.map(p => `${p.pieceId}: ${JSON.stringify(p.colors)}`));\r\n    \r\n    if (isAnimating) {\r\n      logToTerminal(`⚠️ rotateFace: Already animating, skipping`, null, 'WARNING');\r\n      return;\r\n    }\r\n    \r\n    logRotationStep('2', face, direction, 'Starting rotation');\r\n    setHasRotated(true); // Mark that rotations have occurred\r\n    setIsAnimating(true);\r\n    \r\n    // Use the smooth animation function\r\n    rotateFaceWithAnimation(face, direction, () => {\r\n      logToTerminal(`✅ rotateFace: Animation completed`, null, 'SUCCESS');\r\n      \r\n      // Log final colors to browser console\r\n      console.log('🎯🎯🎯 ROTATION COMPLETED - Browser Console Log 🎯🎯🎯');\r\n      console.log('Final cube state colors:', cubeState.map(p => `${p.pieceId}: ${JSON.stringify(p.colors)}`));\r\n      \r\n      setIsAnimating(false);\r\n    });\r\n  }, [isAnimating, rotateFaceWithAnimation, cubeState]);\r\n\r\n  // Scramble the cube with realistic face rotations\r\n  const scramble = useCallback(() => {\r\n    if (isAnimating) return;\r\n    \r\n    setHasRotated(true); // Mark that rotations have occurred\r\n    setIsAnimating(true);\r\n    \r\n    // DON'T clear move history - keep all previous moves (manual + scramble)\r\n    console.log(`🎲 SCRAMBLING CUBE - Current move history: ${moveHistory.length} moves`);\r\n    \r\n    const moves = ['F', 'B', 'R', 'L', 'U', 'D'];\r\n    const directions = ['clockwise', 'counterclockwise'];\r\n    const scrambleSequence = [];\r\n    \r\n    // Generate 20 random moves\r\n    for (let i = 0; i < 20; i++) {\r\n      const move = moves[Math.floor(Math.random() * moves.length)];\r\n      const direction = directions[Math.floor(Math.random() * directions.length)];\r\n      scrambleSequence.push({ face: move, direction });\r\n    }\r\n    \r\n    console.log('🎲 SCRAMBLING CUBE with sequence:', scrambleSequence.map(m => `${m.face} ${m.direction}`));\r\n    \r\n    // Execute scramble moves with realistic animations\r\n    executeMovesWithAnimation(scrambleSequence, () => {\r\n      setIsAnimating(false);\r\n      console.log('✅ CUBE SCRAMBLED!');\r\n      \r\n      // Log final state\r\n      setCubeState(currentState => {\r\n        console.log('🎯 CUBE STATE AFTER SCRAMBLE:');\r\n        console.log(JSON.stringify(currentState, null, 2));\r\n        logToTerminal('CUBE STATE AFTER SCRAMBLE', currentState);\r\n        return currentState;\r\n      });\r\n    });\r\n  }, [isAnimating, executeMovesWithAnimation, moveHistory, setCubeState]);\r\n\r\n  // Reset the cube to solved state\r\n  const reset = useCallback(() => {\r\n    // Clear move history when resetting\r\n    setMoveHistory([]);\r\n    setHasRotated(false); // Reset the rotation flag since we're going back to original state\r\n    \r\n    setCubeState(() => {\r\n      const state = [];\r\n      \r\n      // Create 26 pieces (3x3x3 minus center)\r\n      for (let x = -1; x <= 1; x++) {\r\n        for (let y = -1; y <= 1; y++) {\r\n          for (let z = -1; z <= 1; z++) {\r\n            // Skip the center piece\r\n            if (x === 0 && y === 0 && z === 0) continue;\r\n            \r\n            // Get pieceId based on position in solved state\r\n            const pieceId = state.length;\r\n            \r\n            // Get original colors for this piece\r\n            const colors = getOriginalColors(pieceId);\r\n            \r\n            // Debug logging for initial state\r\n            console.log(`Initial piece ${pieceId} at [${x}, ${y}, ${z}]:`, colors);\r\n            \r\n            state.push({ \r\n              position: [x, y, z], \r\n              colors,\r\n              rotationHistory: [], // Track all rotations this piece has undergone\r\n              pieceId: pieceId // Store the pieceId for reference\r\n            });\r\n          }\r\n        }\r\n      }\r\n      \r\n      // Log the complete initial cube state as JSON\r\n      console.log('🎯 INITIAL CUBE STATE (End of Initial Load):');\r\n      console.log(JSON.stringify(state, null, 2));\r\n      \r\n      // Also log to terminal (this will show in the terminal where npm start is running)\r\n      logToTerminal('INITIAL CUBE STATE (End of Initial Load)', state);\r\n      \r\n      return state;\r\n    });\r\n  }, [setCubeState]);\r\n\r\n  // Simple solve function that reverses all recorded moves\r\n  const solve = useCallback(() => {\r\n    if (isAnimating) return;\r\n    \r\n    setIsAnimating(true);\r\n    \r\n    console.log(`🎯 SOLVING CUBE: Reversing ${moveHistory.length} moves`);\r\n    console.log('📋 Move history:', moveHistory.map(m => `${m.face} ${m.direction}`));\r\n    console.log('📋 Full move history object:', moveHistory);\r\n    \r\n    if (moveHistory.length === 0) {\r\n      console.log('⚠️ No moves to reverse - cube might already be solved or no moves were recorded');\r\n      setIsAnimating(false);\r\n      return;\r\n    }\r\n    \r\n    // Create reverse sequence (last move first, opposite direction)\r\n    const solveSequence = moveHistory\r\n      .slice()\r\n      .reverse()\r\n      .map(move => ({\r\n        face: move.face,\r\n        direction: move.direction === 'clockwise' ? 'counterclockwise' : 'clockwise'\r\n      }));\r\n    \r\n    console.log('🔄 Reversed sequence:', solveSequence.map(m => `${m.face} ${m.direction}`));\r\n    console.log(`🚀 Starting solve with ${solveSequence.length} moves...`);\r\n    \r\n    // Execute moves with realistic face rotations\r\n    executeMovesWithAnimation(solveSequence, () => {\r\n      // Clear move history after solving\r\n      setMoveHistory([]);\r\n      setIsAnimating(false);\r\n      console.log('✅ CUBE SOLVED!');\r\n    });\r\n    \r\n  }, [isAnimating, moveHistory, executeMovesWithAnimation]);\r\n\r\n\r\n  // Debug: Log the state being passed to children\r\n  console.log('🔄 CubeStateProvider: Passing state to children, cubeState length:', cubeState.length);\r\n  if (cubeState.length > 0) {\r\n    console.log('🔄 CubeStateProvider: First piece being passed:', cubeState[0].pieceId, JSON.stringify(cubeState[0].colors));\r\n  }\r\n\r\n  return children({\r\n    cubeState,\r\n    isAnimating,\r\n    rotatingFace,\r\n    rotationProgress,\r\n    rotateFace,\r\n    scramble,\r\n    reset,\r\n    solve\r\n  });\r\n}\r\n\r\n// Main cube group component with enhanced structure\r\nfunction CubeGroup({ cubeState, isAnimating, rotatingFace, rotationProgress, rotateFace, scramble, reset, solve, isRotating, autoRotate = false, onScramble, onReset, onSolve, onRotateFace, onCubeStateChange, highlightedPieces = [] }) {\r\n  const groupRef = useRef();\r\n  const [rotationSpeed] = useState({ x: 0.005, y: 0.01 });\r\n  \r\n  // Set up refs for parent component\r\n  React.useEffect(() => {\r\n    console.log('🎯 CubeGroup: Setting up refs');\r\n    if (onRotateFace) {\r\n      console.log('🎯 CubeGroup: Setting rotateFace ref');\r\n      onRotateFace(rotateFace);\r\n    }\r\n    if (onScramble) {\r\n      console.log('🎯 CubeGroup: Setting scramble ref');\r\n      onScramble(scramble);\r\n    }\r\n    if (onReset) {\r\n      console.log('🎯 CubeGroup: Setting reset ref');\r\n      onReset(reset);\r\n    }\r\n    if (onSolve) {\r\n      console.log('🎯 CubeGroup: Setting solve ref');\r\n      onSolve(solve);\r\n    }\r\n  }, [rotateFace, scramble, reset, solve, onRotateFace, onScramble, onReset, onSolve]);\r\n\r\n  // Auto-trigger rotation removed\r\n  \r\n  // Removed excessive re-render logging\r\n  \r\n  // Helper functions for enhanced debugging\r\n  const getShapeType = (pieceId) => {\r\n    const shapeTypes = ['Square', 'Square', 'Square', 'Square', 'Square', 'Circle', 'Circle', 'Circle', 'Circle', 'Circle', 'Triangle', 'Triangle', 'Triangle', 'Triangle', 'Diamond', 'Diamond', 'Diamond', 'Diamond', 'Diamond', 'Diamond', 'Triangle', 'Triangle', 'Triangle', 'Triangle', 'Triangle', 'Triangle'];\r\n    return shapeTypes[pieceId] || 'Unknown';\r\n  };\r\n\r\n  const getShapeColor = (pieceId) => {\r\n    const shapeColors = ['Red', 'Red', 'Red', 'Red', 'Red', 'Blue', 'Blue', 'Blue', 'Blue', 'Blue', 'Green', 'Green', 'Green', 'Green', 'Yellow', 'Yellow', 'Yellow', 'Yellow', 'Yellow', 'Yellow', 'Orange', 'Orange', 'Orange', 'Orange', 'Orange', 'Orange'];\r\n    return shapeColors[pieceId] || 'Unknown';\r\n  };\r\n\r\n  // Auto-rotation effect\r\n  useEffect(() => {\r\n    let animationId;\r\n    \r\n    if (autoRotate && groupRef.current) {\r\n      const animate = () => {\r\n        if (groupRef.current) {\r\n          groupRef.current.rotation.x += rotationSpeed.x;\r\n          groupRef.current.rotation.y += rotationSpeed.y;\r\n          animationId = requestAnimationFrame(animate);\r\n        }\r\n      };\r\n      animate();\r\n    }\r\n    \r\n    return () => {\r\n      if (animationId) {\r\n        cancelAnimationFrame(animationId);\r\n      }\r\n    };\r\n  }, [autoRotate, rotationSpeed]);\r\n\r\n  // Manual rotation effect\r\n  useEffect(() => {\r\n    if (isRotating && groupRef.current) {\r\n      groupRef.current.rotation.x += 0.01;\r\n      groupRef.current.rotation.y += 0.01;\r\n    }\r\n  }, [isRotating]);\r\n\r\n  // Helper function to determine if a piece is part of the rotating face\r\n  const isPartOfRotatingFace = useCallback((piece, rotatingFace) => {\r\n    if (!rotatingFace) return false;\r\n    \r\n    const [x, y, z] = piece.position;\r\n    const { face } = rotatingFace;\r\n    \r\n    switch (face) {\r\n      case 'R': return x === 1;\r\n      case 'L': return x === -1;\r\n      case 'U': return y === 1;\r\n      case 'D': return y === -1;\r\n      case 'F': return z === 1;\r\n      case 'B': return z === -1;\r\n      default: return false;\r\n    }\r\n  }, []);\r\n\r\n  // Helper function to get rotation angle for a piece\r\n  const getRotationAngle = useCallback((piece, rotatingFace, rotationProgress) => {\r\n    if (!rotatingFace || !isPartOfRotatingFace(piece, rotatingFace)) {\r\n      return { x: 0, y: 0, z: 0 };\r\n    }\r\n\r\n    const { face, direction } = rotatingFace;\r\n    const sign = direction === 'clockwise' ? 1 : -1;\r\n    const angle = (Math.PI / 2) * rotationProgress * sign; // 90 degrees total\r\n\r\n    switch (face) {\r\n      case 'F': return { x: 0, y: 0, z: angle };\r\n      case 'B': return { x: 0, y: 0, z: -angle };\r\n      case 'R': return { x: angle, y: 0, z: 0 };\r\n      case 'L': return { x: -angle, y: 0, z: 0 };\r\n      case 'U': return { x: 0, y: angle, z: 0 };\r\n      case 'D': return { x: 0, y: -angle, z: 0 };\r\n      default: return { x: 0, y: 0, z: 0 };\r\n    }\r\n  }, [isPartOfRotatingFace]);\r\n\r\n\r\n\r\n  // Group rotation: Create separate groups for rotating and non-rotating pieces\r\n  const rotatingPieces = [];\r\n  const nonRotatingPieces = [];\r\n  \r\n  cubeState.forEach((piece, index) => {\r\n    const pieceId = piece.pieceId || index;\r\n    const isHighlighted = highlightedPieces.includes(pieceId);\r\n    const highlightInfo = isHighlighted ? {\r\n      shapeType: getShapeType(pieceId),\r\n      shapeColor: getShapeColor(pieceId),\r\n      pieceId: pieceId\r\n    } : null;\r\n\r\n    const cubePiece = (\r\n      <CubePiece\r\n        key={`piece-${pieceId}`}\r\n        position={piece.position}\r\n        colors={piece.colors}\r\n        pieceId={pieceId}\r\n        isHighlighted={isHighlighted}\r\n        highlightInfo={highlightInfo}\r\n        rotatingFace={rotatingFace}\r\n        rotationProgress={rotationProgress}\r\n      />\r\n    );\r\n\r\n    // Check if this piece is part of the rotating face\r\n    if (rotatingFace && isPartOfRotatingFace(piece, rotatingFace)) {\r\n      rotatingPieces.push(cubePiece);\r\n    } else {\r\n      nonRotatingPieces.push(cubePiece);\r\n    }\r\n  });\r\n\r\n  // Get rotation angle for the rotating group\r\n  const groupRotationAngle = rotatingFace ? getRotationAngle(cubeState[0], rotatingFace, rotationProgress) : { x: 0, y: 0, z: 0 };\r\n\r\n  return (\r\n    <group ref={groupRef}>\r\n      {/* Non-rotating pieces */}\r\n      {nonRotatingPieces}\r\n      \r\n      {/* Rotating pieces group - apply rotation to the entire group */}\r\n      {rotatingPieces.length > 0 && (\r\n        <group rotation={[groupRotationAngle.x, groupRotationAngle.y, groupRotationAngle.z]}>\r\n          {rotatingPieces}\r\n        </group>\r\n      )}\r\n    </group>\r\n  );\r\n}\r\n\r\n// Main Rubik's Cube component\r\nfunction RubiksCube({ isRotating, autoRotate = false, onScramble, onReset, onSolve, onRotateFace, onCubeStateChange, highlightedPieces = [] }) {\r\n  return (\r\n    <Canvas\r\n      camera={{ position: [5, 5, 5], fov: 50 }}\r\n      style={{ background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)' }}\r\n    >\r\n      <ambientLight intensity={0.6} />\r\n      <directionalLight position={[10, 10, 5]} intensity={1} />\r\n      <pointLight position={[-10, -10, -5]} intensity={0.5} />\r\n      \r\n      <CubeStateProvider>\r\n        {({ cubeState, isAnimating, rotatingFace, rotationProgress, rotateFace, scramble, reset, solve }) => (\r\n          <CubeGroup\r\n            cubeState={cubeState}\r\n            isAnimating={isAnimating}\r\n            rotatingFace={rotatingFace}\r\n            rotationProgress={rotationProgress}\r\n            rotateFace={rotateFace}\r\n            scramble={scramble}\r\n            reset={reset}\r\n            solve={solve}\r\n            isRotating={isRotating}\r\n            autoRotate={autoRotate}\r\n            onScramble={onScramble}\r\n            onReset={onReset}\r\n            onSolve={onSolve}\r\n            onRotateFace={onRotateFace}\r\n            onCubeStateChange={onCubeStateChange}\r\n            highlightedPieces={highlightedPieces}\r\n          />\r\n        )}\r\n      </CubeStateProvider>\r\n    </Canvas>\r\n  );\r\n}\r\n\r\nexport default RubiksCube;\r\n"],"mappings":";;;;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,MAAM,EAAEC,OAAO,EAAEC,WAAW,EAAEC,SAAS,QAAQ,OAAO;AAChF,SAASC,MAAM,EAAEC,QAAQ,QAAQ,oBAAoB;AACrD,SAASC,aAAa,EAAEC,WAAW,QAAQ,mBAAmB;AAC9D,OAAO,KAAKC,KAAK,MAAM,OAAO;;AAE9B;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACAC,OAAO,CAACC,GAAG,CAAC,2DAA2D,CAAC;;AAExE;AACA,MAAMC,eAAe,GAAGA,CAACC,IAAI,EAAEC,IAAI,EAAEC,SAAS,EAAEC,IAAI,GAAG,IAAI,KAAK;EAC9D,MAAMC,SAAS,GAAG,IAAIC,IAAI,CAAC,CAAC,CAACC,kBAAkB,CAAC,CAAC;EACjD,MAAMC,OAAO,GAAG,oBAAoBP,IAAI,KAAKC,IAAI,IAAIC,SAAS,EAAE;EAChEM,aAAa,CAACD,OAAO,EAAEJ,IAAI,EAAE,MAAM,CAAC;AACtC,CAAC;;AAED;AACA,MAAMK,aAAa,GAAGA,CAACD,OAAO,EAAEJ,IAAI,GAAG,IAAI,EAAEM,IAAI,GAAG,MAAM,KAAK;EAC7D,MAAML,SAAS,GAAG,IAAIC,IAAI,CAAC,CAAC,CAACC,kBAAkB,CAAC,CAAC;EACjD,MAAMI,MAAM,GAAGD,IAAI,KAAK,OAAO,GAAG,GAAG,GAAGA,IAAI,KAAK,SAAS,GAAG,IAAI,GAAGA,IAAI,KAAK,SAAS,GAAG,GAAG,GAAG,IAAI;EACnG,MAAME,WAAW,GAAG,GAAGD,MAAM,KAAKN,SAAS,KAAKG,OAAO,EAAE;;EAEzD;EACA,MAAMK,QAAQ,GAAG;IACfR,SAAS,EAAEA,SAAS;IACpBK,IAAI,EAAEA,IAAI;IACVF,OAAO,EAAEA,OAAO;IAChBJ,IAAI,EAAEA;EACR,CAAC;;EAED;EACAN,OAAO,CAACC,GAAG,CAAC,KAAKa,WAAW,EAAE,CAAC;EAC/B,IAAIR,IAAI,EAAE;IACR,IAAI,OAAOA,IAAI,KAAK,QAAQ,EAAE;MAC9BN,OAAO,CAACC,GAAG,CAACe,IAAI,CAACC,SAAS,CAACX,IAAI,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC;IAC1C,CAAC,MAAM;MACLN,OAAO,CAACC,GAAG,CAACK,IAAI,CAAC;IACnB;EACF;EACAN,OAAO,CAACC,GAAG,CAAC,GAAG,CAACiB,MAAM,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC;;EAElC;EACAC,KAAK,CAAC,2BAA2B,EAAE;IACjCC,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MACP,cAAc,EAAE;IAClB,CAAC;IACDC,IAAI,EAAEN,IAAI,CAACC,SAAS,CAACF,QAAQ;EAC/B,CAAC,CAAC,CACDQ,IAAI,CAACC,QAAQ,IAAI;IAChB,IAAI,CAACA,QAAQ,CAACC,EAAE,EAAE;MAChB,MAAM,IAAIC,KAAK,CAAC,uBAAuBF,QAAQ,CAACG,MAAM,EAAE,CAAC;IAC3D;IACA3B,OAAO,CAACC,GAAG,CAAC,qCAAqC,CAAC;EACpD,CAAC,CAAC,CACD2B,KAAK,CAACC,KAAK,IAAI;IACd7B,OAAO,CAAC6B,KAAK,CAAC,0CAA0C,EAAEA,KAAK,CAAC;IAChE7B,OAAO,CAACC,GAAG,CAAC,iEAAiE,CAAC;EAChF,CAAC,CAAC;;EAEF;EACA,MAAM6B,WAAW,GAAG,IAAIvB,SAAS,KAAKK,IAAI,KAAKF,OAAO,GAAGJ,IAAI,GAAG,WAAW,GAAGU,IAAI,CAACC,SAAS,CAACX,IAAI,CAAC,GAAG,EAAE,IAAI;EAC3Ga,KAAK,CAAC,iCAAiC,EAAE;IACvCC,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MACP,cAAc,EAAE;IAClB,CAAC;IACDC,IAAI,EAAEQ;EACR,CAAC,CAAC,CACDF,KAAK,CAACC,KAAK,IAAI;IACd7B,OAAO,CAACC,GAAG,CAAC,6BAA6B,EAAE4B,KAAK,CAACnB,OAAO,CAAC;EAC3D,CAAC,CAAC;AACJ,CAAC;;AAED;AACA,SAASqB,yBAAyBA,CAACC,OAAO,EAAEC,IAAI,EAAEC,SAAS,EAAE;EAC3D;EACA,MAAMC,YAAY,GAAG,CACnB,SAAS;EAAE;EACX,SAAS;EAAE;EACX,SAAS;EAAE;EACX,SAAS;EAAE;EACX,SAAS;EAAE;EACX,SAAS,CAAE;EAAA,CACZ;EAED,MAAMC,WAAW,GAAGD,YAAY,CAACD,SAAS,CAAC,IAAI,SAAS;EAExD,MAAMG,MAAM,GAAG;EACb;EACA,mBAAMtC,OAAA;IAAOuC,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,KAAK,CAAE;IAAAC,QAAA,gBACnCxC,OAAA;MAAAwC,QAAA,gBAAMxC,OAAA;QAAeyC,IAAI,EAAE,CAACP,IAAI,EAAEA,IAAI;MAAE;QAAAQ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eAAA7C,OAAA;QAAmB8C,KAAK,EAAC;MAAK;QAAAJ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC,eACnF7C,OAAA;MAAMuC,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,KAAK,CAAE;MAAAC,QAAA,gBAACxC,OAAA;QAAeyC,IAAI,EAAE,CAACP,IAAI,GAAC,IAAI,EAAEA,IAAI,GAAC,IAAI;MAAE;QAAAQ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eAAA7C,OAAA;QAAmB8C,KAAK,EAAET;MAAY;QAAAK,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC,eAC9H7C,OAAA;MAAMuC,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,KAAK,CAAE;MAAAC,QAAA,gBAACxC,OAAA;QAAeyC,IAAI,EAAE,CAACP,IAAI,GAAC,GAAG,EAAEA,IAAI,GAAC,GAAG;MAAE;QAAAQ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eAAA7C,OAAA;QAAmB8C,KAAK,EAAC;MAAK;QAAAJ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC/G,CAAC;EAAE;EACV,mBAAM7C,OAAA;IAAOuC,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,KAAK,CAAE;IAAAC,QAAA,gBACnCxC,OAAA;MAAAwC,QAAA,gBAAMxC,OAAA;QAAeyC,IAAI,EAAE,CAACP,IAAI,EAAEA,IAAI;MAAE;QAAAQ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eAAA7C,OAAA;QAAmB8C,KAAK,EAAC;MAAM;QAAAJ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC,eACpF7C,OAAA;MAAMuC,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,KAAK,CAAE;MAAAC,QAAA,gBAACxC,OAAA;QAAeyC,IAAI,EAAE,CAACP,IAAI,GAAC,IAAI,EAAEA,IAAI,GAAC,IAAI;MAAE;QAAAQ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eAAA7C,OAAA;QAAmB8C,KAAK,EAAET;MAAY;QAAAK,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC,eAC9H7C,OAAA;MAAMuC,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,KAAK,CAAE;MAAAC,QAAA,gBAACxC,OAAA;QAAeyC,IAAI,EAAE,CAACP,IAAI,GAAC,GAAG,EAAEA,IAAI,GAAC,GAAG;MAAE;QAAAQ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eAAA7C,OAAA;QAAmB8C,KAAK,EAAC;MAAM;QAAAJ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAChH,CAAC;EAAE;EACV,mBAAM7C,OAAA;IAAOuC,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,KAAK,CAAE;IAAAC,QAAA,gBACnCxC,OAAA;MAAAwC,QAAA,gBAAMxC,OAAA;QAAeyC,IAAI,EAAE,CAACP,IAAI,EAAEA,IAAI;MAAE;QAAAQ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eAAA7C,OAAA;QAAmB8C,KAAK,EAAC;MAAO;QAAAJ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC,eACrF7C,OAAA;MAAMuC,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,KAAK,CAAE;MAAAC,QAAA,gBAACxC,OAAA;QAAeyC,IAAI,EAAE,CAACP,IAAI,GAAC,IAAI,EAAEA,IAAI,GAAC,IAAI;MAAE;QAAAQ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eAAA7C,OAAA;QAAmB8C,KAAK,EAAET;MAAY;QAAAK,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC,eAC9H7C,OAAA;MAAMuC,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,KAAK,CAAE;MAAAC,QAAA,gBAACxC,OAAA;QAAeyC,IAAI,EAAE,CAACP,IAAI,GAAC,GAAG,EAAEA,IAAI,GAAC,GAAG;MAAE;QAAAQ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eAAA7C,OAAA;QAAmB8C,KAAK,EAAC;MAAO;QAAAJ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACjH,CAAC;EAAE;EACV,mBAAM7C,OAAA;IAAOuC,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,KAAK,CAAE;IAAAC,QAAA,gBACnCxC,OAAA;MAAAwC,QAAA,gBAAMxC,OAAA;QAAeyC,IAAI,EAAE,CAACP,IAAI,EAAEA,IAAI;MAAE;QAAAQ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eAAA7C,OAAA;QAAmB8C,KAAK,EAAC;MAAQ;QAAAJ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC,eACtF7C,OAAA;MAAMuC,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,KAAK,CAAE;MAAAC,QAAA,gBAACxC,OAAA;QAAeyC,IAAI,EAAE,CAACP,IAAI,GAAC,IAAI,EAAEA,IAAI,GAAC,IAAI;MAAE;QAAAQ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eAAA7C,OAAA;QAAmB8C,KAAK,EAAET;MAAY;QAAAK,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC,eAC9H7C,OAAA;MAAMuC,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,KAAK,CAAE;MAAAC,QAAA,gBAACxC,OAAA;QAAeyC,IAAI,EAAE,CAACP,IAAI,GAAC,GAAG,EAAEA,IAAI,GAAC,GAAG;MAAE;QAAAQ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eAAA7C,OAAA;QAAmB8C,KAAK,EAAC;MAAQ;QAAAJ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAClH,CAAC;EAAE;EACV,mBAAM7C,OAAA;IAAOuC,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,KAAK,CAAE;IAAAC,QAAA,gBACnCxC,OAAA;MAAAwC,QAAA,gBAAMxC,OAAA;QAAeyC,IAAI,EAAE,CAACP,IAAI,EAAEA,IAAI;MAAE;QAAAQ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eAAA7C,OAAA;QAAmB8C,KAAK,EAAC;MAAQ;QAAAJ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC,eACtF7C,OAAA;MAAMuC,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,KAAK,CAAE;MAAAC,QAAA,gBAACxC,OAAA;QAAeyC,IAAI,EAAE,CAACP,IAAI,GAAC,IAAI,EAAEA,IAAI,GAAC,IAAI;MAAE;QAAAQ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eAAA7C,OAAA;QAAmB8C,KAAK,EAAET;MAAY;QAAAK,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC,eAC9H7C,OAAA;MAAMuC,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,KAAK,CAAE;MAAAC,QAAA,gBAACxC,OAAA;QAAeyC,IAAI,EAAE,CAACP,IAAI,GAAC,GAAG,EAAEA,IAAI,GAAC,GAAG;MAAE;QAAAQ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eAAA7C,OAAA;QAAmB8C,KAAK,EAAC;MAAQ;QAAAJ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAClH,CAAC;EAAE;;EAEV;EACA,mBAAM7C,OAAA;IAAOuC,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,KAAK,CAAE;IAAAC,QAAA,gBACnCxC,OAAA;MAAAwC,QAAA,gBAAMxC,OAAA;QAAgByC,IAAI,EAAE,CAACP,IAAI,GAAC,CAAC,EAAE,EAAE;MAAE;QAAAQ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eAAA7C,OAAA;QAAmB8C,KAAK,EAAC;MAAK;QAAAJ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC,eACpF7C,OAAA;MAAMuC,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,KAAK,CAAE;MAAAC,QAAA,gBAACxC,OAAA;QAAgByC,IAAI,EAAE,CAACP,IAAI,GAAC,IAAI,EAAE,EAAE;MAAE;QAAAQ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eAAA7C,OAAA;QAAmB8C,KAAK,EAAET;MAAY;QAAAK,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC,eACxH7C,OAAA;MAAMuC,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,KAAK,CAAE;MAAAC,QAAA,gBAACxC,OAAA;QAAgByC,IAAI,EAAE,CAACP,IAAI,GAAC,GAAG,EAAE,EAAE;MAAE;QAAAQ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eAAA7C,OAAA;QAAmB8C,KAAK,EAAC;MAAK;QAAAJ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC1G,CAAC;EAAE;EACV,mBAAM7C,OAAA;IAAOuC,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,KAAK,CAAE;IAAAC,QAAA,gBACnCxC,OAAA;MAAAwC,QAAA,gBAAMxC,OAAA;QAAgByC,IAAI,EAAE,CAACP,IAAI,GAAC,CAAC,EAAE,EAAE;MAAE;QAAAQ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eAAA7C,OAAA;QAAmB8C,KAAK,EAAC;MAAM;QAAAJ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC,eACrF7C,OAAA;MAAMuC,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,KAAK,CAAE;MAAAC,QAAA,gBAACxC,OAAA;QAAgByC,IAAI,EAAE,CAACP,IAAI,GAAC,IAAI,EAAE,EAAE;MAAE;QAAAQ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eAAA7C,OAAA;QAAmB8C,KAAK,EAAET;MAAY;QAAAK,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC,eACxH7C,OAAA;MAAMuC,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,KAAK,CAAE;MAAAC,QAAA,gBAACxC,OAAA;QAAgByC,IAAI,EAAE,CAACP,IAAI,GAAC,GAAG,EAAE,EAAE;MAAE;QAAAQ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eAAA7C,OAAA;QAAmB8C,KAAK,EAAC;MAAM;QAAAJ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC3G,CAAC;EAAE;EACV,mBAAM7C,OAAA;IAAOuC,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,KAAK,CAAE;IAAAC,QAAA,gBACnCxC,OAAA;MAAAwC,QAAA,gBAAMxC,OAAA;QAAgByC,IAAI,EAAE,CAACP,IAAI,GAAC,CAAC,EAAE,EAAE;MAAE;QAAAQ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eAAA7C,OAAA;QAAmB8C,KAAK,EAAC;MAAO;QAAAJ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC,eACtF7C,OAAA;MAAMuC,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,KAAK,CAAE;MAAAC,QAAA,gBAACxC,OAAA;QAAgByC,IAAI,EAAE,CAACP,IAAI,GAAC,IAAI,EAAE,EAAE;MAAE;QAAAQ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eAAA7C,OAAA;QAAmB8C,KAAK,EAAET;MAAY;QAAAK,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC,eACxH7C,OAAA;MAAMuC,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,KAAK,CAAE;MAAAC,QAAA,gBAACxC,OAAA;QAAgByC,IAAI,EAAE,CAACP,IAAI,GAAC,GAAG,EAAE,EAAE;MAAE;QAAAQ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eAAA7C,OAAA;QAAmB8C,KAAK,EAAC;MAAO;QAAAJ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC5G,CAAC;EAAE;EACV,mBAAM7C,OAAA;IAAOuC,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,KAAK,CAAE;IAAAC,QAAA,gBACnCxC,OAAA;MAAAwC,QAAA,gBAAMxC,OAAA;QAAgByC,IAAI,EAAE,CAACP,IAAI,GAAC,CAAC,EAAE,EAAE;MAAE;QAAAQ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eAAA7C,OAAA;QAAmB8C,KAAK,EAAC;MAAQ;QAAAJ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC,eACvF7C,OAAA;MAAMuC,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,KAAK,CAAE;MAAAC,QAAA,gBAACxC,OAAA;QAAgByC,IAAI,EAAE,CAACP,IAAI,GAAC,IAAI,EAAE,EAAE;MAAE;QAAAQ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eAAA7C,OAAA;QAAmB8C,KAAK,EAAET;MAAY;QAAAK,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC,eACxH7C,OAAA;MAAMuC,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,KAAK,CAAE;MAAAC,QAAA,gBAACxC,OAAA;QAAgByC,IAAI,EAAE,CAACP,IAAI,GAAC,GAAG,EAAE,EAAE;MAAE;QAAAQ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eAAA7C,OAAA;QAAmB8C,KAAK,EAAC;MAAQ;QAAAJ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC7G,CAAC;EAAE;EACV,mBAAM7C,OAAA;IAAOuC,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,KAAK,CAAE;IAAAC,QAAA,gBACnCxC,OAAA;MAAAwC,QAAA,gBAAMxC,OAAA;QAAgByC,IAAI,EAAE,CAACP,IAAI,GAAC,CAAC,EAAE,EAAE;MAAE;QAAAQ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eAAA7C,OAAA;QAAmB8C,KAAK,EAAC;MAAQ;QAAAJ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC,eACvF7C,OAAA;MAAMuC,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,KAAK,CAAE;MAAAC,QAAA,gBAACxC,OAAA;QAAgByC,IAAI,EAAE,CAACP,IAAI,GAAC,IAAI,EAAE,EAAE;MAAE;QAAAQ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eAAA7C,OAAA;QAAmB8C,KAAK,EAAET;MAAY;QAAAK,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC,eACxH7C,OAAA;MAAMuC,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,KAAK,CAAE;MAAAC,QAAA,gBAACxC,OAAA;QAAgByC,IAAI,EAAE,CAACP,IAAI,GAAC,GAAG,EAAE,EAAE;MAAE;QAAAQ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eAAA7C,OAAA;QAAmB8C,KAAK,EAAC;MAAQ;QAAAJ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC7G,CAAC;EAAE;;EAEV;EACA,mBAAM7C,OAAA;IAAOuC,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,KAAK,CAAE;IAAAC,QAAA,gBACnCxC,OAAA;MAAM+C,QAAQ,EAAE,CAACC,IAAI,CAACC,EAAE,GAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAE;MAAAT,QAAA,gBAACxC,OAAA;QAAcyC,IAAI,EAAE,CAACP,IAAI,GAAC,CAAC,EAAE,IAAI,EAAE,CAAC;MAAE;QAAAQ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eAAA7C,OAAA;QAAmB8C,KAAK,EAAC;MAAM;QAAAJ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC,eACrH7C,OAAA;MAAMuC,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,KAAK,CAAE;MAACQ,QAAQ,EAAE,CAACC,IAAI,CAACC,EAAE,GAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAE;MAAAT,QAAA,gBAACxC,OAAA;QAAcyC,IAAI,EAAE,CAACP,IAAI,GAAC,IAAI,EAAE,IAAI,EAAE,CAAC;MAAE;QAAAQ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eAAA7C,OAAA;QAAmB8C,KAAK,EAAET;MAAY;QAAAK,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC,eACxJ7C,OAAA;MAAMuC,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,KAAK,CAAE;MAACQ,QAAQ,EAAE,CAACC,IAAI,CAACC,EAAE,GAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAE;MAAAT,QAAA,gBAACxC,OAAA;QAAcyC,IAAI,EAAE,CAACP,IAAI,GAAC,GAAG,EAAE,IAAI,EAAE,CAAC;MAAE;QAAAQ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eAAA7C,OAAA;QAAmB8C,KAAK,EAAC;MAAM;QAAAJ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC3I,CAAC;EAAE;EACV,mBAAM7C,OAAA;IAAOuC,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,KAAK,CAAE;IAAAC,QAAA,gBACnCxC,OAAA;MAAM+C,QAAQ,EAAE,CAACC,IAAI,CAACC,EAAE,GAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAE;MAAAT,QAAA,gBAACxC,OAAA;QAAcyC,IAAI,EAAE,CAACP,IAAI,GAAC,CAAC,EAAE,IAAI,EAAE,CAAC;MAAE;QAAAQ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eAAA7C,OAAA;QAAmB8C,KAAK,EAAC;MAAS;QAAAJ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC,eACxH7C,OAAA;MAAMuC,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,KAAK,CAAE;MAACQ,QAAQ,EAAE,CAACC,IAAI,CAACC,EAAE,GAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAE;MAAAT,QAAA,gBAACxC,OAAA;QAAcyC,IAAI,EAAE,CAACP,IAAI,GAAC,IAAI,EAAE,IAAI,EAAE,CAAC;MAAE;QAAAQ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eAAA7C,OAAA;QAAmB8C,KAAK,EAAET;MAAY;QAAAK,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC,eACxJ7C,OAAA;MAAMuC,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,KAAK,CAAE;MAACQ,QAAQ,EAAE,CAACC,IAAI,CAACC,EAAE,GAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAE;MAAAT,QAAA,gBAACxC,OAAA;QAAcyC,IAAI,EAAE,CAACP,IAAI,GAAC,GAAG,EAAE,IAAI,EAAE,CAAC;MAAE;QAAAQ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eAAA7C,OAAA;QAAmB8C,KAAK,EAAC;MAAS;QAAAJ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC9I,CAAC;EAAE;EACV,mBAAM7C,OAAA;IAAOuC,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,KAAK,CAAE;IAAAC,QAAA,gBACnCxC,OAAA;MAAM+C,QAAQ,EAAE,CAACC,IAAI,CAACC,EAAE,GAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAE;MAAAT,QAAA,gBAACxC,OAAA;QAAcyC,IAAI,EAAE,CAACP,IAAI,GAAC,CAAC,EAAE,IAAI,EAAE,CAAC;MAAE;QAAAQ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eAAA7C,OAAA;QAAmB8C,KAAK,EAAC;MAAM;QAAAJ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC,eACrH7C,OAAA;MAAMuC,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,KAAK,CAAE;MAACQ,QAAQ,EAAE,CAACC,IAAI,CAACC,EAAE,GAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAE;MAAAT,QAAA,gBAACxC,OAAA;QAAcyC,IAAI,EAAE,CAACP,IAAI,GAAC,IAAI,EAAE,IAAI,EAAE,CAAC;MAAE;QAAAQ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eAAA7C,OAAA;QAAmB8C,KAAK,EAAET;MAAY;QAAAK,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC,eACxJ7C,OAAA;MAAMuC,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,KAAK,CAAE;MAACQ,QAAQ,EAAE,CAACC,IAAI,CAACC,EAAE,GAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAE;MAAAT,QAAA,gBAACxC,OAAA;QAAcyC,IAAI,EAAE,CAACP,IAAI,GAAC,GAAG,EAAE,IAAI,EAAE,CAAC;MAAE;QAAAQ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eAAA7C,OAAA;QAAmB8C,KAAK,EAAC;MAAM;QAAAJ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC3I,CAAC;EAAE;EACV,mBAAM7C,OAAA;IAAOuC,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,KAAK,CAAE;IAAAC,QAAA,gBACnCxC,OAAA;MAAM+C,QAAQ,EAAE,CAACC,IAAI,CAACC,EAAE,GAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAE;MAAAT,QAAA,gBAACxC,OAAA;QAAcyC,IAAI,EAAE,CAACP,IAAI,GAAC,CAAC,EAAE,IAAI,EAAE,CAAC;MAAE;QAAAQ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eAAA7C,OAAA;QAAmB8C,KAAK,EAAC;MAAM;QAAAJ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC,eACrH7C,OAAA;MAAMuC,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,KAAK,CAAE;MAACQ,QAAQ,EAAE,CAACC,IAAI,CAACC,EAAE,GAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAE;MAAAT,QAAA,gBAACxC,OAAA;QAAcyC,IAAI,EAAE,CAACP,IAAI,GAAC,IAAI,EAAE,IAAI,EAAE,CAAC;MAAE;QAAAQ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eAAA7C,OAAA;QAAmB8C,KAAK,EAAET;MAAY;QAAAK,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC,eACxJ7C,OAAA;MAAMuC,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,KAAK,CAAE;MAACQ,QAAQ,EAAE,CAACC,IAAI,CAACC,EAAE,GAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAE;MAAAT,QAAA,gBAACxC,OAAA;QAAcyC,IAAI,EAAE,CAACP,IAAI,GAAC,GAAG,EAAE,IAAI,EAAE,CAAC;MAAE;QAAAQ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eAAA7C,OAAA;QAAmB8C,KAAK,EAAC;MAAM;QAAAJ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC3I,CAAC;EAAE;EACV,mBAAM7C,OAAA;IAAOuC,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,KAAK,CAAE;IAAAC,QAAA,gBACnCxC,OAAA;MAAM+C,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,EAAEC,IAAI,CAACC,EAAE,GAAC,CAAC,CAAE;MAAAT,QAAA,gBAACxC,OAAA;QAAeyC,IAAI,EAAE,CAACP,IAAI,EAAEA,IAAI;MAAE;QAAAQ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eAAA7C,OAAA;QAAmB8C,KAAK,EAAC;MAAQ;QAAAJ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC,eACnH7C,OAAA;MAAMuC,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,KAAK,CAAE;MAACQ,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,EAAEC,IAAI,CAACC,EAAE,GAAC,CAAC,CAAE;MAAAT,QAAA,gBAACxC,OAAA;QAAeyC,IAAI,EAAE,CAACP,IAAI,GAAC,IAAI,EAAEA,IAAI,GAAC,IAAI;MAAE;QAAAQ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eAAA7C,OAAA;QAAmB8C,KAAK,EAAET;MAAY;QAAAK,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC,eAC3J7C,OAAA;MAAMuC,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,KAAK,CAAE;MAACQ,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,EAAEC,IAAI,CAACC,EAAE,GAAC,CAAC,CAAE;MAAAT,QAAA,gBAACxC,OAAA;QAAeyC,IAAI,EAAE,CAACP,IAAI,GAAC,GAAG,EAAEA,IAAI,GAAC,GAAG;MAAE;QAAAQ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eAAA7C,OAAA;QAAmB8C,KAAK,EAAC;MAAQ;QAAAJ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC/I,CAAC;EAAE;;EAEV;EACA,mBAAM7C,OAAA;IAAOuC,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,KAAK,CAAE;IAAAC,QAAA,gBACnCxC,OAAA;MAAM+C,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,EAAEC,IAAI,CAACC,EAAE,GAAC,CAAC,CAAE;MAAAT,QAAA,gBAACxC,OAAA;QAAeyC,IAAI,EAAE,CAACP,IAAI,EAAEA,IAAI;MAAE;QAAAQ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eAAA7C,OAAA;QAAmB8C,KAAK,EAAC;MAAK;QAAAJ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC,eAChH7C,OAAA;MAAMuC,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,KAAK,CAAE;MAACQ,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,EAAEC,IAAI,CAACC,EAAE,GAAC,CAAC,CAAE;MAAAT,QAAA,gBAACxC,OAAA;QAAeyC,IAAI,EAAE,CAACP,IAAI,GAAC,IAAI,EAAEA,IAAI,GAAC,IAAI;MAAE;QAAAQ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eAAA7C,OAAA;QAAmB8C,KAAK,EAAET;MAAY;QAAAK,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC,eAC3J7C,OAAA;MAAMuC,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,KAAK,CAAE;MAACQ,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,EAAEC,IAAI,CAACC,EAAE,GAAC,CAAC,CAAE;MAAAT,QAAA,gBAACxC,OAAA;QAAeyC,IAAI,EAAE,CAACP,IAAI,GAAC,GAAG,EAAEA,IAAI,GAAC,GAAG;MAAE;QAAAQ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eAAA7C,OAAA;QAAmB8C,KAAK,EAAC;MAAK;QAAAJ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC5I,CAAC;EAAE;EACV,mBAAM7C,OAAA;IAAOuC,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,KAAK,CAAE;IAAAC,QAAA,gBACnCxC,OAAA;MAAM+C,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,EAAEC,IAAI,CAACC,EAAE,GAAC,CAAC,CAAE;MAAAT,QAAA,gBAACxC,OAAA;QAAeyC,IAAI,EAAE,CAACP,IAAI,EAAEA,IAAI;MAAE;QAAAQ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eAAA7C,OAAA;QAAmB8C,KAAK,EAAC;MAAM;QAAAJ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC,eACjH7C,OAAA;MAAMuC,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,KAAK,CAAE;MAACQ,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,EAAEC,IAAI,CAACC,EAAE,GAAC,CAAC,CAAE;MAAAT,QAAA,gBAACxC,OAAA;QAAeyC,IAAI,EAAE,CAACP,IAAI,GAAC,IAAI,EAAEA,IAAI,GAAC,IAAI;MAAE;QAAAQ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eAAA7C,OAAA;QAAmB8C,KAAK,EAAET;MAAY;QAAAK,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC,eAC3J7C,OAAA;MAAMuC,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,KAAK,CAAE;MAACQ,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,EAAEC,IAAI,CAACC,EAAE,GAAC,CAAC,CAAE;MAAAT,QAAA,gBAACxC,OAAA;QAAeyC,IAAI,EAAE,CAACP,IAAI,GAAC,GAAG,EAAEA,IAAI,GAAC,GAAG;MAAE;QAAAQ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eAAA7C,OAAA;QAAmB8C,KAAK,EAAC;MAAM;QAAAJ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC7I,CAAC;EAAE;EACV,mBAAM7C,OAAA;IAAOuC,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,KAAK,CAAE;IAAAC,QAAA,gBACnCxC,OAAA;MAAM+C,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,EAAEC,IAAI,CAACC,EAAE,GAAC,CAAC,CAAE;MAAAT,QAAA,gBAACxC,OAAA;QAAeyC,IAAI,EAAE,CAACP,IAAI,EAAEA,IAAI;MAAE;QAAAQ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eAAA7C,OAAA;QAAmB8C,KAAK,EAAC;MAAO;QAAAJ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC,eAClH7C,OAAA;MAAMuC,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,KAAK,CAAE;MAACQ,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,EAAEC,IAAI,CAACC,EAAE,GAAC,CAAC,CAAE;MAAAT,QAAA,gBAACxC,OAAA;QAAeyC,IAAI,EAAE,CAACP,IAAI,GAAC,IAAI,EAAEA,IAAI,GAAC,IAAI;MAAE;QAAAQ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eAAA7C,OAAA;QAAmB8C,KAAK,EAAET;MAAY;QAAAK,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC,eAC3J7C,OAAA;MAAMuC,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,KAAK,CAAE;MAACQ,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,EAAEC,IAAI,CAACC,EAAE,GAAC,CAAC,CAAE;MAAAT,QAAA,gBAACxC,OAAA;QAAeyC,IAAI,EAAE,CAACP,IAAI,GAAC,GAAG,EAAEA,IAAI,GAAC,GAAG;MAAE;QAAAQ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eAAA7C,OAAA;QAAmB8C,KAAK,EAAC;MAAO;QAAAJ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC9I,CAAC;EAAE;EACV,mBAAM7C,OAAA;IAAOuC,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,KAAK,CAAE;IAAAC,QAAA,gBACnCxC,OAAA;MAAM+C,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,EAAEC,IAAI,CAACC,EAAE,GAAC,CAAC,CAAE;MAAAT,QAAA,gBAACxC,OAAA;QAAeyC,IAAI,EAAE,CAACP,IAAI,EAAEA,IAAI;MAAE;QAAAQ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eAAA7C,OAAA;QAAmB8C,KAAK,EAAC;MAAQ;QAAAJ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC,eACnH7C,OAAA;MAAMuC,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,KAAK,CAAE;MAACQ,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,EAAEC,IAAI,CAACC,EAAE,GAAC,CAAC,CAAE;MAAAT,QAAA,gBAACxC,OAAA;QAAeyC,IAAI,EAAE,CAACP,IAAI,GAAC,IAAI,EAAEA,IAAI,GAAC,IAAI;MAAE;QAAAQ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eAAA7C,OAAA;QAAmB8C,KAAK,EAAET;MAAY;QAAAK,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC,eAC3J7C,OAAA;MAAMuC,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,KAAK,CAAE;MAACQ,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,EAAEC,IAAI,CAACC,EAAE,GAAC,CAAC,CAAE;MAAAT,QAAA,gBAACxC,OAAA;QAAeyC,IAAI,EAAE,CAACP,IAAI,GAAC,GAAG,EAAEA,IAAI,GAAC,GAAG;MAAE;QAAAQ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eAAA7C,OAAA;QAAmB8C,KAAK,EAAC;MAAQ;QAAAJ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC/I,CAAC;EAAE;EACV,mBAAM7C,OAAA;IAAOuC,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,KAAK,CAAE;IAAAC,QAAA,gBACnCxC,OAAA;MAAM+C,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,EAAEC,IAAI,CAACC,EAAE,GAAC,CAAC,CAAE;MAAAT,QAAA,gBAACxC,OAAA;QAAeyC,IAAI,EAAE,CAACP,IAAI,EAAEA,IAAI;MAAE;QAAAQ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eAAA7C,OAAA;QAAmB8C,KAAK,EAAC;MAAQ;QAAAJ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC,eACnH7C,OAAA;MAAMuC,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,KAAK,CAAE;MAACQ,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,EAAEC,IAAI,CAACC,EAAE,GAAC,CAAC,CAAE;MAAAT,QAAA,gBAACxC,OAAA;QAAeyC,IAAI,EAAE,CAACP,IAAI,GAAC,IAAI,EAAEA,IAAI,GAAC,IAAI;MAAE;QAAAQ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eAAA7C,OAAA;QAAmB8C,KAAK,EAAET;MAAY;QAAAK,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC,eAC3J7C,OAAA;MAAMuC,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,KAAK,CAAE;MAACQ,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,EAAEC,IAAI,CAACC,EAAE,GAAC,CAAC,CAAE;MAAAT,QAAA,gBAACxC,OAAA;QAAeyC,IAAI,EAAE,CAACP,IAAI,GAAC,GAAG,EAAEA,IAAI,GAAC,GAAG;MAAE;QAAAQ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eAAA7C,OAAA;QAAmB8C,KAAK,EAAC;MAAQ;QAAAJ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC/I,CAAC;EAAE;;EAEV;EACA,mBAAM7C,OAAA;IAAOuC,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,KAAK,CAAE;IAAAC,QAAA,gBACnCxC,OAAA;MAAM+C,QAAQ,EAAE,CAACC,IAAI,CAACC,EAAE,GAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAE;MAAAT,QAAA,gBAACxC,OAAA;QAAcyC,IAAI,EAAE,CAACP,IAAI,GAAC,CAAC,EAAE,IAAI,EAAE,CAAC;MAAE;QAAAQ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eAAA7C,OAAA;QAAmB8C,KAAK,EAAC;MAAM;QAAAJ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC,eACrH7C,OAAA;MAAMuC,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,KAAK,CAAE;MAACQ,QAAQ,EAAE,CAACC,IAAI,CAACC,EAAE,GAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAE;MAAAT,QAAA,gBAACxC,OAAA;QAAcyC,IAAI,EAAE,CAACP,IAAI,GAAC,IAAI,EAAE,IAAI,EAAE,CAAC;MAAE;QAAAQ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eAAA7C,OAAA;QAAmB8C,KAAK,EAAET;MAAY;QAAAK,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC,eACxJ7C,OAAA;MAAMuC,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,KAAK,CAAE;MAACQ,QAAQ,EAAE,CAACC,IAAI,CAACC,EAAE,GAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAE;MAAAT,QAAA,gBAACxC,OAAA;QAAcyC,IAAI,EAAE,CAACP,IAAI,GAAC,GAAG,EAAE,IAAI,EAAE,CAAC;MAAE;QAAAQ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eAAA7C,OAAA;QAAmB8C,KAAK,EAAC;MAAM;QAAAJ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC3I,CAAC;EAAE;EACV,mBAAM7C,OAAA;IAAOuC,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,KAAK,CAAE;IAAAC,QAAA,gBACnCxC,OAAA;MAAM+C,QAAQ,EAAE,CAACC,IAAI,CAACC,EAAE,GAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAE;MAAAT,QAAA,gBAACxC,OAAA;QAAcyC,IAAI,EAAE,CAACP,IAAI,GAAC,CAAC,EAAE,IAAI,EAAE,CAAC;MAAE;QAAAQ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eAAA7C,OAAA;QAAmB8C,KAAK,EAAC;MAAS;QAAAJ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC,eACxH7C,OAAA;MAAMuC,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,KAAK,CAAE;MAACQ,QAAQ,EAAE,CAACC,IAAI,CAACC,EAAE,GAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAE;MAAAT,QAAA,gBAACxC,OAAA;QAAcyC,IAAI,EAAE,CAACP,IAAI,GAAC,IAAI,EAAE,IAAI,EAAE,CAAC;MAAE;QAAAQ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eAAA7C,OAAA;QAAmB8C,KAAK,EAAET;MAAY;QAAAK,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC,eACxJ7C,OAAA;MAAMuC,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,KAAK,CAAE;MAACQ,QAAQ,EAAE,CAACC,IAAI,CAACC,EAAE,GAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAE;MAAAT,QAAA,gBAACxC,OAAA;QAAcyC,IAAI,EAAE,CAACP,IAAI,GAAC,GAAG,EAAE,IAAI,EAAE,CAAC;MAAE;QAAAQ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eAAA7C,OAAA;QAAmB8C,KAAK,EAAC;MAAS;QAAAJ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC9I,CAAC;EAAE;EACV,mBAAM7C,OAAA;IAAOuC,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,KAAK,CAAE;IAAAC,QAAA,gBACnCxC,OAAA;MAAM+C,QAAQ,EAAE,CAACC,IAAI,CAACC,EAAE,GAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAE;MAAAT,QAAA,gBAACxC,OAAA;QAAcyC,IAAI,EAAE,CAACP,IAAI,GAAC,CAAC,EAAE,IAAI,EAAE,CAAC;MAAE;QAAAQ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eAAA7C,OAAA;QAAmB8C,KAAK,EAAC;MAAM;QAAAJ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC,eACrH7C,OAAA;MAAMuC,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,KAAK,CAAE;MAACQ,QAAQ,EAAE,CAACC,IAAI,CAACC,EAAE,GAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAE;MAAAT,QAAA,gBAACxC,OAAA;QAAcyC,IAAI,EAAE,CAACP,IAAI,GAAC,IAAI,EAAE,IAAI,EAAE,CAAC;MAAE;QAAAQ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eAAA7C,OAAA;QAAmB8C,KAAK,EAAET;MAAY;QAAAK,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC,eACxJ7C,OAAA;MAAMuC,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,KAAK,CAAE;MAACQ,QAAQ,EAAE,CAACC,IAAI,CAACC,EAAE,GAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAE;MAAAT,QAAA,gBAACxC,OAAA;QAAcyC,IAAI,EAAE,CAACP,IAAI,GAAC,GAAG,EAAE,IAAI,EAAE,CAAC;MAAE;QAAAQ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eAAA7C,OAAA;QAAmB8C,KAAK,EAAC;MAAM;QAAAJ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC3I,CAAC;EAAE;EACV,mBAAM7C,OAAA;IAAOuC,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,KAAK,CAAE;IAAAC,QAAA,gBACnCxC,OAAA;MAAM+C,QAAQ,EAAE,CAACC,IAAI,CAACC,EAAE,GAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAE;MAAAT,QAAA,gBAACxC,OAAA;QAAcyC,IAAI,EAAE,CAACP,IAAI,GAAC,CAAC,EAAE,IAAI,EAAE,CAAC;MAAE;QAAAQ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eAAA7C,OAAA;QAAmB8C,KAAK,EAAC;MAAM;QAAAJ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC,eACrH7C,OAAA;MAAMuC,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,KAAK,CAAE;MAACQ,QAAQ,EAAE,CAACC,IAAI,CAACC,EAAE,GAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAE;MAAAT,QAAA,gBAACxC,OAAA;QAAcyC,IAAI,EAAE,CAACP,IAAI,GAAC,IAAI,EAAE,IAAI,EAAE,CAAC;MAAE;QAAAQ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eAAA7C,OAAA;QAAmB8C,KAAK,EAAET;MAAY;QAAAK,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC,eACxJ7C,OAAA;MAAMuC,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,KAAK,CAAE;MAACQ,QAAQ,EAAE,CAACC,IAAI,CAACC,EAAE,GAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAE;MAAAT,QAAA,gBAACxC,OAAA;QAAcyC,IAAI,EAAE,CAACP,IAAI,GAAC,GAAG,EAAE,IAAI,EAAE,CAAC;MAAE;QAAAQ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eAAA7C,OAAA;QAAmB8C,KAAK,EAAC;MAAM;QAAAJ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC3I,CAAC;EAAE;EACV,mBAAM7C,OAAA;IAAOuC,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,KAAK,CAAE;IAAAC,QAAA,gBACnCxC,OAAA;MAAM+C,QAAQ,EAAE,CAACC,IAAI,CAACC,EAAE,GAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAE;MAAAT,QAAA,gBAACxC,OAAA;QAAcyC,IAAI,EAAE,CAACP,IAAI,GAAC,CAAC,EAAE,IAAI,EAAE,CAAC;MAAE;QAAAQ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eAAA7C,OAAA;QAAmB8C,KAAK,EAAC;MAAQ;QAAAJ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC,eACvH7C,OAAA;MAAMuC,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,KAAK,CAAE;MAACQ,QAAQ,EAAE,CAACC,IAAI,CAACC,EAAE,GAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAE;MAAAT,QAAA,gBAACxC,OAAA;QAAcyC,IAAI,EAAE,CAACP,IAAI,GAAC,IAAI,EAAE,IAAI,EAAE,CAAC;MAAE;QAAAQ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eAAA7C,OAAA;QAAmB8C,KAAK,EAAET;MAAY;QAAAK,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC,eACxJ7C,OAAA;MAAMuC,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,KAAK,CAAE;MAACQ,QAAQ,EAAE,CAACC,IAAI,CAACC,EAAE,GAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAE;MAAAT,QAAA,gBAACxC,OAAA;QAAcyC,IAAI,EAAE,CAACP,IAAI,GAAC,GAAG,EAAE,IAAI,EAAE,CAAC;MAAE;QAAAQ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eAAA7C,OAAA;QAAmB8C,KAAK,EAAC;MAAQ;QAAAJ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC7I,CAAC;EAAE;EACV,mBAAM7C,OAAA;IAAOuC,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,KAAK,CAAE;IAAAC,QAAA,gBACnCxC,OAAA;MAAM+C,QAAQ,EAAE,CAACC,IAAI,CAACC,EAAE,GAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAE;MAAAT,QAAA,gBAACxC,OAAA;QAAcyC,IAAI,EAAE,CAACP,IAAI,GAAC,CAAC,EAAE,IAAI,EAAE,CAAC;MAAE;QAAAQ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eAAA7C,OAAA;QAAmB8C,KAAK,EAAC;MAAQ;QAAAJ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC,eACvH7C,OAAA;MAAMuC,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,KAAK,CAAE;MAACQ,QAAQ,EAAE,CAACC,IAAI,CAACC,EAAE,GAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAE;MAAAT,QAAA,gBAACxC,OAAA;QAAcyC,IAAI,EAAE,CAACP,IAAI,GAAC,IAAI,EAAE,IAAI,EAAE,CAAC;MAAE;QAAAQ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eAAA7C,OAAA;QAAmB8C,KAAK,EAAET;MAAY;QAAAK,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC,eACxJ7C,OAAA;MAAMuC,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,KAAK,CAAE;MAACQ,QAAQ,EAAE,CAACC,IAAI,CAACC,EAAE,GAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAE;MAAAT,QAAA,gBAACxC,OAAA;QAAcyC,IAAI,EAAE,CAACP,IAAI,GAAC,GAAG,EAAE,IAAI,EAAE,CAAC;MAAE;QAAAQ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eAAA7C,OAAA;QAAmB8C,KAAK,EAAC;MAAQ;QAAAJ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC7I,CAAC,CAAC;EAAA,CACV;EAED,MAAMK,UAAU,GAAGjB,OAAO;EAC1B,OAAOK,MAAM,CAACY,UAAU,CAAC,CAAC,CAAC;AAC7B;;AAEA;AACA,SAASC,WAAWA,CAAClB,OAAO,EAAEC,IAAI,EAAE;EAClC,MAAMI,MAAM,GAAG;EACb;EACA,mBAAMtC,OAAA;IAAOuC,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,KAAK,CAAE;IAAAC,QAAA,gBAACxC,OAAA;MAAAwC,QAAA,gBAAMxC,OAAA;QAAeyC,IAAI,EAAE,CAACP,IAAI,EAAEA,IAAI;MAAE;QAAAQ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eAAA7C,OAAA;QAAmB8C,KAAK,EAAC;MAAK;QAAAJ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC,eAAA7C,OAAA;MAAMuC,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,KAAK,CAAE;MAAAC,QAAA,gBAACxC,OAAA;QAAeyC,IAAI,EAAE,CAACP,IAAI,GAAC,IAAI,EAAEA,IAAI,GAAC,IAAI;MAAE;QAAAQ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eAAA7C,OAAA;QAAmB8C,KAAK,EAAC;MAAO;QAAAJ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC,eAAA7C,OAAA;MAAMuC,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,KAAK,CAAE;MAAAC,QAAA,gBAACxC,OAAA;QAAeyC,IAAI,EAAE,CAACP,IAAI,GAAC,GAAG,EAAEA,IAAI,GAAC,GAAG;MAAE;QAAAQ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eAAA7C,OAAA;QAAmB8C,KAAK,EAAC;MAAK;QAAAJ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAO,CAAC;EAAE;EAC/W,mBAAM7C,OAAA;IAAOuC,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,KAAK,CAAE;IAAAC,QAAA,gBAACxC,OAAA;MAAAwC,QAAA,gBAAMxC,OAAA;QAAeyC,IAAI,EAAE,CAACP,IAAI,EAAEA,IAAI;MAAE;QAAAQ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eAAA7C,OAAA;QAAmB8C,KAAK,EAAC;MAAM;QAAAJ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC,eAAA7C,OAAA;MAAMuC,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,KAAK,CAAE;MAAAC,QAAA,gBAACxC,OAAA;QAAeyC,IAAI,EAAE,CAACP,IAAI,GAAC,IAAI,EAAEA,IAAI,GAAC,IAAI;MAAE;QAAAQ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eAAA7C,OAAA;QAAmB8C,KAAK,EAAC;MAAO;QAAAJ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC,eAAA7C,OAAA;MAAMuC,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,KAAK,CAAE;MAAAC,QAAA,gBAACxC,OAAA;QAAeyC,IAAI,EAAE,CAACP,IAAI,GAAC,GAAG,EAAEA,IAAI,GAAC,GAAG;MAAE;QAAAQ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eAAA7C,OAAA;QAAmB8C,KAAK,EAAC;MAAM;QAAAJ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAO,CAAC;EAAE;EACjX,mBAAM7C,OAAA;IAAOuC,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,KAAK,CAAE;IAAAC,QAAA,gBAACxC,OAAA;MAAAwC,QAAA,gBAAMxC,OAAA;QAAeyC,IAAI,EAAE,CAACP,IAAI,EAAEA,IAAI;MAAE;QAAAQ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eAAA7C,OAAA;QAAmB8C,KAAK,EAAC;MAAO;QAAAJ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC,eAAA7C,OAAA;MAAMuC,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,KAAK,CAAE;MAAAC,QAAA,gBAACxC,OAAA;QAAeyC,IAAI,EAAE,CAACP,IAAI,GAAC,IAAI,EAAEA,IAAI,GAAC,IAAI;MAAE;QAAAQ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eAAA7C,OAAA;QAAmB8C,KAAK,EAAC;MAAO;QAAAJ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC,eAAA7C,OAAA;MAAMuC,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,KAAK,CAAE;MAAAC,QAAA,gBAACxC,OAAA;QAAeyC,IAAI,EAAE,CAACP,IAAI,GAAC,GAAG,EAAEA,IAAI,GAAC,GAAG;MAAE;QAAAQ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eAAA7C,OAAA;QAAmB8C,KAAK,EAAC;MAAO;QAAAJ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAO,CAAC;EAAE;EACnX,mBAAM7C,OAAA;IAAOuC,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,KAAK,CAAE;IAAAC,QAAA,gBAACxC,OAAA;MAAAwC,QAAA,gBAAMxC,OAAA;QAAeyC,IAAI,EAAE,CAACP,IAAI,EAAEA,IAAI;MAAE;QAAAQ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eAAA7C,OAAA;QAAmB8C,KAAK,EAAC;MAAQ;QAAAJ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC,eAAA7C,OAAA;MAAMuC,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,KAAK,CAAE;MAAAC,QAAA,gBAACxC,OAAA;QAAeyC,IAAI,EAAE,CAACP,IAAI,GAAC,IAAI,EAAEA,IAAI,GAAC,IAAI;MAAE;QAAAQ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eAAA7C,OAAA;QAAmB8C,KAAK,EAAC;MAAO;QAAAJ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC,eAAA7C,OAAA;MAAMuC,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,KAAK,CAAE;MAAAC,QAAA,gBAACxC,OAAA;QAAeyC,IAAI,EAAE,CAACP,IAAI,GAAC,GAAG,EAAEA,IAAI,GAAC,GAAG;MAAE;QAAAQ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eAAA7C,OAAA;QAAmB8C,KAAK,EAAC;MAAQ;QAAAJ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAO,CAAC;EAAE;EACrX,mBAAM7C,OAAA;IAAOuC,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,KAAK,CAAE;IAAAC,QAAA,gBAACxC,OAAA;MAAAwC,QAAA,gBAAMxC,OAAA;QAAeyC,IAAI,EAAE,CAACP,IAAI,EAAEA,IAAI;MAAE;QAAAQ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eAAA7C,OAAA;QAAmB8C,KAAK,EAAC;MAAQ;QAAAJ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC,eAAA7C,OAAA;MAAMuC,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,KAAK,CAAE;MAAAC,QAAA,gBAACxC,OAAA;QAAeyC,IAAI,EAAE,CAACP,IAAI,GAAC,IAAI,EAAEA,IAAI,GAAC,IAAI;MAAE;QAAAQ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eAAA7C,OAAA;QAAmB8C,KAAK,EAAC;MAAO;QAAAJ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC,eAAA7C,OAAA;MAAMuC,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,KAAK,CAAE;MAAAC,QAAA,gBAACxC,OAAA;QAAeyC,IAAI,EAAE,CAACP,IAAI,GAAC,GAAG,EAAEA,IAAI,GAAC,GAAG;MAAE;QAAAQ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eAAA7C,OAAA;QAAmB8C,KAAK,EAAC;MAAQ;QAAAJ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAO,CAAC;EAAE;;EAErX;EACA,mBAAM7C,OAAA;IAAOuC,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,KAAK,CAAE;IAAAC,QAAA,gBAACxC,OAAA;MAAAwC,QAAA,gBAAMxC,OAAA;QAAgByC,IAAI,EAAE,CAACP,IAAI,GAAC,CAAC,EAAE,EAAE;MAAE;QAAAQ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eAAA7C,OAAA;QAAmB8C,KAAK,EAAC;MAAK;QAAAJ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC,eAAA7C,OAAA;MAAMuC,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,KAAK,CAAE;MAAAC,QAAA,gBAACxC,OAAA;QAAgByC,IAAI,EAAE,CAACP,IAAI,GAAC,IAAI,EAAE,EAAE;MAAE;QAAAQ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eAAA7C,OAAA;QAAmB8C,KAAK,EAAC;MAAO;QAAAJ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC,eAAA7C,OAAA;MAAMuC,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,KAAK,CAAE;MAAAC,QAAA,gBAACxC,OAAA;QAAgByC,IAAI,EAAE,CAACP,IAAI,GAAC,GAAG,EAAE,EAAE;MAAE;QAAAQ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eAAA7C,OAAA;QAAmB8C,KAAK,EAAC;MAAK;QAAAJ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAO,CAAC;EAAE;EACrW,mBAAM7C,OAAA;IAAOuC,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,KAAK,CAAE;IAAAC,QAAA,gBAACxC,OAAA;MAAAwC,QAAA,gBAAMxC,OAAA;QAAgByC,IAAI,EAAE,CAACP,IAAI,GAAC,CAAC,EAAE,EAAE;MAAE;QAAAQ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eAAA7C,OAAA;QAAmB8C,KAAK,EAAC;MAAM;QAAAJ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC,eAAA7C,OAAA;MAAMuC,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,KAAK,CAAE;MAAAC,QAAA,gBAACxC,OAAA;QAAgByC,IAAI,EAAE,CAACP,IAAI,GAAC,IAAI,EAAE,EAAE;MAAE;QAAAQ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eAAA7C,OAAA;QAAmB8C,KAAK,EAAC;MAAO;QAAAJ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC,eAAA7C,OAAA;MAAMuC,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,KAAK,CAAE;MAAAC,QAAA,gBAACxC,OAAA;QAAgByC,IAAI,EAAE,CAACP,IAAI,GAAC,GAAG,EAAE,EAAE;MAAE;QAAAQ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eAAA7C,OAAA;QAAmB8C,KAAK,EAAC;MAAM;QAAAJ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAO,CAAC;EAAE;EACvW,mBAAM7C,OAAA;IAAOuC,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,KAAK,CAAE;IAAAC,QAAA,gBAACxC,OAAA;MAAAwC,QAAA,gBAAMxC,OAAA;QAAgByC,IAAI,EAAE,CAACP,IAAI,GAAC,CAAC,EAAE,EAAE;MAAE;QAAAQ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eAAA7C,OAAA;QAAmB8C,KAAK,EAAC;MAAO;QAAAJ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC,eAAA7C,OAAA;MAAMuC,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,KAAK,CAAE;MAAAC,QAAA,gBAACxC,OAAA;QAAgByC,IAAI,EAAE,CAACP,IAAI,GAAC,IAAI,EAAE,EAAE;MAAE;QAAAQ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eAAA7C,OAAA;QAAmB8C,KAAK,EAAC;MAAO;QAAAJ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC,eAAA7C,OAAA;MAAMuC,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,KAAK,CAAE;MAAAC,QAAA,gBAACxC,OAAA;QAAgByC,IAAI,EAAE,CAACP,IAAI,GAAC,GAAG,EAAE,EAAE;MAAE;QAAAQ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eAAA7C,OAAA;QAAmB8C,KAAK,EAAC;MAAO;QAAAJ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAO,CAAC;EAAE;EACzW,mBAAM7C,OAAA;IAAOuC,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,KAAK,CAAE;IAAAC,QAAA,gBAACxC,OAAA;MAAAwC,QAAA,gBAAMxC,OAAA;QAAgByC,IAAI,EAAE,CAACP,IAAI,GAAC,CAAC,EAAE,EAAE;MAAE;QAAAQ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eAAA7C,OAAA;QAAmB8C,KAAK,EAAC;MAAQ;QAAAJ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC,eAAA7C,OAAA;MAAMuC,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,KAAK,CAAE;MAAAC,QAAA,gBAACxC,OAAA;QAAgByC,IAAI,EAAE,CAACP,IAAI,GAAC,IAAI,EAAE,EAAE;MAAE;QAAAQ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eAAA7C,OAAA;QAAmB8C,KAAK,EAAC;MAAO;QAAAJ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC,eAAA7C,OAAA;MAAMuC,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,KAAK,CAAE;MAAAC,QAAA,gBAACxC,OAAA;QAAgByC,IAAI,EAAE,CAACP,IAAI,GAAC,GAAG,EAAE,EAAE;MAAE;QAAAQ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eAAA7C,OAAA;QAAmB8C,KAAK,EAAC;MAAQ;QAAAJ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAO,CAAC;EAAE;EAC3W,mBAAM7C,OAAA;IAAOuC,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,KAAK,CAAE;IAAAC,QAAA,gBAACxC,OAAA;MAAAwC,QAAA,gBAAMxC,OAAA;QAAgByC,IAAI,EAAE,CAACP,IAAI,GAAC,CAAC,EAAE,EAAE;MAAE;QAAAQ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eAAA7C,OAAA;QAAmB8C,KAAK,EAAC;MAAQ;QAAAJ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC,eAAA7C,OAAA;MAAMuC,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,KAAK,CAAE;MAAAC,QAAA,gBAACxC,OAAA;QAAgByC,IAAI,EAAE,CAACP,IAAI,GAAC,IAAI,EAAE,EAAE;MAAE;QAAAQ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eAAA7C,OAAA;QAAmB8C,KAAK,EAAC;MAAO;QAAAJ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC,eAAA7C,OAAA;MAAMuC,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,KAAK,CAAE;MAAAC,QAAA,gBAACxC,OAAA;QAAgByC,IAAI,EAAE,CAACP,IAAI,GAAC,GAAG,EAAE,EAAE;MAAE;QAAAQ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eAAA7C,OAAA;QAAmB8C,KAAK,EAAC;MAAQ;QAAAJ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAO,CAAC;EAAE;;EAE3W;EACA,mBAAM7C,OAAA;IAAOuC,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,KAAK,CAAE;IAAAC,QAAA,gBAACxC,OAAA;MAAM+C,QAAQ,EAAE,CAACC,IAAI,CAACC,EAAE,GAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAE;MAAAT,QAAA,gBAACxC,OAAA;QAAcyC,IAAI,EAAE,CAACP,IAAI,GAAC,CAAC,EAAE,IAAI,EAAE,CAAC;MAAE;QAAAQ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eAAA7C,OAAA;QAAmB8C,KAAK,EAAC;MAAM;QAAAJ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC,eAAA7C,OAAA;MAAMuC,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,KAAK,CAAE;MAACQ,QAAQ,EAAE,CAACC,IAAI,CAACC,EAAE,GAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAE;MAAAT,QAAA,gBAACxC,OAAA;QAAcyC,IAAI,EAAE,CAACP,IAAI,GAAC,IAAI,EAAE,IAAI,EAAE,CAAC;MAAE;QAAAQ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eAAA7C,OAAA;QAAmB8C,KAAK,EAAC;MAAO;QAAAJ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC,eAAA7C,OAAA;MAAMuC,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,KAAK,CAAE;MAACQ,QAAQ,EAAE,CAACC,IAAI,CAACC,EAAE,GAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAE;MAAAT,QAAA,gBAACxC,OAAA;QAAcyC,IAAI,EAAE,CAACP,IAAI,GAAC,GAAG,EAAE,IAAI,EAAE,CAAC;MAAE;QAAAQ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eAAA7C,OAAA;QAAmB8C,KAAK,EAAC;MAAM;QAAAJ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAO,CAAC;EAAE;EACvc,mBAAM7C,OAAA;IAAOuC,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,KAAK,CAAE;IAAAC,QAAA,gBAACxC,OAAA;MAAM+C,QAAQ,EAAE,CAACC,IAAI,CAACC,EAAE,GAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAE;MAAAT,QAAA,gBAACxC,OAAA;QAAcyC,IAAI,EAAE,CAACP,IAAI,GAAC,CAAC,EAAE,IAAI,EAAE,CAAC;MAAE;QAAAQ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eAAA7C,OAAA;QAAmB8C,KAAK,EAAC;MAAS;QAAAJ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC,eAAA7C,OAAA;MAAMuC,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,KAAK,CAAE;MAACQ,QAAQ,EAAE,CAACC,IAAI,CAACC,EAAE,GAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAE;MAAAT,QAAA,gBAACxC,OAAA;QAAcyC,IAAI,EAAE,CAACP,IAAI,GAAC,IAAI,EAAE,IAAI,EAAE,CAAC;MAAE;QAAAQ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eAAA7C,OAAA;QAAmB8C,KAAK,EAAC;MAAO;QAAAJ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC,eAAA7C,OAAA;MAAMuC,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,KAAK,CAAE;MAACQ,QAAQ,EAAE,CAACC,IAAI,CAACC,EAAE,GAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAE;MAAAT,QAAA,gBAACxC,OAAA;QAAcyC,IAAI,EAAE,CAACP,IAAI,GAAC,GAAG,EAAE,IAAI,EAAE,CAAC;MAAE;QAAAQ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eAAA7C,OAAA;QAAmB8C,KAAK,EAAC;MAAS;QAAAJ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAO,CAAC;EAAE;EAC7c,mBAAM7C,OAAA;IAAOuC,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,KAAK,CAAE;IAAAC,QAAA,gBAACxC,OAAA;MAAM+C,QAAQ,EAAE,CAACC,IAAI,CAACC,EAAE,GAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAE;MAAAT,QAAA,gBAACxC,OAAA;QAAcyC,IAAI,EAAE,CAACP,IAAI,GAAC,CAAC,EAAE,IAAI,EAAE,CAAC;MAAE;QAAAQ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eAAA7C,OAAA;QAAmB8C,KAAK,EAAC;MAAM;QAAAJ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC,eAAA7C,OAAA;MAAMuC,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,KAAK,CAAE;MAACQ,QAAQ,EAAE,CAACC,IAAI,CAACC,EAAE,GAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAE;MAAAT,QAAA,gBAACxC,OAAA;QAAcyC,IAAI,EAAE,CAACP,IAAI,GAAC,IAAI,EAAE,IAAI,EAAE,CAAC;MAAE;QAAAQ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eAAA7C,OAAA;QAAmB8C,KAAK,EAAC;MAAO;QAAAJ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC,eAAA7C,OAAA;MAAMuC,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,KAAK,CAAE;MAACQ,QAAQ,EAAE,CAACC,IAAI,CAACC,EAAE,GAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAE;MAAAT,QAAA,gBAACxC,OAAA;QAAcyC,IAAI,EAAE,CAACP,IAAI,GAAC,GAAG,EAAE,IAAI,EAAE,CAAC;MAAE;QAAAQ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eAAA7C,OAAA;QAAmB8C,KAAK,EAAC;MAAM;QAAAJ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAO,CAAC;EAAE;EACvc,mBAAM7C,OAAA;IAAOuC,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,KAAK,CAAE;IAAAC,QAAA,gBAACxC,OAAA;MAAM+C,QAAQ,EAAE,CAACC,IAAI,CAACC,EAAE,GAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAE;MAAAT,QAAA,gBAACxC,OAAA;QAAcyC,IAAI,EAAE,CAACP,IAAI,GAAC,CAAC,EAAE,IAAI,EAAE,CAAC;MAAE;QAAAQ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eAAA7C,OAAA;QAAmB8C,KAAK,EAAC;MAAM;QAAAJ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC,eAAA7C,OAAA;MAAMuC,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,KAAK,CAAE;MAACQ,QAAQ,EAAE,CAACC,IAAI,CAACC,EAAE,GAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAE;MAAAT,QAAA,gBAACxC,OAAA;QAAcyC,IAAI,EAAE,CAACP,IAAI,GAAC,IAAI,EAAE,IAAI,EAAE,CAAC;MAAE;QAAAQ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eAAA7C,OAAA;QAAmB8C,KAAK,EAAC;MAAO;QAAAJ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC,eAAA7C,OAAA;MAAMuC,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,KAAK,CAAE;MAACQ,QAAQ,EAAE,CAACC,IAAI,CAACC,EAAE,GAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAE;MAAAT,QAAA,gBAACxC,OAAA;QAAcyC,IAAI,EAAE,CAACP,IAAI,GAAC,GAAG,EAAE,IAAI,EAAE,CAAC;MAAE;QAAAQ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eAAA7C,OAAA;QAAmB8C,KAAK,EAAC;MAAM;QAAAJ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAO,CAAC;EAAE;EACvc,mBAAM7C,OAAA;IAAOuC,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,KAAK,CAAE;IAAAC,QAAA,gBAACxC,OAAA;MAAM+C,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,EAAEC,IAAI,CAACC,EAAE,GAAC,CAAC,CAAE;MAAAT,QAAA,gBAACxC,OAAA;QAAeyC,IAAI,EAAE,CAACP,IAAI,EAAEA,IAAI;MAAE;QAAAQ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eAAA7C,OAAA;QAAmB8C,KAAK,EAAC;MAAQ;QAAAJ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC,eAAA7C,OAAA;MAAMuC,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,KAAK,CAAE;MAACQ,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,EAAEC,IAAI,CAACC,EAAE,GAAC,CAAC,CAAE;MAAAT,QAAA,gBAACxC,OAAA;QAAeyC,IAAI,EAAE,CAACP,IAAI,GAAC,IAAI,EAAEA,IAAI,GAAC,IAAI;MAAE;QAAAQ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eAAA7C,OAAA;QAAmB8C,KAAK,EAAC;MAAO;QAAAJ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC,eAAA7C,OAAA;MAAMuC,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,KAAK,CAAE;MAACQ,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,EAAEC,IAAI,CAACC,EAAE,GAAC,CAAC,CAAE;MAAAT,QAAA,gBAACxC,OAAA;QAAeyC,IAAI,EAAE,CAACP,IAAI,GAAC,GAAG,EAAEA,IAAI,GAAC,GAAG;MAAE;QAAAQ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eAAA7C,OAAA;QAAmB8C,KAAK,EAAC;MAAQ;QAAAJ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAO,CAAC;EAAE;;EAE5c;EACA,mBAAM7C,OAAA;IAAOuC,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,KAAK,CAAE;IAAAC,QAAA,gBAACxC,OAAA;MAAM+C,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,EAAEC,IAAI,CAACC,EAAE,GAAC,CAAC,CAAE;MAAAT,QAAA,gBAACxC,OAAA;QAAeyC,IAAI,EAAE,CAACP,IAAI,EAAEA,IAAI;MAAE;QAAAQ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eAAA7C,OAAA;QAAmB8C,KAAK,EAAC;MAAK;QAAAJ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC,eAAA7C,OAAA;MAAMuC,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,KAAK,CAAE;MAACQ,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,EAAEC,IAAI,CAACC,EAAE,GAAC,CAAC,CAAE;MAAAT,QAAA,gBAACxC,OAAA;QAAeyC,IAAI,EAAE,CAACP,IAAI,GAAC,IAAI,EAAEA,IAAI,GAAC,IAAI;MAAE;QAAAQ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eAAA7C,OAAA;QAAmB8C,KAAK,EAAC;MAAO;QAAAJ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC,eAAA7C,OAAA;MAAMuC,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,KAAK,CAAE;MAACQ,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,EAAEC,IAAI,CAACC,EAAE,GAAC,CAAC,CAAE;MAAAT,QAAA,gBAACxC,OAAA;QAAeyC,IAAI,EAAE,CAACP,IAAI,GAAC,GAAG,EAAEA,IAAI,GAAC,GAAG;MAAE;QAAAQ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eAAA7C,OAAA;QAAmB8C,KAAK,EAAC;MAAK;QAAAJ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAO,CAAC;EAAE;EACtc,mBAAM7C,OAAA;IAAOuC,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,KAAK,CAAE;IAAAC,QAAA,gBAACxC,OAAA;MAAM+C,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,EAAEC,IAAI,CAACC,EAAE,GAAC,CAAC,CAAE;MAAAT,QAAA,gBAACxC,OAAA;QAAeyC,IAAI,EAAE,CAACP,IAAI,EAAEA,IAAI;MAAE;QAAAQ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eAAA7C,OAAA;QAAmB8C,KAAK,EAAC;MAAM;QAAAJ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC,eAAA7C,OAAA;MAAMuC,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,KAAK,CAAE;MAACQ,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,EAAEC,IAAI,CAACC,EAAE,GAAC,CAAC,CAAE;MAAAT,QAAA,gBAACxC,OAAA;QAAeyC,IAAI,EAAE,CAACP,IAAI,GAAC,IAAI,EAAEA,IAAI,GAAC,IAAI;MAAE;QAAAQ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eAAA7C,OAAA;QAAmB8C,KAAK,EAAC;MAAO;QAAAJ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC,eAAA7C,OAAA;MAAMuC,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,KAAK,CAAE;MAACQ,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,EAAEC,IAAI,CAACC,EAAE,GAAC,CAAC,CAAE;MAAAT,QAAA,gBAACxC,OAAA;QAAeyC,IAAI,EAAE,CAACP,IAAI,GAAC,GAAG,EAAEA,IAAI,GAAC,GAAG;MAAE;QAAAQ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eAAA7C,OAAA;QAAmB8C,KAAK,EAAC;MAAM;QAAAJ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAO,CAAC;EAAE;EACxc,mBAAM7C,OAAA;IAAOuC,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,KAAK,CAAE;IAAAC,QAAA,gBAACxC,OAAA;MAAM+C,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,EAAEC,IAAI,CAACC,EAAE,GAAC,CAAC,CAAE;MAAAT,QAAA,gBAACxC,OAAA;QAAeyC,IAAI,EAAE,CAACP,IAAI,EAAEA,IAAI;MAAE;QAAAQ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eAAA7C,OAAA;QAAmB8C,KAAK,EAAC;MAAO;QAAAJ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC,eAAA7C,OAAA;MAAMuC,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,KAAK,CAAE;MAACQ,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,EAAEC,IAAI,CAACC,EAAE,GAAC,CAAC,CAAE;MAAAT,QAAA,gBAACxC,OAAA;QAAeyC,IAAI,EAAE,CAACP,IAAI,GAAC,IAAI,EAAEA,IAAI,GAAC,IAAI;MAAE;QAAAQ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eAAA7C,OAAA;QAAmB8C,KAAK,EAAC;MAAO;QAAAJ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC,eAAA7C,OAAA;MAAMuC,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,KAAK,CAAE;MAACQ,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,EAAEC,IAAI,CAACC,EAAE,GAAC,CAAC,CAAE;MAAAT,QAAA,gBAACxC,OAAA;QAAeyC,IAAI,EAAE,CAACP,IAAI,GAAC,GAAG,EAAEA,IAAI,GAAC,GAAG;MAAE;QAAAQ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eAAA7C,OAAA;QAAmB8C,KAAK,EAAC;MAAO;QAAAJ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAO,CAAC;EAAE;EAC1c,mBAAM7C,OAAA;IAAOuC,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,KAAK,CAAE;IAAAC,QAAA,gBAACxC,OAAA;MAAM+C,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,EAAEC,IAAI,CAACC,EAAE,GAAC,CAAC,CAAE;MAAAT,QAAA,gBAACxC,OAAA;QAAeyC,IAAI,EAAE,CAACP,IAAI,EAAEA,IAAI;MAAE;QAAAQ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eAAA7C,OAAA;QAAmB8C,KAAK,EAAC;MAAQ;QAAAJ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC,eAAA7C,OAAA;MAAMuC,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,KAAK,CAAE;MAACQ,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,EAAEC,IAAI,CAACC,EAAE,GAAC,CAAC,CAAE;MAAAT,QAAA,gBAACxC,OAAA;QAAeyC,IAAI,EAAE,CAACP,IAAI,GAAC,IAAI,EAAEA,IAAI,GAAC,IAAI;MAAE;QAAAQ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eAAA7C,OAAA;QAAmB8C,KAAK,EAAC;MAAO;QAAAJ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC,eAAA7C,OAAA;MAAMuC,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,KAAK,CAAE;MAACQ,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,EAAEC,IAAI,CAACC,EAAE,GAAC,CAAC,CAAE;MAAAT,QAAA,gBAACxC,OAAA;QAAeyC,IAAI,EAAE,CAACP,IAAI,GAAC,GAAG,EAAEA,IAAI,GAAC,GAAG;MAAE;QAAAQ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eAAA7C,OAAA;QAAmB8C,KAAK,EAAC;MAAQ;QAAAJ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAO,CAAC;EAAE;EAC5c,mBAAM7C,OAAA;IAAOuC,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,KAAK,CAAE;IAAAC,QAAA,gBAACxC,OAAA;MAAM+C,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,EAAEC,IAAI,CAACC,EAAE,GAAC,CAAC,CAAE;MAAAT,QAAA,gBAACxC,OAAA;QAAeyC,IAAI,EAAE,CAACP,IAAI,EAAEA,IAAI;MAAE;QAAAQ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eAAA7C,OAAA;QAAmB8C,KAAK,EAAC;MAAQ;QAAAJ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC,eAAA7C,OAAA;MAAMuC,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,KAAK,CAAE;MAACQ,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,EAAEC,IAAI,CAACC,EAAE,GAAC,CAAC,CAAE;MAAAT,QAAA,gBAACxC,OAAA;QAAeyC,IAAI,EAAE,CAACP,IAAI,GAAC,IAAI,EAAEA,IAAI,GAAC,IAAI;MAAE;QAAAQ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eAAA7C,OAAA;QAAmB8C,KAAK,EAAC;MAAO;QAAAJ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC,eAAA7C,OAAA;MAAMuC,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,KAAK,CAAE;MAACQ,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,EAAEC,IAAI,CAACC,EAAE,GAAC,CAAC,CAAE;MAAAT,QAAA,gBAACxC,OAAA;QAAeyC,IAAI,EAAE,CAACP,IAAI,GAAC,GAAG,EAAEA,IAAI,GAAC,GAAG;MAAE;QAAAQ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eAAA7C,OAAA;QAAmB8C,KAAK,EAAC;MAAQ;QAAAJ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAO,CAAC;EAAE;;EAE5c;EACA,mBAAM7C,OAAA;IAAOuC,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,KAAK,CAAE;IAAAC,QAAA,gBAACxC,OAAA;MAAM+C,QAAQ,EAAE,CAACC,IAAI,CAACC,EAAE,GAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAE;MAAAT,QAAA,gBAACxC,OAAA;QAAcyC,IAAI,EAAE,CAACP,IAAI,GAAC,CAAC,EAAE,IAAI,EAAE,CAAC;MAAE;QAAAQ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eAAA7C,OAAA;QAAmB8C,KAAK,EAAC;MAAM;QAAAJ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC,eAAA7C,OAAA;MAAMuC,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,KAAK,CAAE;MAACQ,QAAQ,EAAE,CAACC,IAAI,CAACC,EAAE,GAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAE;MAAAT,QAAA,gBAACxC,OAAA;QAAcyC,IAAI,EAAE,CAACP,IAAI,GAAC,IAAI,EAAE,IAAI,EAAE,CAAC;MAAE;QAAAQ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eAAA7C,OAAA;QAAmB8C,KAAK,EAAC;MAAO;QAAAJ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC,eAAA7C,OAAA;MAAMuC,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,KAAK,CAAE;MAACQ,QAAQ,EAAE,CAACC,IAAI,CAACC,EAAE,GAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAE;MAAAT,QAAA,gBAACxC,OAAA;QAAcyC,IAAI,EAAE,CAACP,IAAI,GAAC,GAAG,EAAE,IAAI,EAAE,CAAC;MAAE;QAAAQ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eAAA7C,OAAA;QAAmB8C,KAAK,EAAC;MAAM;QAAAJ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAO,CAAC;EAAE;EACvc,mBAAM7C,OAAA;IAAOuC,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,KAAK,CAAE;IAAAC,QAAA,gBAACxC,OAAA;MAAM+C,QAAQ,EAAE,CAACC,IAAI,CAACC,EAAE,GAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAE;MAAAT,QAAA,gBAACxC,OAAA;QAAcyC,IAAI,EAAE,CAACP,IAAI,GAAC,CAAC,EAAE,IAAI,EAAE,CAAC;MAAE;QAAAQ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eAAA7C,OAAA;QAAmB8C,KAAK,EAAC;MAAS;QAAAJ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC,eAAA7C,OAAA;MAAMuC,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,KAAK,CAAE;MAACQ,QAAQ,EAAE,CAACC,IAAI,CAACC,EAAE,GAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAE;MAAAT,QAAA,gBAACxC,OAAA;QAAcyC,IAAI,EAAE,CAACP,IAAI,GAAC,IAAI,EAAE,IAAI,EAAE,CAAC;MAAE;QAAAQ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eAAA7C,OAAA;QAAmB8C,KAAK,EAAC;MAAO;QAAAJ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC,eAAA7C,OAAA;MAAMuC,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,KAAK,CAAE;MAACQ,QAAQ,EAAE,CAACC,IAAI,CAACC,EAAE,GAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAE;MAAAT,QAAA,gBAACxC,OAAA;QAAcyC,IAAI,EAAE,CAACP,IAAI,GAAC,GAAG,EAAE,IAAI,EAAE,CAAC;MAAE;QAAAQ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eAAA7C,OAAA;QAAmB8C,KAAK,EAAC;MAAS;QAAAJ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAO,CAAC;EAAE;EAC7c,mBAAM7C,OAAA;IAAOuC,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,KAAK,CAAE;IAAAC,QAAA,gBAACxC,OAAA;MAAM+C,QAAQ,EAAE,CAACC,IAAI,CAACC,EAAE,GAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAE;MAAAT,QAAA,gBAACxC,OAAA;QAAcyC,IAAI,EAAE,CAACP,IAAI,GAAC,CAAC,EAAE,IAAI,EAAE,CAAC;MAAE;QAAAQ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eAAA7C,OAAA;QAAmB8C,KAAK,EAAC;MAAM;QAAAJ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC,eAAA7C,OAAA;MAAMuC,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,KAAK,CAAE;MAACQ,QAAQ,EAAE,CAACC,IAAI,CAACC,EAAE,GAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAE;MAAAT,QAAA,gBAACxC,OAAA;QAAcyC,IAAI,EAAE,CAACP,IAAI,GAAC,IAAI,EAAE,IAAI,EAAE,CAAC;MAAE;QAAAQ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eAAA7C,OAAA;QAAmB8C,KAAK,EAAC;MAAO;QAAAJ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC,eAAA7C,OAAA;MAAMuC,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,KAAK,CAAE;MAACQ,QAAQ,EAAE,CAACC,IAAI,CAACC,EAAE,GAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAE;MAAAT,QAAA,gBAACxC,OAAA;QAAcyC,IAAI,EAAE,CAACP,IAAI,GAAC,GAAG,EAAE,IAAI,EAAE,CAAC;MAAE;QAAAQ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eAAA7C,OAAA;QAAmB8C,KAAK,EAAC;MAAM;QAAAJ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAO,CAAC;EAAE;EACvc,mBAAM7C,OAAA;IAAOuC,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,KAAK,CAAE;IAAAC,QAAA,gBAACxC,OAAA;MAAM+C,QAAQ,EAAE,CAACC,IAAI,CAACC,EAAE,GAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAE;MAAAT,QAAA,gBAACxC,OAAA;QAAcyC,IAAI,EAAE,CAACP,IAAI,GAAC,CAAC,EAAE,IAAI,EAAE,CAAC;MAAE;QAAAQ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eAAA7C,OAAA;QAAmB8C,KAAK,EAAC;MAAM;QAAAJ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC,eAAA7C,OAAA;MAAMuC,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,KAAK,CAAE;MAACQ,QAAQ,EAAE,CAACC,IAAI,CAACC,EAAE,GAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAE;MAAAT,QAAA,gBAACxC,OAAA;QAAcyC,IAAI,EAAE,CAACP,IAAI,GAAC,IAAI,EAAE,IAAI,EAAE,CAAC;MAAE;QAAAQ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eAAA7C,OAAA;QAAmB8C,KAAK,EAAC;MAAO;QAAAJ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC,eAAA7C,OAAA;MAAMuC,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,KAAK,CAAE;MAACQ,QAAQ,EAAE,CAACC,IAAI,CAACC,EAAE,GAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAE;MAAAT,QAAA,gBAACxC,OAAA;QAAcyC,IAAI,EAAE,CAACP,IAAI,GAAC,GAAG,EAAE,IAAI,EAAE,CAAC;MAAE;QAAAQ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eAAA7C,OAAA;QAAmB8C,KAAK,EAAC;MAAM;QAAAJ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAO,CAAC;EAAE;EACvc,mBAAM7C,OAAA;IAAOuC,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,KAAK,CAAE;IAAAC,QAAA,gBAACxC,OAAA;MAAM+C,QAAQ,EAAE,CAACC,IAAI,CAACC,EAAE,GAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAE;MAAAT,QAAA,gBAACxC,OAAA;QAAcyC,IAAI,EAAE,CAACP,IAAI,GAAC,CAAC,EAAE,IAAI,EAAE,CAAC;MAAE;QAAAQ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eAAA7C,OAAA;QAAmB8C,KAAK,EAAC;MAAQ;QAAAJ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC,eAAA7C,OAAA;MAAMuC,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,KAAK,CAAE;MAACQ,QAAQ,EAAE,CAACC,IAAI,CAACC,EAAE,GAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAE;MAAAT,QAAA,gBAACxC,OAAA;QAAcyC,IAAI,EAAE,CAACP,IAAI,GAAC,IAAI,EAAE,IAAI,EAAE,CAAC;MAAE;QAAAQ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eAAA7C,OAAA;QAAmB8C,KAAK,EAAC;MAAO;QAAAJ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC,eAAA7C,OAAA;MAAMuC,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,KAAK,CAAE;MAACQ,QAAQ,EAAE,CAACC,IAAI,CAACC,EAAE,GAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAE;MAAAT,QAAA,gBAACxC,OAAA;QAAcyC,IAAI,EAAE,CAACP,IAAI,GAAC,GAAG,EAAE,IAAI,EAAE,CAAC;MAAE;QAAAQ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eAAA7C,OAAA;QAAmB8C,KAAK,EAAC;MAAQ;QAAAJ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAO,CAAC;EAAE;EAC3c,mBAAM7C,OAAA;IAAOuC,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,KAAK,CAAE;IAAAC,QAAA,gBAACxC,OAAA;MAAM+C,QAAQ,EAAE,CAACC,IAAI,CAACC,EAAE,GAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAE;MAAAT,QAAA,gBAACxC,OAAA;QAAcyC,IAAI,EAAE,CAACP,IAAI,GAAC,CAAC,EAAE,IAAI,EAAE,CAAC;MAAE;QAAAQ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eAAA7C,OAAA;QAAmB8C,KAAK,EAAC;MAAQ;QAAAJ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC,eAAA7C,OAAA;MAAMuC,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,KAAK,CAAE;MAACQ,QAAQ,EAAE,CAACC,IAAI,CAACC,EAAE,GAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAE;MAAAT,QAAA,gBAACxC,OAAA;QAAcyC,IAAI,EAAE,CAACP,IAAI,GAAC,IAAI,EAAE,IAAI,EAAE,CAAC;MAAE;QAAAQ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eAAA7C,OAAA;QAAmB8C,KAAK,EAAC;MAAO;QAAAJ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC,eAAA7C,OAAA;MAAMuC,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,KAAK,CAAE;MAACQ,QAAQ,EAAE,CAACC,IAAI,CAACC,EAAE,GAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAE;MAAAT,QAAA,gBAACxC,OAAA;QAAcyC,IAAI,EAAE,CAACP,IAAI,GAAC,GAAG,EAAE,IAAI,EAAE,CAAC;MAAE;QAAAQ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eAAA7C,OAAA;QAAmB8C,KAAK,EAAC;MAAQ;QAAAJ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAO,CAAC,CAAC;EAAA,CAC3c;EAED,MAAMK,UAAU,GAAGjB,OAAO,CAAC,CAAC;EAC5B,OAAOK,MAAM,CAACY,UAAU,CAAC,CAAC,CAAC;AAC7B;;AAEA;AACA,SAASE,SAASA,CAAC;EAAEb,QAAQ;EAAEc,MAAM;EAAEnB,IAAI,GAAG,IAAI;EAAED,OAAO,GAAG,CAAC;EAAEqB,aAAa,GAAG,KAAK;EAAEC,aAAa,GAAG,IAAI;EAAEC,YAAY,GAAG,IAAI;EAAEC,gBAAgB,GAAG;AAAE,CAAC,EAAE;EAAAC,EAAA;EACzJ,MAAMC,OAAO,GAAGrE,MAAM,CAAC,CAAC;EACxB,MAAMsE,QAAQ,GAAGtE,MAAM,CAAC,CAAC;;EAEzB;EACAF,KAAK,CAACK,SAAS,CAAC,MAAM;IACpB,MAAMoE,UAAU,GAAG,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,CAAC;IACjT,MAAMC,WAAW,GAAG,CAAC,KAAK,EAAE,MAAM,EAAE,OAAO,EAAE,QAAQ,EAAE,QAAQ,EAAE,KAAK,EAAE,MAAM,EAAE,OAAO,EAAE,QAAQ,EAAE,QAAQ,EAAE,MAAM,EAAE,SAAS,EAAE,MAAM,EAAE,MAAM,EAAE,QAAQ,EAAE,KAAK,EAAE,MAAM,EAAE,OAAO,EAAE,QAAQ,EAAE,QAAQ,EAAE,MAAM,EAAE,SAAS,EAAE,MAAM,EAAE,MAAM,EAAE,QAAQ,EAAE,QAAQ,CAAC;IAE5P,MAAMC,SAAS,GAAGF,UAAU,CAAC5B,OAAO,CAAC,IAAI,SAAS,CAAC,CAAC;IACpD,MAAM+B,UAAU,GAAGF,WAAW,CAAC7B,OAAO,CAAC,IAAI,SAAS,CAAC,CAAC;;IAEtD;IACA,IAAIA,OAAO,KAAK,CAAC,IAAIA,OAAO,KAAK,EAAE,IAAIA,OAAO,KAAK,EAAE,IAAIA,OAAO,KAAK,CAAC,IAAIA,OAAO,KAAK,EAAE,EAAE;MACxFhC,OAAO,CAACC,GAAG,CAAC,MAAM8D,UAAU,IAAID,SAAS,UAAU9B,OAAO,iBAAiBM,QAAQ,CAAC0B,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC;MAClGhE,OAAO,CAACC,GAAG,CAAC,kBAAkB,EAAEmD,MAAM,CAAC;;MAEvC;MACA,MAAM,CAACa,CAAC,EAAEC,CAAC,EAAEC,CAAC,CAAC,GAAG7B,QAAQ;MAC1B,MAAM8B,YAAY,GAAG,EAAE;MACvB,IAAIH,CAAC,KAAK,CAAC,EAAEG,YAAY,CAACC,IAAI,CAAC,OAAO,CAAC;MACvC,IAAIJ,CAAC,KAAK,CAAC,CAAC,EAAEG,YAAY,CAACC,IAAI,CAAC,MAAM,CAAC;MACvC,IAAIH,CAAC,KAAK,CAAC,EAAEE,YAAY,CAACC,IAAI,CAAC,KAAK,CAAC;MACrC,IAAIH,CAAC,KAAK,CAAC,CAAC,EAAEE,YAAY,CAACC,IAAI,CAAC,QAAQ,CAAC;MACzC,IAAIF,CAAC,KAAK,CAAC,EAAEC,YAAY,CAACC,IAAI,CAAC,OAAO,CAAC;MACvC,IAAIF,CAAC,KAAK,CAAC,CAAC,EAAEC,YAAY,CAACC,IAAI,CAAC,MAAM,CAAC;MAEvCrE,OAAO,CAACC,GAAG,CAAC,kBAAkB,EAAEmE,YAAY,CAAC;MAC7CpE,OAAO,CAACC,GAAG,CAAC,4BAA4B,EAAEmE,YAAY,CAACE,GAAG,CAAClE,IAAI,IAAI,GAAGA,IAAI,KAAKgD,MAAM,CAAChD,IAAI,CAAC,EAAE,CAAC,CAAC;IACjG;EACF,CAAC,EAAE,CAAC4B,OAAO,EAAEM,QAAQ,EAAEc,MAAM,CAAC,CAAC;;EAE/B;EACA,MAAMmB,QAAQ,GAAG;IACf,OAAO,EAAE,SAAS;IAClB,QAAQ,EAAE,SAAS;IACnB,KAAK,EAAE,SAAS;IAAE;IAClB,QAAQ,EAAE,SAAS;IAAE;IACrB,MAAM,EAAE,SAAS;IACjB,OAAO,EAAE,SAAS;IAClB,QAAQ,EAAE,SAAS;IACnB,MAAM,EAAE,SAAS;IACjB,SAAS,EAAE,SAAS;IACpB,MAAM,EAAE,SAAS;IACjB,MAAM,EAAE,SAAS;IACjB,OAAO,EAAE,SAAS,CAAC;EACrB,CAAC;;EAED;EACA,MAAMC,YAAY,GAAGlF,OAAO,CAAC,MAAM,IAAIO,KAAK,CAAC4E,WAAW,CAACxC,IAAI,EAAEA,IAAI,EAAEA,IAAI,CAAC,EAAE,CAACA,IAAI,CAAC,CAAC;;EAEnF;EACA,MAAMyC,YAAY,GAAGpF,OAAO,CAAC,MAAM;IACjC,MAAMqF,QAAQ,GAAG,IAAI9E,KAAK,CAAC+E,aAAa,CAAC3C,IAAI,EAAEA,IAAI,CAAC;IACpD,OAAO0C,QAAQ;EACjB,CAAC,EAAE,CAAC1C,IAAI,CAAC,CAAC;;EAEV;EACA,MAAM4C,YAAY,GAAI3C,SAAS,IAAK;IAClC;IACA,QAAQA,SAAS;MACf,KAAK,CAAC;QAAE,OAAOkB,MAAM,CAAC0B,KAAK;MAC3B,KAAK,CAAC;QAAE,OAAO1B,MAAM,CAAC2B,IAAI;MAC1B,KAAK,CAAC;QAAE,OAAO3B,MAAM,CAAC4B,KAAK;MAC3B,KAAK,CAAC;QAAE,OAAO5B,MAAM,CAAC6B,IAAI;MAC1B,KAAK,CAAC;QAAE,OAAO7B,MAAM,CAAC8B,GAAG;MACzB,KAAK,CAAC;QAAE,OAAO9B,MAAM,CAAC+B,MAAM;MAC5B;QAAS,OAAO,OAAO;IACzB;EACF,CAAC;;EAED;EACA,MAAMC,aAAa,GAAIlD,SAAS,IAAK;IACnC,MAAM,CAAC+B,CAAC,EAAEC,CAAC,EAAEC,CAAC,CAAC,GAAG7B,QAAQ;;IAE1B;IACA,MAAM8B,YAAY,GAAG,EAAE;IACvB,IAAIH,CAAC,KAAK,CAAC,EAAEG,YAAY,CAACC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;IACnC,IAAIJ,CAAC,KAAK,CAAC,CAAC,EAAEG,YAAY,CAACC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;IACpC,IAAIH,CAAC,KAAK,CAAC,EAAEE,YAAY,CAACC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;IACnC,IAAIH,CAAC,KAAK,CAAC,CAAC,EAAEE,YAAY,CAACC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;IACpC,IAAIF,CAAC,KAAK,CAAC,EAAEC,YAAY,CAACC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;IACnC,IAAIF,CAAC,KAAK,CAAC,CAAC,EAAEC,YAAY,CAACC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;;IAEpC,OAAOD,YAAY,CAACiB,QAAQ,CAACnD,SAAS,CAAC;EACzC,CAAC;;EAED;EACA,MAAMoD,oBAAoB,GAAG/F,WAAW,CAAC,MAAM;IAC7C,IAAI,CAACgE,YAAY,EAAE,OAAO,KAAK;IAE/B,MAAM,CAACU,CAAC,EAAEC,CAAC,EAAEC,CAAC,CAAC,GAAG7B,QAAQ;IAC1B,MAAM;MAAElC;IAAK,CAAC,GAAGmD,YAAY;IAE7B,QAAQnD,IAAI;MACV,KAAK,GAAG;QAAE,OAAO+D,CAAC,KAAK,CAAC;MACxB,KAAK,GAAG;QAAE,OAAOA,CAAC,KAAK,CAAC,CAAC;MACzB,KAAK,GAAG;QAAE,OAAOF,CAAC,KAAK,CAAC;MACxB,KAAK,GAAG;QAAE,OAAOA,CAAC,KAAK,CAAC,CAAC;MACzB,KAAK,GAAG;QAAE,OAAOC,CAAC,KAAK,CAAC;MACxB,KAAK,GAAG;QAAE,OAAOA,CAAC,KAAK,CAAC,CAAC;MACzB;QAAS,OAAO,KAAK;IACvB;EACF,CAAC,EAAE,CAAC5B,QAAQ,EAAEiB,YAAY,CAAC,CAAC;;EAE5B;EACA,MAAMgC,qBAAqB,GAAGA,CAAA,KAAM;IAClC,IAAI,CAAChC,YAAY,IAAI,CAAC+B,oBAAoB,CAAC,CAAC,EAAE;MAC5C,OAAO;QAAErB,CAAC,EAAE,CAAC;QAAEC,CAAC,EAAE,CAAC;QAAEC,CAAC,EAAE;MAAE,CAAC;IAC7B;IAEA,MAAM;MAAE/D,IAAI;MAAEC;IAAU,CAAC,GAAGkD,YAAY;IACxC,MAAMiC,IAAI,GAAGnF,SAAS,KAAK,WAAW,GAAG,CAAC,GAAG,CAAC,CAAC;IAC/C,MAAMoF,KAAK,GAAI1C,IAAI,CAACC,EAAE,GAAG,CAAC,GAAIQ,gBAAgB,GAAGgC,IAAI,CAAC,CAAC;;IAEvD,QAAQpF,IAAI;MACV,KAAK,GAAG;QAAE,OAAO;UAAE6D,CAAC,EAAE,CAAC;UAAEC,CAAC,EAAE,CAAC;UAAEC,CAAC,EAAEsB;QAAM,CAAC;MACzC,KAAK,GAAG;QAAE,OAAO;UAAExB,CAAC,EAAE,CAAC;UAAEC,CAAC,EAAE,CAAC;UAAEC,CAAC,EAAE,CAACsB;QAAM,CAAC;MAC1C,KAAK,GAAG;QAAE,OAAO;UAAExB,CAAC,EAAEwB,KAAK;UAAEvB,CAAC,EAAE,CAAC;UAAEC,CAAC,EAAE;QAAE,CAAC;MACzC,KAAK,GAAG;QAAE,OAAO;UAAEF,CAAC,EAAE,CAACwB,KAAK;UAAEvB,CAAC,EAAE,CAAC;UAAEC,CAAC,EAAE;QAAE,CAAC;MAC1C,KAAK,GAAG;QAAE,OAAO;UAAEF,CAAC,EAAE,CAAC;UAAEC,CAAC,EAAEuB,KAAK;UAAEtB,CAAC,EAAE;QAAE,CAAC;MACzC,KAAK,GAAG;QAAE,OAAO;UAAEF,CAAC,EAAE,CAAC;UAAEC,CAAC,EAAE,CAACuB,KAAK;UAAEtB,CAAC,EAAE;QAAE,CAAC;MAC1C;QAAS,OAAO;UAAEF,CAAC,EAAE,CAAC;UAAEC,CAAC,EAAE,CAAC;UAAEC,CAAC,EAAE;QAAE,CAAC;IACtC;EACF,CAAC;;EAED;EACA;EACA,MAAMuB,sBAAsB,GAAGA,CAAA,KAAM;IACnC;IACA,OAAO;MAAEzB,CAAC,EAAE,CAAC;MAAEC,CAAC,EAAE,CAAC;MAAEC,CAAC,EAAE;IAAE,CAAC;EAC7B,CAAC;;EAID;EACA;EACA,MAAMwB,aAAa,GAAGrD,QAAQ;EAE9B,oBACEvC,OAAA;IACE6F,GAAG,EAAEjC,QAAS;IACdrB,QAAQ,EAAEqD,aAAc;IACxB7C,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAE,CAAC;IAAA;IAAAP,QAAA,gBAGrBxC,OAAA;MAAM4E,QAAQ,EAAEH,YAAa;MAAAjC,QAAA,eAC3BxC,OAAA;QACE8C,KAAK,EAAEyC,oBAAoB,CAAC,CAAC,GAAG,SAAS,GAAG,SAAU;QACtDO,QAAQ,EAAEP,oBAAoB,CAAC,CAAC,GAAG,SAAS,GAAG,SAAU;QACzDQ,iBAAiB,EAAER,oBAAoB,CAAC,CAAC,GAAG,GAAG,GAAG;MAAE;QAAA7C,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACrD;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACE,CAAC,EAGN,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC0B,GAAG,CAAEpC,SAAS,IAAK;MACrC;MACA,IAAI,CAACkD,aAAa,CAAClD,SAAS,CAAC,EAAE;QAC7B,OAAO,IAAI;MACb;MAEA,MAAM6D,SAAS,GAAGlB,YAAY,CAAC3C,SAAS,CAAC;;MAEzC;MACA,IAAI8D,YAAY,EAAEC,YAAY;MAE9B,QAAQ/D,SAAS;QACf,KAAK,CAAC;UAAE;UACN8D,YAAY,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE/D,IAAI,GAAC,CAAC,GAAG,KAAK,CAAC;UACrCgE,YAAY,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;UACxB;QACF,KAAK,CAAC;UAAE;UACND,YAAY,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC/D,IAAI,GAAC,CAAC,GAAG,KAAK,CAAC;UACtCgE,YAAY,GAAG,CAAC,CAAC,EAAElD,IAAI,CAACC,EAAE,EAAE,CAAC,CAAC;UAC9B;QACF,KAAK,CAAC;UAAE;UACNgD,YAAY,GAAG,CAAC/D,IAAI,GAAC,CAAC,GAAG,KAAK,EAAE,CAAC,EAAE,CAAC,CAAC;UACrCgE,YAAY,GAAG,CAAC,CAAC,EAAElD,IAAI,CAACC,EAAE,GAAC,CAAC,EAAE,CAAC,CAAC;UAChC;QACF,KAAK,CAAC;UAAE;UACNgD,YAAY,GAAG,CAAC,CAAC/D,IAAI,GAAC,CAAC,GAAG,KAAK,EAAE,CAAC,EAAE,CAAC,CAAC;UACtCgE,YAAY,GAAG,CAAC,CAAC,EAAE,CAAClD,IAAI,CAACC,EAAE,GAAC,CAAC,EAAE,CAAC,CAAC;UACjC;QACF,KAAK,CAAC;UAAE;UACNgD,YAAY,GAAG,CAAC,CAAC,EAAE/D,IAAI,GAAC,CAAC,GAAG,KAAK,EAAE,CAAC,CAAC;UACrCgE,YAAY,GAAG,CAAC,CAAClD,IAAI,CAACC,EAAE,GAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;UACjC;QACF,KAAK,CAAC;UAAE;UACNgD,YAAY,GAAG,CAAC,CAAC,EAAE,CAAC/D,IAAI,GAAC,CAAC,GAAG,KAAK,EAAE,CAAC,CAAC;UACtCgE,YAAY,GAAG,CAAClD,IAAI,CAACC,EAAE,GAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;UAChC;QACF;UACEgD,YAAY,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;UACxBC,YAAY,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;MAC5B;;MAEA;MACA,MAAMC,SAAS,GAAG,CAAC,OAAO,EAAE,MAAM,EAAE,OAAO,EAAE,MAAM,EAAE,KAAK,EAAE,QAAQ,CAAC;MACrE,MAAMC,eAAe,GAAGD,SAAS,CAAChE,SAAS,CAAC;MAC5C,MAAMkE,eAAe,GAAG/C,aAAa,IAAIC,aAAa,IACpDA,aAAa,CAAC+C,iBAAiB,IAC/B/C,aAAa,CAAC+C,iBAAiB,CAAChB,QAAQ,CAACc,eAAe,CAAC;;MAE3D;MACA,MAAMG,YAAY,GAAGF,eAAe,GAAG,SAAS,GAAI7B,QAAQ,CAACwB,SAAS,CAAC,IAAI,SAAU;MAErF,oBACEhG,OAAA;QAEEuC,QAAQ,EAAE0D,YAAa;QACvBlD,QAAQ,EAAEmD,YAAa;QACvBtB,QAAQ,EAAED,YAAa;QAAAnC,QAAA,eAEvBxC,OAAA;UACE8C,KAAK,EAAEyD,YAAa;UACpBC,IAAI,EAAE1G,KAAK,CAAC2G,SAAU;UACtBX,QAAQ,EAAEP,oBAAoB,CAAC,CAAC,GAAGgB,YAAY,GAAG,SAAU;UAC5DR,iBAAiB,EAAER,oBAAoB,CAAC,CAAC,GAAG,GAAG,GAAG;QAAI;UAAA7C,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACvD;MAAC,GAVGV,SAAS;QAAAO,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAWV,CAAC;IAEX,CAAC,CAAC,EAGD,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC0B,GAAG,CAAEpC,SAAS,IAAK;MACrC;MACA,IAAI,CAACkD,aAAa,CAAClD,SAAS,CAAC,EAAE;QAC7B,OAAO,IAAI;MACb;;MAEA;MACA,IAAI8D,YAAY,EAAEC,YAAY;MAE9B,QAAQ/D,SAAS;QACf,KAAK,CAAC;UAAE;UACN8D,YAAY,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE/D,IAAI,GAAC,CAAC,GAAG,KAAK,CAAC;UACrCgE,YAAY,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;UACxB;QACF,KAAK,CAAC;UAAE;UACND,YAAY,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC/D,IAAI,GAAC,CAAC,GAAG,KAAK,CAAC;UACtCgE,YAAY,GAAG,CAAC,CAAC,EAAElD,IAAI,CAACC,EAAE,EAAE,CAAC,CAAC;UAC9B;QACF,KAAK,CAAC;UAAE;UACNgD,YAAY,GAAG,CAAC/D,IAAI,GAAC,CAAC,GAAG,KAAK,EAAE,CAAC,EAAE,CAAC,CAAC;UACrCgE,YAAY,GAAG,CAAC,CAAC,EAAElD,IAAI,CAACC,EAAE,GAAC,CAAC,EAAE,CAAC,CAAC;UAChC;QACF,KAAK,CAAC;UAAE;UACNgD,YAAY,GAAG,CAAC,CAAC/D,IAAI,GAAC,CAAC,GAAG,KAAK,EAAE,CAAC,EAAE,CAAC,CAAC;UACtCgE,YAAY,GAAG,CAAC,CAAC,EAAE,CAAClD,IAAI,CAACC,EAAE,GAAC,CAAC,EAAE,CAAC,CAAC;UACjC;QACF,KAAK,CAAC;UAAE;UACNgD,YAAY,GAAG,CAAC,CAAC,EAAE/D,IAAI,GAAC,CAAC,GAAG,KAAK,EAAE,CAAC,CAAC;UACrCgE,YAAY,GAAG,CAAC,CAAClD,IAAI,CAACC,EAAE,GAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;UACjC;QACF,KAAK,CAAC;UAAE;UACNgD,YAAY,GAAG,CAAC,CAAC,EAAE,CAAC/D,IAAI,GAAC,CAAC,GAAG,KAAK,EAAE,CAAC,CAAC;UACtCgE,YAAY,GAAG,CAAClD,IAAI,CAACC,EAAE,GAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;UAChC;QACF;UACEgD,YAAY,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;UACxBC,YAAY,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;MAC5B;;MAEA;MACA,MAAMF,SAAS,GAAGlB,YAAY,CAAC3C,SAAS,CAAC;MAEzC,oBACEnC,OAAA;QAAkCuC,QAAQ,EAAE0D,YAAa;QAAClD,QAAQ,EAAEmD,YAAa;QAAA1D,QAAA,EAC9ER,yBAAyB,CAACC,OAAO,EAAEC,IAAI,GAAG,GAAG,EAAEC,SAAS;MAAC,GADhD,SAASA,SAAS,EAAE;QAAAO,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAEzB,CAAC;IAEZ,CAAC,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACG,CAAC;AAEZ;;AAEA;AAAAa,EAAA,CApRSN,SAAS;AAAAsD,EAAA,GAATtD,SAAS;AAqRlB,SAASuD,iBAAiBA,CAAC1E,OAAO,EAAE;EAClC;EACA,MAAM2E,SAAS,GAAG,EAAE;EACpB,KAAK,IAAI1C,CAAC,GAAG,CAAC,CAAC,EAAEA,CAAC,IAAI,CAAC,EAAEA,CAAC,EAAE,EAAE;IAC5B,KAAK,IAAIC,CAAC,GAAG,CAAC,CAAC,EAAEA,CAAC,IAAI,CAAC,EAAEA,CAAC,EAAE,EAAE;MAC5B,KAAK,IAAIC,CAAC,GAAG,CAAC,CAAC,EAAEA,CAAC,IAAI,CAAC,EAAEA,CAAC,EAAE,EAAE;QAC5B,IAAIF,CAAC,KAAK,CAAC,IAAIC,CAAC,KAAK,CAAC,IAAIC,CAAC,KAAK,CAAC,EAAE;QACnCwC,SAAS,CAACtC,IAAI,CAAC,CAACJ,CAAC,EAAEC,CAAC,EAAEC,CAAC,CAAC,CAAC;MAC3B;IACF;EACF;EAEA,MAAMyC,gBAAgB,GAAGD,SAAS,CAAC3E,OAAO,CAAC;EAC3C,MAAM,CAACiC,CAAC,EAAEC,CAAC,EAAEC,CAAC,CAAC,GAAGyC,gBAAgB;;EAElC;EACA;EACA,IAAIxD,MAAM,GAAG;IACX0B,KAAK,EAAE,OAAO;IAAI;IAClBC,IAAI,EAAE,QAAQ;IAAI;IAClBC,KAAK,EAAE,KAAK;IAAM;IAClBC,IAAI,EAAE,QAAQ;IAAI;IAClBC,GAAG,EAAE,MAAM;IAAO;IAClBC,MAAM,EAAE,OAAO,CAAG;EACpB,CAAC;;EAED;EACA,IAAIlB,CAAC,KAAK,CAAC,CAAC,EAAEb,MAAM,CAAC6B,IAAI,GAAG,QAAQ;EACpC,IAAIhB,CAAC,KAAK,CAAC,EAAEb,MAAM,CAAC4B,KAAK,GAAG,KAAK;EACjC,IAAId,CAAC,KAAK,CAAC,CAAC,EAAEd,MAAM,CAAC+B,MAAM,GAAG,OAAO;EACrC,IAAIjB,CAAC,KAAK,CAAC,EAAEd,MAAM,CAAC8B,GAAG,GAAG,MAAM;EAChC,IAAIf,CAAC,KAAK,CAAC,CAAC,EAAEf,MAAM,CAAC2B,IAAI,GAAG,QAAQ;EACpC,IAAIZ,CAAC,KAAK,CAAC,EAAEf,MAAM,CAAC0B,KAAK,GAAG,OAAO;EAEnC,OAAO1B,MAAM;AACf;;AAEA;AACA,MAAMyD,gBAAgB,GAAG;EACvBC,KAAK,EAAE,IAAI;EACXC,WAAW,EAAE,KAAK;EAClBC,SAAS,EAAE,EAAE;EAEbC,QAAQA,CAAA,EAAG;IAAA,IAAAC,WAAA;IACTlH,OAAO,CAACC,GAAG,CAAC,mDAAmD,EAAE,IAAI,CAAC8G,WAAW,CAAC;IAClF,IAAI,CAAC,IAAI,CAACA,WAAW,EAAE;MACrB/G,OAAO,CAACC,GAAG,CAAC,qEAAqE,CAAC;MAClF,IAAI,CAACkH,UAAU,CAAC,CAAC;IACnB;IACAnH,OAAO,CAACC,GAAG,CAAC,oDAAoD,GAAAiH,WAAA,GAAE,IAAI,CAACJ,KAAK,cAAAI,WAAA,uBAAVA,WAAA,CAAYE,MAAM,EAAE,QAAQ,CAAC;IAC/F,IAAI,IAAI,CAACN,KAAK,IAAI,IAAI,CAACA,KAAK,CAACM,MAAM,GAAG,CAAC,EAAE;MACvCpH,OAAO,CAACC,GAAG,CAAC,mDAAmD,EAAEe,IAAI,CAACC,SAAS,CAAC,IAAI,CAAC6F,KAAK,CAAC,CAAC,CAAC,CAAC1D,MAAM,CAAC,CAAC;IACxG;IACA,OAAO,IAAI,CAAC0D,KAAK;EACnB,CAAC;EAEDO,QAAQA,CAACC,QAAQ,EAAE;IAAA,IAAAC,YAAA,EAAAC,YAAA;IACjBxH,OAAO,CAACC,GAAG,CAAC,qCAAqC,CAAC;IAClDD,OAAO,CAACC,GAAG,CAAC,uBAAuB,GAAAsH,YAAA,GAAE,IAAI,CAACT,KAAK,cAAAS,YAAA,uBAAVA,YAAA,CAAYjD,GAAG,CAACmD,CAAC,IAAI,GAAGA,CAAC,CAACzF,OAAO,KAAKhB,IAAI,CAACC,SAAS,CAACwG,CAAC,CAACrE,MAAM,CAAC,EAAE,CAAC,CAAC;IACvGpD,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAAE,OAAOqH,QAAQ,EAAEA,QAAQ,CAAC;IAExD,IAAI,OAAOA,QAAQ,KAAK,UAAU,EAAE;MAClCtH,OAAO,CAACC,GAAG,CAAC,oCAAoC,CAAC;MACjD,IAAI,CAAC6G,KAAK,GAAGQ,QAAQ,CAAC,IAAI,CAACR,KAAK,CAAC;IACnC,CAAC,MAAM;MACL9G,OAAO,CAACC,GAAG,CAAC,sCAAsC,CAAC;MACnD,IAAI,CAAC6G,KAAK,GAAGQ,QAAQ;IACvB;IAEAtH,OAAO,CAACC,GAAG,CAAC,wCAAwC,CAAC;IACrDD,OAAO,CAACC,GAAG,CAAC,mBAAmB,GAAAuH,YAAA,GAAE,IAAI,CAACV,KAAK,cAAAU,YAAA,uBAAVA,YAAA,CAAYlD,GAAG,CAACmD,CAAC,IAAI,GAAGA,CAAC,CAACzF,OAAO,KAAKhB,IAAI,CAACC,SAAS,CAACwG,CAAC,CAACrE,MAAM,CAAC,EAAE,CAAC,CAAC;;IAEnG;IACApD,OAAO,CAACC,GAAG,CAAC,cAAc,EAAE,IAAI,CAAC+G,SAAS,CAACI,MAAM,EAAE,WAAW,CAAC;IAC/D,IAAI,CAACJ,SAAS,CAACU,OAAO,CAACC,QAAQ,IAAIA,QAAQ,CAAC,CAAC,CAAC;EAChD,CAAC;EAEDC,SAASA,CAACD,QAAQ,EAAE;IAClB,IAAI,CAACX,SAAS,CAAC3C,IAAI,CAACsD,QAAQ,CAAC;IAC7B,OAAO,MAAM;MACX,IAAI,CAACX,SAAS,GAAG,IAAI,CAACA,SAAS,CAACa,MAAM,CAACC,CAAC,IAAIA,CAAC,KAAKH,QAAQ,CAAC;IAC7D,CAAC;EACH,CAAC;EAEDR,UAAUA,CAAA,EAAG;IACXnH,OAAO,CAACC,GAAG,CAAC,8EAA8E,CAAC;IAC3FU,aAAa,CAAC,8EAA8E,EAAE,IAAI,EAAE,MAAM,CAAC;IAE3G,MAAMmG,KAAK,GAAG,EAAE;;IAEhB;IACA,KAAK,IAAI7C,CAAC,GAAG,CAAC,CAAC,EAAEA,CAAC,IAAI,CAAC,EAAEA,CAAC,EAAE,EAAE;MAC5B,KAAK,IAAIC,CAAC,GAAG,CAAC,CAAC,EAAEA,CAAC,IAAI,CAAC,EAAEA,CAAC,EAAE,EAAE;QAC5B,KAAK,IAAIC,CAAC,GAAG,CAAC,CAAC,EAAEA,CAAC,IAAI,CAAC,EAAEA,CAAC,EAAE,EAAE;UAC5B;UACA,IAAIF,CAAC,KAAK,CAAC,IAAIC,CAAC,KAAK,CAAC,IAAIC,CAAC,KAAK,CAAC,EAAE;;UAEnC;UACA,MAAMnC,OAAO,GAAG8E,KAAK,CAACM,MAAM;;UAE5B;UACA,MAAMhE,MAAM,GAAGsD,iBAAiB,CAAC1E,OAAO,CAAC;;UAEzC;UACAhC,OAAO,CAACC,GAAG,CAAC,iBAAiB+B,OAAO,QAAQiC,CAAC,KAAKC,CAAC,KAAKC,CAAC,IAAI,EAAEf,MAAM,CAAC;UAEtE0D,KAAK,CAACzC,IAAI,CAAC;YACT/B,QAAQ,EAAE,CAAC2B,CAAC,EAAEC,CAAC,EAAEC,CAAC,CAAC;YACnBf,MAAM;YACN2E,eAAe,EAAE,EAAE;YAAE;YACrB/F,OAAO,EAAEA,OAAO,CAAC;UACnB,CAAC,CAAC;QACJ;MACF;IACF;;IAEA;IACAhC,OAAO,CAACC,GAAG,CAAC,8CAA8C,CAAC;IAC3DD,OAAO,CAACC,GAAG,CAACe,IAAI,CAACC,SAAS,CAAC6F,KAAK,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC;;IAE3C;IACAnG,aAAa,CAAC,6CAA6C,EAAEmG,KAAK,EAAE,MAAM,CAAC;IAE3E,IAAI,CAACA,KAAK,GAAGA,KAAK;IAClB,IAAI,CAACC,WAAW,GAAG,IAAI;EACzB;AACF,CAAC;;AAED;AACA,SAASiB,iBAAiBA,CAAC;EAAEzF;AAAS,CAAC,EAAE;EAAA0F,GAAA;EACvC,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAG/I,QAAQ,CAAC,CAAC,CAAC;;EAEjD;EACAI,SAAS,CAAC,MAAM;IACd,MAAM4I,WAAW,GAAGvB,gBAAgB,CAACe,SAAS,CAAC,MAAM;MACnDO,cAAc,CAACE,IAAI,IAAIA,IAAI,GAAG,CAAC,CAAC;IAClC,CAAC,CAAC;IACF,OAAOD,WAAW;EACpB,CAAC,EAAE,EAAE,CAAC;EAEN,MAAME,SAAS,GAAGzB,gBAAgB,CAACI,QAAQ,CAAC,CAAC;;EAE7C;EACA,MAAMsB,YAAY,GAAGhJ,WAAW,CAAE+H,QAAQ,IAAK;IAC7CtH,OAAO,CAACC,GAAG,CAAC,wCAAwC,CAAC;IACrDD,OAAO,CAACC,GAAG,CAAC,uBAAuB,EAAE4G,gBAAgB,CAACI,QAAQ,CAAC,CAAC,CAAC3C,GAAG,CAACmD,CAAC,IAAI,GAAGA,CAAC,CAACzF,OAAO,KAAKhB,IAAI,CAACC,SAAS,CAACwG,CAAC,CAACrE,MAAM,CAAC,EAAE,CAAC,CAAC;IAEvHyD,gBAAgB,CAACQ,QAAQ,CAACC,QAAQ,CAAC;IAEnCtH,OAAO,CAACC,GAAG,CAAC,uCAAuC,CAAC;IACpDD,OAAO,CAACC,GAAG,CAAC,mBAAmB,EAAE4G,gBAAgB,CAACI,QAAQ,CAAC,CAAC,CAAC3C,GAAG,CAACmD,CAAC,IAAI,GAAGA,CAAC,CAACzF,OAAO,KAAKhB,IAAI,CAACC,SAAS,CAACwG,CAAC,CAACrE,MAAM,CAAC,EAAE,CAAC,CAAC;EACrH,CAAC,EAAE,EAAE,CAAC;EAEN,MAAM,CAACoF,WAAW,EAAEC,cAAc,CAAC,GAAGrJ,QAAQ,CAAC,KAAK,CAAC;EACrD,MAAM,CAACmE,YAAY,EAAEmF,eAAe,CAAC,GAAGtJ,QAAQ,CAAC,IAAI,CAAC;EACtD,MAAM,CAACoE,gBAAgB,EAAEmF,mBAAmB,CAAC,GAAGvJ,QAAQ,CAAC,CAAC,CAAC;EAC3D,MAAM,CAACwJ,WAAW,EAAEC,cAAc,CAAC,GAAGzJ,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;EACpD,MAAM,CAAC0J,UAAU,EAAEC,aAAa,CAAC,GAAG3J,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC;;EAErD;EACAD,KAAK,CAACK,SAAS,CAAC,MAAM;IACpBQ,OAAO,CAACC,GAAG,CAAC,wBAAwB,EAAEqI,SAAS,CAAChE,GAAG,CAACmD,CAAC,IAAI,GAAGA,CAAC,CAACzF,OAAO,MAAMyF,CAAC,CAACnF,QAAQ,CAAC0B,IAAI,CAAC,IAAI,CAAC,aAAahD,IAAI,CAACC,SAAS,CAACwG,CAAC,CAACrE,MAAM,CAAC,EAAE,CAAC,CAAC;;IAEzI;IACAzC,aAAa,CAAC,qCAAqC,EAAE,IAAI,EAAE,MAAM,CAAC;IAClEA,aAAa,CAAC,uBAAuB,EAAE2H,SAAS,CAAChE,GAAG,CAACmD,CAAC,IAAI,GAAGA,CAAC,CAACzF,OAAO,MAAMyF,CAAC,CAACnF,QAAQ,CAAC0B,IAAI,CAAC,IAAI,CAAC,aAAahD,IAAI,CAACC,SAAS,CAACwG,CAAC,CAACrE,MAAM,CAAC,EAAE,CAAC,EAAE,MAAM,CAAC;;IAElJ;IACA;IACA,IAAI,KAAK,IAAI0F,UAAU,EAAE;MACvB,MAAME,iBAAiB,GAAGV,SAAS,CAACW,KAAK,CAAC,CAACC,KAAK,EAAEC,KAAK,KAAK;QAC1D,MAAMC,cAAc,GAAG1C,iBAAiB,CAACyC,KAAK,CAAC;QAC/C,OAAOnI,IAAI,CAACC,SAAS,CAACiI,KAAK,CAAC9F,MAAM,CAAC,KAAKpC,IAAI,CAACC,SAAS,CAACmI,cAAc,CAAC;MACxE,CAAC,CAAC;MAEF,IAAIJ,iBAAiB,IAAIV,SAAS,CAAClB,MAAM,GAAG,CAAC,EAAE;QAC7CzG,aAAa,CAAC,2DAA2D,EAAE,IAAI,EAAE,OAAO,CAAC;QACzFA,aAAa,CAAC,qDAAqD,EAAE,IAAI,EAAE,OAAO,CAAC;MACrF;IACF;EACF,CAAC,EAAE,CAAC2H,SAAS,EAAEQ,UAAU,CAAC,CAAC;;EAE3B;EACA,MAAMO,aAAa,GAAG9J,WAAW,CAAC,CAAC+J,MAAM,EAAElJ,IAAI,EAAEC,SAAS,KAAK;IAC7DH,eAAe,CAAC,GAAG,EAAEE,IAAI,EAAEC,SAAS,EAAE,sBAAsB,CAAC;IAC7DH,eAAe,CAAC,GAAG,EAAEE,IAAI,EAAEC,SAAS,EAAE,qBAAqB,EAAEiJ,MAAM,CAAChF,GAAG,CAACmD,CAAC,IAAI,GAAGA,CAAC,CAACzF,OAAO,KAAKhB,IAAI,CAACC,SAAS,CAACwG,CAAC,CAACrE,MAAM,CAAC,EAAE,CAAC,CAAC;;IAE1H;IACA,MAAMmG,cAAc,GAAGD,MAAM,CAACzB,MAAM,CAACqB,KAAK,IAAI;MAC5C,MAAM,CAACjF,CAAC,EAAEC,CAAC,EAAEC,CAAC,CAAC,GAAG+E,KAAK,CAAC5G,QAAQ;MAChC,QAAQlC,IAAI;QACV,KAAK,GAAG;UAAE,OAAO+D,CAAC,KAAK,CAAC;QAAE;QAC1B,KAAK,GAAG;UAAE,OAAOA,CAAC,KAAK,CAAC,CAAC;QAAE;QAC3B,KAAK,GAAG;UAAE,OAAOF,CAAC,KAAK,CAAC;QAAE;QAC1B,KAAK,GAAG;UAAE,OAAOA,CAAC,KAAK,CAAC,CAAC;QAAE;QAC3B,KAAK,GAAG;UAAE,OAAOC,CAAC,KAAK,CAAC;QAAE;QAC1B,KAAK,GAAG;UAAE,OAAOA,CAAC,KAAK,CAAC,CAAC;QAAE;QAC3B;UAAS,OAAO,KAAK;MACvB;IACF,CAAC,CAAC;IAEFlE,OAAO,CAACC,GAAG,CAAC,YAAYsJ,cAAc,CAACnC,MAAM,cAAchH,IAAI,OAAO,CAAC;IACvEF,eAAe,CAAC,IAAI,EAAEE,IAAI,EAAEC,SAAS,EAAE,SAASkJ,cAAc,CAACnC,MAAM,iBAAiB,EAAEmC,cAAc,CAACjF,GAAG,CAACmD,CAAC,IAAI,GAAGA,CAAC,CAACzF,OAAO,MAAMyF,CAAC,CAACnF,QAAQ,CAAC0B,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;IAE5JuF,cAAc,CAAC7B,OAAO,CAACwB,KAAK,IAAI;MAC9B,MAAM,CAACjF,CAAC,EAAEC,CAAC,EAAEC,CAAC,CAAC,GAAG+E,KAAK,CAAC5G,QAAQ;MAChC,IAAIkH,IAAI,GAAGvF,CAAC;QAAEwF,IAAI,GAAGvF,CAAC;QAAEwF,IAAI,GAAGvF,CAAC;;MAEhC;MACA,QAAQ/D,IAAI;QACV,KAAK,GAAG;UAAE;UACR,IAAIC,SAAS,KAAK,WAAW,EAAE;YAC7BmJ,IAAI,GAAG,CAACtF,CAAC;YACTuF,IAAI,GAAGxF,CAAC;UACV,CAAC,MAAM;YACLuF,IAAI,GAAGtF,CAAC;YACRuF,IAAI,GAAG,CAACxF,CAAC;UACX;UACA;QACF,KAAK,GAAG;UAAE;UACR,IAAI5D,SAAS,KAAK,WAAW,EAAE;YAC7BmJ,IAAI,GAAGtF,CAAC;YACRuF,IAAI,GAAG,CAACxF,CAAC;UACX,CAAC,MAAM;YACLuF,IAAI,GAAG,CAACtF,CAAC;YACTuF,IAAI,GAAGxF,CAAC;UACV;UACA;QACF,KAAK,GAAG;UAAE;UACR,IAAI5D,SAAS,KAAK,WAAW,EAAE;YAC7BoJ,IAAI,GAAG,CAACtF,CAAC;YACTuF,IAAI,GAAGxF,CAAC;UACV,CAAC,MAAM;YACLuF,IAAI,GAAGtF,CAAC;YACRuF,IAAI,GAAG,CAACxF,CAAC;UACX;UACA;QACF,KAAK,GAAG;UAAE;UACR,IAAI7D,SAAS,KAAK,WAAW,EAAE;YAC7BoJ,IAAI,GAAGtF,CAAC;YACRuF,IAAI,GAAG,CAACxF,CAAC;UACX,CAAC,MAAM;YACLuF,IAAI,GAAG,CAACtF,CAAC;YACTuF,IAAI,GAAGxF,CAAC;UACV;UACA;QACF,KAAK,GAAG;UAAE;UACR,IAAI7D,SAAS,KAAK,WAAW,EAAE;YAC7BmJ,IAAI,GAAGrF,CAAC;YACRuF,IAAI,GAAG,CAACzF,CAAC;UACX,CAAC,MAAM;YACLuF,IAAI,GAAG,CAACrF,CAAC;YACTuF,IAAI,GAAGzF,CAAC;UACV;UACA;QACF,KAAK,GAAG;UAAE;UACR,IAAI5D,SAAS,KAAK,WAAW,EAAE;YAC7BmJ,IAAI,GAAG,CAACrF,CAAC;YACTuF,IAAI,GAAGzF,CAAC;UACV,CAAC,MAAM;YACLuF,IAAI,GAAGrF,CAAC;YACRuF,IAAI,GAAG,CAACzF,CAAC;UACX;UACA;MACJ;MAEAjE,OAAO,CAACC,GAAG,CAAC,YAAYiJ,KAAK,CAAClH,OAAO,iBAAiBiC,CAAC,KAAKC,CAAC,KAAKC,CAAC,SAASqF,IAAI,KAAKC,IAAI,KAAKC,IAAI,GAAG,CAAC;;MAEtG;MACAR,KAAK,CAAC5G,QAAQ,GAAG,CAACkH,IAAI,EAAEC,IAAI,EAAEC,IAAI,CAAC;;MAEnC;MACA,MAAMC,SAAS,GAAG;QAAE,GAAGT,KAAK,CAAC9F;MAAO,CAAC;MACrC,QAAQhD,IAAI;QACV,KAAK,GAAG;UAAE;UACR,IAAIC,SAAS,KAAK,WAAW,EAAE;YAC7B,MAAMuJ,IAAI,GAAGD,SAAS,CAACzE,GAAG;YAC1ByE,SAAS,CAACzE,GAAG,GAAGyE,SAAS,CAAC1E,IAAI;YAC9B0E,SAAS,CAAC1E,IAAI,GAAG0E,SAAS,CAACxE,MAAM;YACjCwE,SAAS,CAACxE,MAAM,GAAGwE,SAAS,CAAC3E,KAAK;YAClC2E,SAAS,CAAC3E,KAAK,GAAG4E,IAAI;UACxB,CAAC,MAAM;YACL,MAAMA,IAAI,GAAGD,SAAS,CAACzE,GAAG;YAC1ByE,SAAS,CAACzE,GAAG,GAAGyE,SAAS,CAAC3E,KAAK;YAC/B2E,SAAS,CAAC3E,KAAK,GAAG2E,SAAS,CAACxE,MAAM;YAClCwE,SAAS,CAACxE,MAAM,GAAGwE,SAAS,CAAC1E,IAAI;YACjC0E,SAAS,CAAC1E,IAAI,GAAG2E,IAAI;UACvB;UACA;QACF,KAAK,GAAG;UAAE;UACR,IAAIvJ,SAAS,KAAK,WAAW,EAAE;YAC7B,MAAMuJ,IAAI,GAAGD,SAAS,CAACzE,GAAG;YAC1ByE,SAAS,CAACzE,GAAG,GAAGyE,SAAS,CAAC3E,KAAK;YAC/B2E,SAAS,CAAC3E,KAAK,GAAG2E,SAAS,CAACxE,MAAM;YAClCwE,SAAS,CAACxE,MAAM,GAAGwE,SAAS,CAAC1E,IAAI;YACjC0E,SAAS,CAAC1E,IAAI,GAAG2E,IAAI;UACvB,CAAC,MAAM;YACL,MAAMA,IAAI,GAAGD,SAAS,CAACzE,GAAG;YAC1ByE,SAAS,CAACzE,GAAG,GAAGyE,SAAS,CAAC1E,IAAI;YAC9B0E,SAAS,CAAC1E,IAAI,GAAG0E,SAAS,CAACxE,MAAM;YACjCwE,SAAS,CAACxE,MAAM,GAAGwE,SAAS,CAAC3E,KAAK;YAClC2E,SAAS,CAAC3E,KAAK,GAAG4E,IAAI;UACxB;UACA;QACF,KAAK,GAAG;UAAE;UACR,IAAIvJ,SAAS,KAAK,WAAW,EAAE;YAC7B,MAAMuJ,IAAI,GAAGD,SAAS,CAACzE,GAAG;YAC1ByE,SAAS,CAACzE,GAAG,GAAGyE,SAAS,CAAC5E,IAAI;YAC9B4E,SAAS,CAAC5E,IAAI,GAAG4E,SAAS,CAACxE,MAAM;YACjCwE,SAAS,CAACxE,MAAM,GAAGwE,SAAS,CAAC7E,KAAK;YAClC6E,SAAS,CAAC7E,KAAK,GAAG8E,IAAI;UACxB,CAAC,MAAM;YACL,MAAMA,IAAI,GAAGD,SAAS,CAACzE,GAAG;YAC1ByE,SAAS,CAACzE,GAAG,GAAGyE,SAAS,CAAC7E,KAAK;YAC/B6E,SAAS,CAAC7E,KAAK,GAAG6E,SAAS,CAACxE,MAAM;YAClCwE,SAAS,CAACxE,MAAM,GAAGwE,SAAS,CAAC5E,IAAI;YACjC4E,SAAS,CAAC5E,IAAI,GAAG6E,IAAI;UACvB;UACA;QACF,KAAK,GAAG;UAAE;UACR,IAAIvJ,SAAS,KAAK,WAAW,EAAE;YAC7B,MAAMuJ,IAAI,GAAGD,SAAS,CAACzE,GAAG;YAC1ByE,SAAS,CAACzE,GAAG,GAAGyE,SAAS,CAAC7E,KAAK;YAC/B6E,SAAS,CAAC7E,KAAK,GAAG6E,SAAS,CAACxE,MAAM;YAClCwE,SAAS,CAACxE,MAAM,GAAGwE,SAAS,CAAC5E,IAAI;YACjC4E,SAAS,CAAC5E,IAAI,GAAG6E,IAAI;UACvB,CAAC,MAAM;YACL,MAAMA,IAAI,GAAGD,SAAS,CAACzE,GAAG;YAC1ByE,SAAS,CAACzE,GAAG,GAAGyE,SAAS,CAAC5E,IAAI;YAC9B4E,SAAS,CAAC5E,IAAI,GAAG4E,SAAS,CAACxE,MAAM;YACjCwE,SAAS,CAACxE,MAAM,GAAGwE,SAAS,CAAC7E,KAAK;YAClC6E,SAAS,CAAC7E,KAAK,GAAG8E,IAAI;UACxB;UACA;QACF,KAAK,GAAG;UAAE;UACR,IAAIvJ,SAAS,KAAK,WAAW,EAAE;YAC7B,MAAMuJ,IAAI,GAAGD,SAAS,CAAC7E,KAAK;YAC5B6E,SAAS,CAAC7E,KAAK,GAAG6E,SAAS,CAAC3E,KAAK;YACjC2E,SAAS,CAAC3E,KAAK,GAAG2E,SAAS,CAAC5E,IAAI;YAChC4E,SAAS,CAAC5E,IAAI,GAAG4E,SAAS,CAAC1E,IAAI;YAC/B0E,SAAS,CAAC1E,IAAI,GAAG2E,IAAI;UACvB,CAAC,MAAM;YACL,MAAMA,IAAI,GAAGD,SAAS,CAAC7E,KAAK;YAC5B6E,SAAS,CAAC7E,KAAK,GAAG6E,SAAS,CAAC1E,IAAI;YAChC0E,SAAS,CAAC1E,IAAI,GAAG0E,SAAS,CAAC5E,IAAI;YAC/B4E,SAAS,CAAC5E,IAAI,GAAG4E,SAAS,CAAC3E,KAAK;YAChC2E,SAAS,CAAC3E,KAAK,GAAG4E,IAAI;UACxB;UACA;QACF,KAAK,GAAG;UAAE;UACR,IAAIvJ,SAAS,KAAK,WAAW,EAAE;YAC7B,MAAMuJ,IAAI,GAAGD,SAAS,CAAC7E,KAAK;YAC5B6E,SAAS,CAAC7E,KAAK,GAAG6E,SAAS,CAAC1E,IAAI;YAChC0E,SAAS,CAAC1E,IAAI,GAAG0E,SAAS,CAAC5E,IAAI;YAC/B4E,SAAS,CAAC5E,IAAI,GAAG4E,SAAS,CAAC3E,KAAK;YAChC2E,SAAS,CAAC3E,KAAK,GAAG4E,IAAI;UACxB,CAAC,MAAM;YACL,MAAMA,IAAI,GAAGD,SAAS,CAAC7E,KAAK;YAC5B6E,SAAS,CAAC7E,KAAK,GAAG6E,SAAS,CAAC3E,KAAK;YACjC2E,SAAS,CAAC3E,KAAK,GAAG2E,SAAS,CAAC5E,IAAI;YAChC4E,SAAS,CAAC5E,IAAI,GAAG4E,SAAS,CAAC1E,IAAI;YAC/B0E,SAAS,CAAC1E,IAAI,GAAG2E,IAAI;UACvB;UACA;MACJ;MACAV,KAAK,CAAC9F,MAAM,GAAGuG,SAAS;;MAExB;MACAT,KAAK,CAACnB,eAAe,CAAC1D,IAAI,CAAC;QACzBwF,IAAI,EAAEzJ,IAAI;QACVC,SAAS,EAAEA,SAAS;QACpByJ,YAAY,EAAE,CAAC7F,CAAC,EAAEC,CAAC,EAAEC,CAAC,CAAC;QACvB4F,UAAU,EAAE,CAACP,IAAI,EAAEC,IAAI,EAAEC,IAAI,CAAC;QAC9BnJ,SAAS,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACwJ,WAAW,CAAC;MACpC,CAAC,CAAC;IACJ,CAAC,CAAC;IAEF9J,eAAe,CAAC,GAAG,EAAEE,IAAI,EAAEC,SAAS,EAAE,sBAAsB,EAAEiJ,MAAM,CAAChF,GAAG,CAACmD,CAAC,IAAI,GAAGA,CAAC,CAACzF,OAAO,KAAKhB,IAAI,CAACC,SAAS,CAACwG,CAAC,CAACrE,MAAM,CAAC,EAAE,CAAC,CAAC;IAC3HlD,eAAe,CAAC,GAAG,EAAEE,IAAI,EAAEC,SAAS,EAAE,yBAAyB,CAAC;EAClE,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAM4J,uBAAuB,GAAG1K,WAAW,CAAC,CAACa,IAAI,EAAEC,SAAS,EAAE6J,UAAU,KAAK;IAC3ElK,OAAO,CAACC,GAAG,CAAC,oBAAoBG,IAAI,IAAIC,SAAS,wBAAwB,CAAC;;IAE1E;IACAH,eAAe,CAAC,GAAG,EAAEE,IAAI,EAAEC,SAAS,EAAE,gCAAgC,CAAC;IACvEH,eAAe,CAAC,GAAG,EAAEE,IAAI,EAAEC,SAAS,EAAE,kBAAkB,CAAC;;IAEzD;IACAwI,cAAc,CAACR,IAAI,IAAI;MACrB,MAAM8B,UAAU,GAAG,CAAC,GAAG9B,IAAI,EAAE;QAAEjI,IAAI;QAAEC,SAAS;QAAEE,SAAS,EAAEC,IAAI,CAAC4J,GAAG,CAAC;MAAE,CAAC,CAAC;MACxEpK,OAAO,CAACC,GAAG,CAAC,qBAAqBG,IAAI,IAAIC,SAAS,kBAAkB8J,UAAU,CAAC/C,MAAM,GAAG,CAAC;MACzF,OAAO+C,UAAU;IACnB,CAAC,CAAC;;IAEF;IACAzB,eAAe,CAAC;MAAEtI,IAAI;MAAEC;IAAU,CAAC,CAAC;IACpCsI,mBAAmB,CAAC,CAAC,CAAC;;IAEtB;IACA,MAAM0B,iBAAiB,GAAG,GAAG,CAAC,CAAC;IAC/B,MAAMC,SAAS,GAAGC,WAAW,CAACH,GAAG,CAAC,CAAC;IAEnC,MAAMI,OAAO,GAAIC,WAAW,IAAK;MAC/B,MAAMC,OAAO,GAAGD,WAAW,GAAGH,SAAS;MACvC,MAAMK,QAAQ,GAAG5H,IAAI,CAAC6H,GAAG,CAACF,OAAO,GAAGL,iBAAiB,EAAE,CAAC,CAAC;;MAEzD;MACA,MAAMQ,aAAa,GAAG,CAAC,GAAG9H,IAAI,CAAC+H,GAAG,CAAC,CAAC,GAAGH,QAAQ,EAAE,CAAC,CAAC;MACnDhC,mBAAmB,CAACkC,aAAa,CAAC;MAElC,IAAIF,QAAQ,GAAG,CAAC,EAAE;QAChBI,qBAAqB,CAACP,OAAO,CAAC;MAC1B,CAAC,MAAM;QACX;QACAtK,eAAe,CAAC,GAAG,EAAEE,IAAI,EAAEC,SAAS,EAAE,qBAAqB,CAAC;QAC5DkI,YAAY,CAACyC,SAAS,IAAI;UACxBhL,OAAO,CAACC,GAAG,CAAC,oCAAoCG,IAAI,IAAIC,SAAS,EAAE,CAAC;UACpEL,OAAO,CAACC,GAAG,CAAC,wBAAwB,EAAE+K,SAAS,CAAC1G,GAAG,CAACmD,CAAC,IAAI,GAAGA,CAAC,CAACzF,OAAO,KAAKhB,IAAI,CAACC,SAAS,CAACwG,CAAC,CAACrE,MAAM,CAAC,EAAE,CAAC,CAAC;;UAEtG;UACAlD,eAAe,CAAC,GAAG,EAAEE,IAAI,EAAEC,SAAS,EAAE,oBAAoB,CAAC;UAC3DH,eAAe,CAAC,GAAG,EAAEE,IAAI,EAAEC,SAAS,EAAE,8BAA8B,EAAE2K,SAAS,CAAC1G,GAAG,CAACmD,CAAC,IAAI,GAAGA,CAAC,CAACzF,OAAO,KAAKhB,IAAI,CAACC,SAAS,CAACwG,CAAC,CAACrE,MAAM,CAAC,EAAE,CAAC,CAAC;UAEtI,MAAMkE,QAAQ,GAAG,CAAC,GAAG0D,SAAS,CAAC;UAC/B,MAAM1B,MAAM,GAAGhC,QAAQ,CAAChD,GAAG,CAAC,CAAC4E,KAAK,EAAEC,KAAK,MAAM;YAAE,GAAGD,KAAK;YAAElH,OAAO,EAAEmH;UAAM,CAAC,CAAC,CAAC;;UAE7E;UACAnJ,OAAO,CAACC,GAAG,CAAC,+BAA+B,EAAEqJ,MAAM,CAAChF,GAAG,CAACmD,CAAC,IAAI,GAAGA,CAAC,CAACzF,OAAO,MAAMyF,CAAC,CAACnF,QAAQ,CAAC0B,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;UACzGrD,aAAa,CAAC,iCAAiC,EAAE2I,MAAM,CAAChF,GAAG,CAACmD,CAAC,IAAI,GAAGA,CAAC,CAACzF,OAAO,MAAMyF,CAAC,CAACnF,QAAQ,CAAC0B,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,MAAM,CAAC;;UAErH;UACA9D,eAAe,CAAC,GAAG,EAAEE,IAAI,EAAEC,SAAS,EAAE,uBAAuB,CAAC;UAC9DgJ,aAAa,CAACC,MAAM,EAAElJ,IAAI,EAAEC,SAAS,CAAC;;UAEtC;UACAL,OAAO,CAACC,GAAG,CAAC,8BAA8B,EAAEqJ,MAAM,CAAChF,GAAG,CAACmD,CAAC,IAAI,GAAGA,CAAC,CAACzF,OAAO,MAAMyF,CAAC,CAACnF,QAAQ,CAAC0B,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;UACxG9D,eAAe,CAAC,GAAG,EAAEE,IAAI,EAAEC,SAAS,EAAE,4BAA4B,EAAEiJ,MAAM,CAAChF,GAAG,CAACmD,CAAC,IAAI,GAAGA,CAAC,CAACzF,OAAO,MAAMyF,CAAC,CAACnF,QAAQ,CAAC0B,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;;UAEhI;UACAsF,MAAM,CAAC5B,OAAO,CAAC,CAACwB,KAAK,EAAEC,KAAK,KAAK;YAC/B7B,QAAQ,CAAC6B,KAAK,CAAC,GAAG;cAChBnH,OAAO,EAAEkH,KAAK,CAAClH,OAAO;cAAE;cACxBM,QAAQ,EAAE4G,KAAK,CAAC5G,QAAQ;cACxBc,MAAM,EAAE8F,KAAK,CAAC9F,MAAM;cACpB2E,eAAe,EAAEmB,KAAK,CAACnB;YACzB,CAAC;UACH,CAAC,CAAC;UAEF/H,OAAO,CAACC,GAAG,CAAC,0CAA0C,CAAC;UACvDD,OAAO,CAACC,GAAG,CAAC,mBAAmB,EAAEqH,QAAQ,CAAChD,GAAG,CAACmD,CAAC,IAAI,GAAGA,CAAC,CAACzF,OAAO,KAAKhB,IAAI,CAACC,SAAS,CAACwG,CAAC,CAACrE,MAAM,CAAC,EAAE,CAAC,CAAC;;UAEhG;UACAlD,eAAe,CAAC,IAAI,EAAEE,IAAI,EAAEC,SAAS,EAAE,6BAA6B,EAAEiH,QAAQ,CAAChD,GAAG,CAACmD,CAAC,IAAI,GAAGA,CAAC,CAACzF,OAAO,KAAKhB,IAAI,CAACC,SAAS,CAACwG,CAAC,CAACrE,MAAM,CAAC,EAAE,CAAC,CAAC;UAErI,OAAOkE,QAAQ;QACjB,CAAC,CAAC;;QAEF;QACAoB,eAAe,CAAC,IAAI,CAAC;QACrBC,mBAAmB,CAAC,CAAC,CAAC;QACtB,IAAIuB,UAAU,EAAEA,UAAU,CAAC,CAAC;MAC9B;IACF,CAAC;IAEDa,qBAAqB,CAACP,OAAO,CAAC;EAChC,CAAC,EAAE,CAACnB,aAAa,EAAEd,YAAY,CAAC,CAAC;;EAEjC;EACA,MAAM0C,yBAAyB,GAAG1L,WAAW,CAAC,CAAC2L,KAAK,EAAEhB,UAAU,KAAK;IACnE,IAAIiB,gBAAgB,GAAG,CAAC;IAExB,MAAMC,eAAe,GAAGA,CAAA,KAAM;MAC5B,IAAID,gBAAgB,IAAID,KAAK,CAAC9D,MAAM,EAAE;QACpC,IAAI8C,UAAU,EAAEA,UAAU,CAAC,CAAC;QAC5B;MACF;MAEA,MAAML,IAAI,GAAGqB,KAAK,CAACC,gBAAgB,CAAC;MACpCnL,OAAO,CAACC,GAAG,CAAC,qBAAqBkL,gBAAgB,GAAG,CAAC,IAAID,KAAK,CAAC9D,MAAM,KAAKyC,IAAI,CAACzJ,IAAI,IAAIyJ,IAAI,CAACxJ,SAAS,EAAE,CAAC;;MAExG;MACA4J,uBAAuB,CAACJ,IAAI,CAACzJ,IAAI,EAAEyJ,IAAI,CAACxJ,SAAS,EAAE,MAAM;QACvD8K,gBAAgB,EAAE;QAClB;QACAE,UAAU,CAACD,eAAe,EAAE,EAAE,CAAC;MACjC,CAAC,CAAC;IACJ,CAAC;IAEDA,eAAe,CAAC,CAAC;EACnB,CAAC,EAAE,CAACnB,uBAAuB,CAAC,CAAC;;EAE7B;EACA,MAAMqB,oBAAoB,GAAG/L,WAAW,CAAEgM,YAAY,IAAK;IACzD;IACA;;IAEA,MAAMC,QAAQ,GAAG,EAAE;IACnBD,YAAY,CAAC7D,OAAO,CAACwB,KAAK,IAAI;MAC5BA,KAAK,CAACnB,eAAe,CAACL,OAAO,CAACmC,IAAI,IAAI;QACpC2B,QAAQ,CAACnH,IAAI,CAAC;UACZjE,IAAI,EAAEyJ,IAAI,CAACA,IAAI;UACfxJ,SAAS,EAAEwJ,IAAI,CAACxJ,SAAS;UACzBE,SAAS,EAAEsJ,IAAI,CAACtJ;QAClB,CAAC,CAAC;MACJ,CAAC,CAAC;IACJ,CAAC,CAAC;IAEFP,OAAO,CAACC,GAAG,CAAC,mBAAmBuL,QAAQ,CAACpE,MAAM,4BAA4B,CAAC;;IAE3E;IACAoE,QAAQ,CAACC,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAK,IAAInL,IAAI,CAACkL,CAAC,CAACnL,SAAS,CAAC,GAAG,IAAIC,IAAI,CAACmL,CAAC,CAACpL,SAAS,CAAC,CAAC;IAEtEP,OAAO,CAACC,GAAG,CAAC,2BAA2B,EAAEuL,QAAQ,CAAClH,GAAG,CAACsH,CAAC,IAAI,GAAGA,CAAC,CAACxL,IAAI,IAAIwL,CAAC,CAACvL,SAAS,EAAE,CAAC,CAAC;;IAEvF;IACA,MAAMwL,aAAa,GAAGL,QAAQ,CAACM,OAAO,CAAC,CAAC,CAACxH,GAAG,CAACuF,IAAI,KAAK;MACpDzJ,IAAI,EAAEyJ,IAAI,CAACzJ,IAAI;MACfC,SAAS,EAAEwJ,IAAI,CAACxJ,SAAS,KAAK,WAAW,GAAG,kBAAkB,GAAG;IACnE,CAAC,CAAC,CAAC;IAEHL,OAAO,CAACC,GAAG,CAAC,2BAA2B,EAAE4L,aAAa,CAACvH,GAAG,CAACsH,CAAC,IAAI,GAAGA,CAAC,CAACxL,IAAI,IAAIwL,CAAC,CAACvL,SAAS,EAAE,CAAC,CAAC;;IAE5F;IACA,MAAM0L,cAAc,GAAGC,oBAAoB,CAACH,aAAa,CAAC;IAE1D7L,OAAO,CAACC,GAAG,CAAC,8BAA8B8L,cAAc,CAAC3E,MAAM,EAAE,EAAE2E,cAAc,CAACzH,GAAG,CAACsH,CAAC,IAAI,GAAGA,CAAC,CAACxL,IAAI,IAAIwL,CAAC,CAACvL,SAAS,EAAE,CAAC,CAAC;IAEvH,OAAO0L,cAAc;EACvB,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAMC,oBAAoB,GAAGzM,WAAW,CAAE2L,KAAK,IAAK;IAClD;IACA;IACA,OAAOA,KAAK;EACd,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAMe,UAAU,GAAG1M,WAAW,CAAC,CAACa,IAAI,EAAEC,SAAS,KAAK;IAClDL,OAAO,CAACC,GAAG,CAAC,8BAA8BG,IAAI,IAAIC,SAAS,SAAS,CAAC;IACrEH,eAAe,CAAC,GAAG,EAAEE,IAAI,EAAEC,SAAS,EAAE,mBAAmB,CAAC;IAC1DM,aAAa,CAAC,yCAAyC,EAAE;MAAEP,IAAI;MAAEC;IAAU,CAAC,EAAE,SAAS,CAAC;IACxFM,aAAa,CAAC,6CAA6C,EAAE;MAAEP,IAAI;MAAEC,SAAS;MAAEmI;IAAY,CAAC,EAAE,MAAM,CAAC;;IAEtG;IACAxI,OAAO,CAACC,GAAG,CAAC,sDAAsD,CAAC;IACnED,OAAO,CAACC,GAAG,CAAC,OAAO,EAAEG,IAAI,EAAE,YAAY,EAAEC,SAAS,CAAC;IACnDL,OAAO,CAACC,GAAG,CAAC,4BAA4B,EAAEqI,SAAS,CAAChE,GAAG,CAACmD,CAAC,IAAI,GAAGA,CAAC,CAACzF,OAAO,KAAKhB,IAAI,CAACC,SAAS,CAACwG,CAAC,CAACrE,MAAM,CAAC,EAAE,CAAC,CAAC;IAE1G,IAAIoF,WAAW,EAAE;MACf7H,aAAa,CAAC,4CAA4C,EAAE,IAAI,EAAE,SAAS,CAAC;MAC5E;IACF;IAEAT,eAAe,CAAC,GAAG,EAAEE,IAAI,EAAEC,SAAS,EAAE,mBAAmB,CAAC;IAC1D0I,aAAa,CAAC,IAAI,CAAC,CAAC,CAAC;IACrBN,cAAc,CAAC,IAAI,CAAC;;IAEpB;IACAwB,uBAAuB,CAAC7J,IAAI,EAAEC,SAAS,EAAE,MAAM;MAC7CM,aAAa,CAAC,mCAAmC,EAAE,IAAI,EAAE,SAAS,CAAC;;MAEnE;MACAX,OAAO,CAACC,GAAG,CAAC,wDAAwD,CAAC;MACrED,OAAO,CAACC,GAAG,CAAC,0BAA0B,EAAEqI,SAAS,CAAChE,GAAG,CAACmD,CAAC,IAAI,GAAGA,CAAC,CAACzF,OAAO,KAAKhB,IAAI,CAACC,SAAS,CAACwG,CAAC,CAACrE,MAAM,CAAC,EAAE,CAAC,CAAC;MAExGqF,cAAc,CAAC,KAAK,CAAC;IACvB,CAAC,CAAC;EACJ,CAAC,EAAE,CAACD,WAAW,EAAEyB,uBAAuB,EAAE3B,SAAS,CAAC,CAAC;;EAErD;EACA,MAAM4D,QAAQ,GAAG3M,WAAW,CAAC,MAAM;IACjC,IAAIiJ,WAAW,EAAE;IAEjBO,aAAa,CAAC,IAAI,CAAC,CAAC,CAAC;IACrBN,cAAc,CAAC,IAAI,CAAC;;IAEpB;IACAzI,OAAO,CAACC,GAAG,CAAC,8CAA8C2I,WAAW,CAACxB,MAAM,QAAQ,CAAC;IAErF,MAAM8D,KAAK,GAAG,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC;IAC5C,MAAMiB,UAAU,GAAG,CAAC,WAAW,EAAE,kBAAkB,CAAC;IACpD,MAAMC,gBAAgB,GAAG,EAAE;;IAE3B;IACA,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,EAAE,EAAEA,CAAC,EAAE,EAAE;MAC3B,MAAMxC,IAAI,GAAGqB,KAAK,CAACnI,IAAI,CAACuJ,KAAK,CAACvJ,IAAI,CAACwJ,MAAM,CAAC,CAAC,GAAGrB,KAAK,CAAC9D,MAAM,CAAC,CAAC;MAC5D,MAAM/G,SAAS,GAAG8L,UAAU,CAACpJ,IAAI,CAACuJ,KAAK,CAACvJ,IAAI,CAACwJ,MAAM,CAAC,CAAC,GAAGJ,UAAU,CAAC/E,MAAM,CAAC,CAAC;MAC3EgF,gBAAgB,CAAC/H,IAAI,CAAC;QAAEjE,IAAI,EAAEyJ,IAAI;QAAExJ;MAAU,CAAC,CAAC;IAClD;IAEAL,OAAO,CAACC,GAAG,CAAC,mCAAmC,EAAEmM,gBAAgB,CAAC9H,GAAG,CAACsH,CAAC,IAAI,GAAGA,CAAC,CAACxL,IAAI,IAAIwL,CAAC,CAACvL,SAAS,EAAE,CAAC,CAAC;;IAEvG;IACA4K,yBAAyB,CAACmB,gBAAgB,EAAE,MAAM;MAChD3D,cAAc,CAAC,KAAK,CAAC;MACrBzI,OAAO,CAACC,GAAG,CAAC,mBAAmB,CAAC;;MAEhC;MACAsI,YAAY,CAACgD,YAAY,IAAI;QAC3BvL,OAAO,CAACC,GAAG,CAAC,+BAA+B,CAAC;QAC5CD,OAAO,CAACC,GAAG,CAACe,IAAI,CAACC,SAAS,CAACsK,YAAY,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC;QAClD5K,aAAa,CAAC,2BAA2B,EAAE4K,YAAY,CAAC;QACxD,OAAOA,YAAY;MACrB,CAAC,CAAC;IACJ,CAAC,CAAC;EACJ,CAAC,EAAE,CAAC/C,WAAW,EAAEyC,yBAAyB,EAAErC,WAAW,EAAEL,YAAY,CAAC,CAAC;;EAEvE;EACA,MAAMiE,KAAK,GAAGjN,WAAW,CAAC,MAAM;IAC9B;IACAsJ,cAAc,CAAC,EAAE,CAAC;IAClBE,aAAa,CAAC,KAAK,CAAC,CAAC,CAAC;;IAEtBR,YAAY,CAAC,MAAM;MACjB,MAAMzB,KAAK,GAAG,EAAE;;MAEhB;MACA,KAAK,IAAI7C,CAAC,GAAG,CAAC,CAAC,EAAEA,CAAC,IAAI,CAAC,EAAEA,CAAC,EAAE,EAAE;QAC5B,KAAK,IAAIC,CAAC,GAAG,CAAC,CAAC,EAAEA,CAAC,IAAI,CAAC,EAAEA,CAAC,EAAE,EAAE;UAC5B,KAAK,IAAIC,CAAC,GAAG,CAAC,CAAC,EAAEA,CAAC,IAAI,CAAC,EAAEA,CAAC,EAAE,EAAE;YAC5B;YACA,IAAIF,CAAC,KAAK,CAAC,IAAIC,CAAC,KAAK,CAAC,IAAIC,CAAC,KAAK,CAAC,EAAE;;YAEnC;YACA,MAAMnC,OAAO,GAAG8E,KAAK,CAACM,MAAM;;YAE5B;YACA,MAAMhE,MAAM,GAAGsD,iBAAiB,CAAC1E,OAAO,CAAC;;YAEzC;YACAhC,OAAO,CAACC,GAAG,CAAC,iBAAiB+B,OAAO,QAAQiC,CAAC,KAAKC,CAAC,KAAKC,CAAC,IAAI,EAAEf,MAAM,CAAC;YAEtE0D,KAAK,CAACzC,IAAI,CAAC;cACT/B,QAAQ,EAAE,CAAC2B,CAAC,EAAEC,CAAC,EAAEC,CAAC,CAAC;cACnBf,MAAM;cACN2E,eAAe,EAAE,EAAE;cAAE;cACrB/F,OAAO,EAAEA,OAAO,CAAC;YACnB,CAAC,CAAC;UACJ;QACF;MACF;;MAEA;MACAhC,OAAO,CAACC,GAAG,CAAC,8CAA8C,CAAC;MAC3DD,OAAO,CAACC,GAAG,CAACe,IAAI,CAACC,SAAS,CAAC6F,KAAK,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC;;MAE3C;MACAnG,aAAa,CAAC,0CAA0C,EAAEmG,KAAK,CAAC;MAEhE,OAAOA,KAAK;IACd,CAAC,CAAC;EACJ,CAAC,EAAE,CAACyB,YAAY,CAAC,CAAC;;EAElB;EACA,MAAMkE,KAAK,GAAGlN,WAAW,CAAC,MAAM;IAC9B,IAAIiJ,WAAW,EAAE;IAEjBC,cAAc,CAAC,IAAI,CAAC;IAEpBzI,OAAO,CAACC,GAAG,CAAC,8BAA8B2I,WAAW,CAACxB,MAAM,QAAQ,CAAC;IACrEpH,OAAO,CAACC,GAAG,CAAC,kBAAkB,EAAE2I,WAAW,CAACtE,GAAG,CAACsH,CAAC,IAAI,GAAGA,CAAC,CAACxL,IAAI,IAAIwL,CAAC,CAACvL,SAAS,EAAE,CAAC,CAAC;IACjFL,OAAO,CAACC,GAAG,CAAC,8BAA8B,EAAE2I,WAAW,CAAC;IAExD,IAAIA,WAAW,CAACxB,MAAM,KAAK,CAAC,EAAE;MAC5BpH,OAAO,CAACC,GAAG,CAAC,iFAAiF,CAAC;MAC9FwI,cAAc,CAAC,KAAK,CAAC;MACrB;IACF;;IAEA;IACA,MAAMiE,aAAa,GAAG9D,WAAW,CAC9B+D,KAAK,CAAC,CAAC,CACPb,OAAO,CAAC,CAAC,CACTxH,GAAG,CAACuF,IAAI,KAAK;MACZzJ,IAAI,EAAEyJ,IAAI,CAACzJ,IAAI;MACfC,SAAS,EAAEwJ,IAAI,CAACxJ,SAAS,KAAK,WAAW,GAAG,kBAAkB,GAAG;IACnE,CAAC,CAAC,CAAC;IAELL,OAAO,CAACC,GAAG,CAAC,uBAAuB,EAAEyM,aAAa,CAACpI,GAAG,CAACsH,CAAC,IAAI,GAAGA,CAAC,CAACxL,IAAI,IAAIwL,CAAC,CAACvL,SAAS,EAAE,CAAC,CAAC;IACxFL,OAAO,CAACC,GAAG,CAAC,0BAA0ByM,aAAa,CAACtF,MAAM,WAAW,CAAC;;IAEtE;IACA6D,yBAAyB,CAACyB,aAAa,EAAE,MAAM;MAC7C;MACA7D,cAAc,CAAC,EAAE,CAAC;MAClBJ,cAAc,CAAC,KAAK,CAAC;MACrBzI,OAAO,CAACC,GAAG,CAAC,gBAAgB,CAAC;IAC/B,CAAC,CAAC;EAEJ,CAAC,EAAE,CAACuI,WAAW,EAAEI,WAAW,EAAEqC,yBAAyB,CAAC,CAAC;;EAGzD;EACAjL,OAAO,CAACC,GAAG,CAAC,oEAAoE,EAAEqI,SAAS,CAAClB,MAAM,CAAC;EACnG,IAAIkB,SAAS,CAAClB,MAAM,GAAG,CAAC,EAAE;IACxBpH,OAAO,CAACC,GAAG,CAAC,iDAAiD,EAAEqI,SAAS,CAAC,CAAC,CAAC,CAACtG,OAAO,EAAEhB,IAAI,CAACC,SAAS,CAACqH,SAAS,CAAC,CAAC,CAAC,CAAClF,MAAM,CAAC,CAAC;EAC3H;EAEA,OAAOb,QAAQ,CAAC;IACd+F,SAAS;IACTE,WAAW;IACXjF,YAAY;IACZC,gBAAgB;IAChByI,UAAU;IACVC,QAAQ;IACRM,KAAK;IACLC;EACF,CAAC,CAAC;AACJ;;AAEA;AAAAxE,GAAA,CAxkBSD,iBAAiB;AAAA4E,GAAA,GAAjB5E,iBAAiB;AAykB1B,SAAS6E,SAASA,CAAC;EAAEvE,SAAS;EAAEE,WAAW;EAAEjF,YAAY;EAAEC,gBAAgB;EAAEyI,UAAU;EAAEC,QAAQ;EAAEM,KAAK;EAAEC,KAAK;EAAEK,UAAU;EAAEC,UAAU,GAAG,KAAK;EAAEC,UAAU;EAAEC,OAAO;EAAEC,OAAO;EAAEC,YAAY;EAAEC,iBAAiB;EAAEC,iBAAiB,GAAG;AAAG,CAAC,EAAE;EAAAC,GAAA;EACxO,MAAM3J,QAAQ,GAAGtE,MAAM,CAAC,CAAC;EACzB,MAAM,CAACkO,aAAa,CAAC,GAAGnO,QAAQ,CAAC;IAAE6E,CAAC,EAAE,KAAK;IAAEC,CAAC,EAAE;EAAK,CAAC,CAAC;;EAEvD;EACA/E,KAAK,CAACK,SAAS,CAAC,MAAM;IACpBQ,OAAO,CAACC,GAAG,CAAC,+BAA+B,CAAC;IAC5C,IAAIkN,YAAY,EAAE;MAChBnN,OAAO,CAACC,GAAG,CAAC,sCAAsC,CAAC;MACnDkN,YAAY,CAAClB,UAAU,CAAC;IAC1B;IACA,IAAIe,UAAU,EAAE;MACdhN,OAAO,CAACC,GAAG,CAAC,oCAAoC,CAAC;MACjD+M,UAAU,CAACd,QAAQ,CAAC;IACtB;IACA,IAAIe,OAAO,EAAE;MACXjN,OAAO,CAACC,GAAG,CAAC,iCAAiC,CAAC;MAC9CgN,OAAO,CAACT,KAAK,CAAC;IAChB;IACA,IAAIU,OAAO,EAAE;MACXlN,OAAO,CAACC,GAAG,CAAC,iCAAiC,CAAC;MAC9CiN,OAAO,CAACT,KAAK,CAAC;IAChB;EACF,CAAC,EAAE,CAACR,UAAU,EAAEC,QAAQ,EAAEM,KAAK,EAAEC,KAAK,EAAEU,YAAY,EAAEH,UAAU,EAAEC,OAAO,EAAEC,OAAO,CAAC,CAAC;;EAEpF;;EAEA;;EAEA;EACA,MAAMM,YAAY,GAAIxL,OAAO,IAAK;IAChC,MAAM4B,UAAU,GAAG,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,CAAC;IACjT,OAAOA,UAAU,CAAC5B,OAAO,CAAC,IAAI,SAAS;EACzC,CAAC;EAED,MAAMyL,aAAa,GAAIzL,OAAO,IAAK;IACjC,MAAM6B,WAAW,GAAG,CAAC,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC;IAC3P,OAAOA,WAAW,CAAC7B,OAAO,CAAC,IAAI,SAAS;EAC1C,CAAC;;EAED;EACAxC,SAAS,CAAC,MAAM;IACd,IAAIkO,WAAW;IAEf,IAAIX,UAAU,IAAIpJ,QAAQ,CAACgK,OAAO,EAAE;MAClC,MAAMnD,OAAO,GAAGA,CAAA,KAAM;QACpB,IAAI7G,QAAQ,CAACgK,OAAO,EAAE;UACpBhK,QAAQ,CAACgK,OAAO,CAAC7K,QAAQ,CAACmB,CAAC,IAAIsJ,aAAa,CAACtJ,CAAC;UAC9CN,QAAQ,CAACgK,OAAO,CAAC7K,QAAQ,CAACoB,CAAC,IAAIqJ,aAAa,CAACrJ,CAAC;UAC9CwJ,WAAW,GAAG3C,qBAAqB,CAACP,OAAO,CAAC;QAC9C;MACF,CAAC;MACDA,OAAO,CAAC,CAAC;IACX;IAEA,OAAO,MAAM;MACX,IAAIkD,WAAW,EAAE;QACfE,oBAAoB,CAACF,WAAW,CAAC;MACnC;IACF,CAAC;EACH,CAAC,EAAE,CAACX,UAAU,EAAEQ,aAAa,CAAC,CAAC;;EAE/B;EACA/N,SAAS,CAAC,MAAM;IACd,IAAIsN,UAAU,IAAInJ,QAAQ,CAACgK,OAAO,EAAE;MAClChK,QAAQ,CAACgK,OAAO,CAAC7K,QAAQ,CAACmB,CAAC,IAAI,IAAI;MACnCN,QAAQ,CAACgK,OAAO,CAAC7K,QAAQ,CAACoB,CAAC,IAAI,IAAI;IACrC;EACF,CAAC,EAAE,CAAC4I,UAAU,CAAC,CAAC;;EAEhB;EACA,MAAMxH,oBAAoB,GAAG/F,WAAW,CAAC,CAAC2J,KAAK,EAAE3F,YAAY,KAAK;IAChE,IAAI,CAACA,YAAY,EAAE,OAAO,KAAK;IAE/B,MAAM,CAACU,CAAC,EAAEC,CAAC,EAAEC,CAAC,CAAC,GAAG+E,KAAK,CAAC5G,QAAQ;IAChC,MAAM;MAAElC;IAAK,CAAC,GAAGmD,YAAY;IAE7B,QAAQnD,IAAI;MACV,KAAK,GAAG;QAAE,OAAO6D,CAAC,KAAK,CAAC;MACxB,KAAK,GAAG;QAAE,OAAOA,CAAC,KAAK,CAAC,CAAC;MACzB,KAAK,GAAG;QAAE,OAAOC,CAAC,KAAK,CAAC;MACxB,KAAK,GAAG;QAAE,OAAOA,CAAC,KAAK,CAAC,CAAC;MACzB,KAAK,GAAG;QAAE,OAAOC,CAAC,KAAK,CAAC;MACxB,KAAK,GAAG;QAAE,OAAOA,CAAC,KAAK,CAAC,CAAC;MACzB;QAAS,OAAO,KAAK;IACvB;EACF,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAM0J,gBAAgB,GAAGtO,WAAW,CAAC,CAAC2J,KAAK,EAAE3F,YAAY,EAAEC,gBAAgB,KAAK;IAC9E,IAAI,CAACD,YAAY,IAAI,CAAC+B,oBAAoB,CAAC4D,KAAK,EAAE3F,YAAY,CAAC,EAAE;MAC/D,OAAO;QAAEU,CAAC,EAAE,CAAC;QAAEC,CAAC,EAAE,CAAC;QAAEC,CAAC,EAAE;MAAE,CAAC;IAC7B;IAEA,MAAM;MAAE/D,IAAI;MAAEC;IAAU,CAAC,GAAGkD,YAAY;IACxC,MAAMiC,IAAI,GAAGnF,SAAS,KAAK,WAAW,GAAG,CAAC,GAAG,CAAC,CAAC;IAC/C,MAAMoF,KAAK,GAAI1C,IAAI,CAACC,EAAE,GAAG,CAAC,GAAIQ,gBAAgB,GAAGgC,IAAI,CAAC,CAAC;;IAEvD,QAAQpF,IAAI;MACV,KAAK,GAAG;QAAE,OAAO;UAAE6D,CAAC,EAAE,CAAC;UAAEC,CAAC,EAAE,CAAC;UAAEC,CAAC,EAAEsB;QAAM,CAAC;MACzC,KAAK,GAAG;QAAE,OAAO;UAAExB,CAAC,EAAE,CAAC;UAAEC,CAAC,EAAE,CAAC;UAAEC,CAAC,EAAE,CAACsB;QAAM,CAAC;MAC1C,KAAK,GAAG;QAAE,OAAO;UAAExB,CAAC,EAAEwB,KAAK;UAAEvB,CAAC,EAAE,CAAC;UAAEC,CAAC,EAAE;QAAE,CAAC;MACzC,KAAK,GAAG;QAAE,OAAO;UAAEF,CAAC,EAAE,CAACwB,KAAK;UAAEvB,CAAC,EAAE,CAAC;UAAEC,CAAC,EAAE;QAAE,CAAC;MAC1C,KAAK,GAAG;QAAE,OAAO;UAAEF,CAAC,EAAE,CAAC;UAAEC,CAAC,EAAEuB,KAAK;UAAEtB,CAAC,EAAE;QAAE,CAAC;MACzC,KAAK,GAAG;QAAE,OAAO;UAAEF,CAAC,EAAE,CAAC;UAAEC,CAAC,EAAE,CAACuB,KAAK;UAAEtB,CAAC,EAAE;QAAE,CAAC;MAC1C;QAAS,OAAO;UAAEF,CAAC,EAAE,CAAC;UAAEC,CAAC,EAAE,CAAC;UAAEC,CAAC,EAAE;QAAE,CAAC;IACtC;EACF,CAAC,EAAE,CAACmB,oBAAoB,CAAC,CAAC;;EAI1B;EACA,MAAMiE,cAAc,GAAG,EAAE;EACzB,MAAMuE,iBAAiB,GAAG,EAAE;EAE5BxF,SAAS,CAACZ,OAAO,CAAC,CAACwB,KAAK,EAAEC,KAAK,KAAK;IAClC,MAAMnH,OAAO,GAAGkH,KAAK,CAAClH,OAAO,IAAImH,KAAK;IACtC,MAAM9F,aAAa,GAAGgK,iBAAiB,CAAChI,QAAQ,CAACrD,OAAO,CAAC;IACzD,MAAMsB,aAAa,GAAGD,aAAa,GAAG;MACpCS,SAAS,EAAE0J,YAAY,CAACxL,OAAO,CAAC;MAChC+B,UAAU,EAAE0J,aAAa,CAACzL,OAAO,CAAC;MAClCA,OAAO,EAAEA;IACX,CAAC,GAAG,IAAI;IAER,MAAM+L,SAAS,gBACbhO,OAAA,CAACoD,SAAS;MAERb,QAAQ,EAAE4G,KAAK,CAAC5G,QAAS;MACzBc,MAAM,EAAE8F,KAAK,CAAC9F,MAAO;MACrBpB,OAAO,EAAEA,OAAQ;MACjBqB,aAAa,EAAEA,aAAc;MAC7BC,aAAa,EAAEA,aAAc;MAC7BC,YAAY,EAAEA,YAAa;MAC3BC,gBAAgB,EAAEA;IAAiB,GAP9B,SAASxB,OAAO,EAAE;MAAAS,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAQxB,CACF;;IAED;IACA,IAAIW,YAAY,IAAI+B,oBAAoB,CAAC4D,KAAK,EAAE3F,YAAY,CAAC,EAAE;MAC7DgG,cAAc,CAAClF,IAAI,CAAC0J,SAAS,CAAC;IAChC,CAAC,MAAM;MACLD,iBAAiB,CAACzJ,IAAI,CAAC0J,SAAS,CAAC;IACnC;EACF,CAAC,CAAC;;EAEF;EACA,MAAMC,kBAAkB,GAAGzK,YAAY,GAAGsK,gBAAgB,CAACvF,SAAS,CAAC,CAAC,CAAC,EAAE/E,YAAY,EAAEC,gBAAgB,CAAC,GAAG;IAAES,CAAC,EAAE,CAAC;IAAEC,CAAC,EAAE,CAAC;IAAEC,CAAC,EAAE;EAAE,CAAC;EAE/H,oBACEpE,OAAA;IAAO6F,GAAG,EAAEjC,QAAS;IAAApB,QAAA,GAElBuL,iBAAiB,EAGjBvE,cAAc,CAACnC,MAAM,GAAG,CAAC,iBACxBrH,OAAA;MAAO+C,QAAQ,EAAE,CAACkL,kBAAkB,CAAC/J,CAAC,EAAE+J,kBAAkB,CAAC9J,CAAC,EAAE8J,kBAAkB,CAAC7J,CAAC,CAAE;MAAA5B,QAAA,EACjFgH;IAAc;MAAA9G,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACV,CACR;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACI,CAAC;AAEZ;;AAEA;AAAA0K,GAAA,CAnKST,SAAS;AAAAoB,GAAA,GAATpB,SAAS;AAoKlB,SAASqB,UAAUA,CAAC;EAAEpB,UAAU;EAAEC,UAAU,GAAG,KAAK;EAAEC,UAAU;EAAEC,OAAO;EAAEC,OAAO;EAAEC,YAAY;EAAEC,iBAAiB;EAAEC,iBAAiB,GAAG;AAAG,CAAC,EAAE;EAC7I,oBACEtN,OAAA,CAACN,MAAM;IACL0O,MAAM,EAAE;MAAE7L,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;MAAE8L,GAAG,EAAE;IAAG,CAAE;IACzCC,KAAK,EAAE;MAAEC,UAAU,EAAE;IAAoD,CAAE;IAAA/L,QAAA,gBAE3ExC,OAAA;MAAcwO,SAAS,EAAE;IAAI;MAAA9L,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eAChC7C,OAAA;MAAkBuC,QAAQ,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,CAAC,CAAE;MAACiM,SAAS,EAAE;IAAE;MAAA9L,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACzD7C,OAAA;MAAYuC,QAAQ,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,CAAE;MAACiM,SAAS,EAAE;IAAI;MAAA9L,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eAExD7C,OAAA,CAACiI,iBAAiB;MAAAzF,QAAA,EACfA,CAAC;QAAE+F,SAAS;QAAEE,WAAW;QAAEjF,YAAY;QAAEC,gBAAgB;QAAEyI,UAAU;QAAEC,QAAQ;QAAEM,KAAK;QAAEC;MAAM,CAAC,kBAC9F1M,OAAA,CAAC8M,SAAS;QACRvE,SAAS,EAAEA,SAAU;QACrBE,WAAW,EAAEA,WAAY;QACzBjF,YAAY,EAAEA,YAAa;QAC3BC,gBAAgB,EAAEA,gBAAiB;QACnCyI,UAAU,EAAEA,UAAW;QACvBC,QAAQ,EAAEA,QAAS;QACnBM,KAAK,EAAEA,KAAM;QACbC,KAAK,EAAEA,KAAM;QACbK,UAAU,EAAEA,UAAW;QACvBC,UAAU,EAAEA,UAAW;QACvBC,UAAU,EAAEA,UAAW;QACvBC,OAAO,EAAEA,OAAQ;QACjBC,OAAO,EAAEA,OAAQ;QACjBC,YAAY,EAAEA,YAAa;QAC3BC,iBAAiB,EAAEA,iBAAkB;QACrCC,iBAAiB,EAAEA;MAAkB;QAAA5K,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACtC;IACF;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACgB,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACd,CAAC;AAEb;AAAC4L,GAAA,GAlCQN,UAAU;AAoCnB,eAAeA,UAAU;AAAC,IAAAzH,EAAA,EAAAmG,GAAA,EAAAqB,GAAA,EAAAO,GAAA;AAAAC,YAAA,CAAAhI,EAAA;AAAAgI,YAAA,CAAA7B,GAAA;AAAA6B,YAAA,CAAAR,GAAA;AAAAQ,YAAA,CAAAD,GAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}