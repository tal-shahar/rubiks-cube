{"ast":null,"code":"import _objectSpread from \"C:/Repo/GitHub/rubiks-cube/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport { useThree, useLoader } from '@react-three/fiber';\nimport { CubeReflectionMapping, EquirectangularReflectionMapping, CubeTextureLoader } from 'three';\nimport { RGBELoader, EXRLoader } from 'three-stdlib';\nimport { HDRJPGLoader, GainMapLoader } from '@monogrid/gainmap-js';\nimport { presetsObj } from '../helpers/environment-assets.js';\nimport { sRGBEncoding, LinearEncoding } from '../helpers/deprecated.js';\nimport { useLayoutEffect } from 'react';\nconst CUBEMAP_ROOT = 'https://raw.githack.com/pmndrs/drei-assets/456060a26bbeb8fdf79326f224b6d99b8bcce736/hdri/';\nconst isArray = arr => Array.isArray(arr);\nconst defaultFiles = ['/px.png', '/nx.png', '/py.png', '/ny.png', '/pz.png', '/nz.png'];\nfunction useEnvironment() {\n  let {\n    files = defaultFiles,\n    path = '',\n    preset = undefined,\n    encoding = undefined,\n    extensions\n  } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  let loader = null;\n  let multiFile = false;\n  if (preset) {\n    validatePreset(preset);\n    files = presetsObj[preset];\n    path = CUBEMAP_ROOT;\n  }\n\n  // Everything else\n  multiFile = isArray(files);\n  const {\n    extension,\n    isCubemap\n  } = getExtension(files);\n  loader = getLoader(extension);\n  if (!loader) throw new Error('useEnvironment: Unrecognized file extension: ' + files);\n  const gl = useThree(state => state.gl);\n  useLayoutEffect(() => {\n    // Only required for gainmap\n    if (extension !== 'webp' && extension !== 'jpg' && extension !== 'jpeg') return;\n    function clearGainmapTexture() {\n      useLoader.clear(\n      // @ts-expect-error\n      loader, multiFile ? [files] : files);\n    }\n    gl.domElement.addEventListener('webglcontextlost', clearGainmapTexture, {\n      once: true\n    });\n  }, [files, gl.domElement]);\n  const loaderResult = useLoader(\n  // @ts-expect-error\n  loader, multiFile ? [files] : files, loader => {\n    // Gainmap requires a renderer\n    if (extension === 'webp' || extension === 'jpg' || extension === 'jpeg') {\n      loader.setRenderer(gl);\n    }\n    loader.setPath == null || loader.setPath(path);\n    if (extensions) extensions(loader);\n  });\n  let texture = multiFile ?\n  // @ts-ignore\n  loaderResult[0] : loaderResult;\n  if (extension === 'jpg' || extension === 'jpeg' || extension === 'webp') {\n    var _renderTarget;\n    texture = (_renderTarget = texture.renderTarget) == null ? void 0 : _renderTarget.texture;\n  }\n  texture.mapping = isCubemap ? CubeReflectionMapping : EquirectangularReflectionMapping;\n  if ('colorSpace' in texture) texture.colorSpace = (encoding !== null && encoding !== void 0 ? encoding : isCubemap) ? 'srgb' : 'srgb-linear';else texture.encoding = (encoding !== null && encoding !== void 0 ? encoding : isCubemap) ? sRGBEncoding : LinearEncoding;\n  return texture;\n}\nconst preloadDefaultOptions = {\n  files: defaultFiles,\n  path: '',\n  preset: undefined,\n  extensions: undefined\n};\nuseEnvironment.preload = preloadOptions => {\n  const options = _objectSpread(_objectSpread({}, preloadDefaultOptions), preloadOptions);\n  let {\n    files,\n    path = ''\n  } = options;\n  const {\n    preset,\n    extensions\n  } = options;\n  if (preset) {\n    validatePreset(preset);\n    files = presetsObj[preset];\n    path = CUBEMAP_ROOT;\n  }\n  const {\n    extension\n  } = getExtension(files);\n  if (extension === 'webp' || extension === 'jpg' || extension === 'jpeg') {\n    throw new Error('useEnvironment: Preloading gainmaps is not supported');\n  }\n  const loader = getLoader(extension);\n  if (!loader) throw new Error('useEnvironment: Unrecognized file extension: ' + files);\n  useLoader.preload(\n  // @ts-expect-error\n  loader, isArray(files) ? [files] : files, loader => {\n    loader.setPath == null || loader.setPath(path);\n    if (extensions) extensions(loader);\n  });\n};\nconst clearDefaultOptins = {\n  files: defaultFiles,\n  preset: undefined\n};\nuseEnvironment.clear = clearOptions => {\n  const options = _objectSpread(_objectSpread({}, clearDefaultOptins), clearOptions);\n  let {\n    files\n  } = options;\n  const {\n    preset\n  } = options;\n  if (preset) {\n    validatePreset(preset);\n    files = presetsObj[preset];\n  }\n  const {\n    extension\n  } = getExtension(files);\n  const loader = getLoader(extension);\n  if (!loader) throw new Error('useEnvironment: Unrecognized file extension: ' + files);\n  useLoader.clear(\n  // @ts-expect-error\n  loader, isArray(files) ? [files] : files);\n};\nfunction validatePreset(preset) {\n  if (!(preset in presetsObj)) throw new Error('Preset must be one of: ' + Object.keys(presetsObj).join(', '));\n}\nfunction getExtension(files) {\n  var _firstEntry$split$pop;\n  const isCubemap = isArray(files) && files.length === 6;\n  const isGainmap = isArray(files) && files.length === 3 && files.some(file => file.endsWith('json'));\n  const firstEntry = isArray(files) ? files[0] : files;\n\n  // Everything else\n  const extension = isCubemap ? 'cube' : isGainmap ? 'webp' : firstEntry.startsWith('data:application/exr') ? 'exr' : firstEntry.startsWith('data:application/hdr') ? 'hdr' : firstEntry.startsWith('data:image/jpeg') ? 'jpg' : (_firstEntry$split$pop = firstEntry.split('.').pop()) == null || (_firstEntry$split$pop = _firstEntry$split$pop.split('?')) == null || (_firstEntry$split$pop = _firstEntry$split$pop.shift()) == null ? void 0 : _firstEntry$split$pop.toLowerCase();\n  return {\n    extension,\n    isCubemap,\n    isGainmap\n  };\n}\nfunction getLoader(extension) {\n  const loader = extension === 'cube' ? CubeTextureLoader : extension === 'hdr' ? RGBELoader : extension === 'exr' ? EXRLoader : extension === 'jpg' || extension === 'jpeg' ? HDRJPGLoader : extension === 'webp' ? GainMapLoader : null;\n  return loader;\n}\nexport { useEnvironment };","map":{"version":3,"names":["useThree","useLoader","CubeReflectionMapping","EquirectangularReflectionMapping","CubeTextureLoader","RGBELoader","EXRLoader","HDRJPGLoader","GainMapLoader","presetsObj","sRGBEncoding","LinearEncoding","useLayoutEffect","CUBEMAP_ROOT","isArray","arr","Array","defaultFiles","useEnvironment","files","path","preset","undefined","encoding","extensions","arguments","length","loader","multiFile","validatePreset","extension","isCubemap","getExtension","getLoader","Error","gl","state","clearGainmapTexture","clear","domElement","addEventListener","once","loaderResult","setRenderer","setPath","texture","_renderTarget","renderTarget","mapping","colorSpace","preloadDefaultOptions","preload","preloadOptions","options","_objectSpread","clearDefaultOptins","clearOptions","Object","keys","join","_firstEntry$split$pop","isGainmap","some","file","endsWith","firstEntry","startsWith","split","pop","shift","toLowerCase"],"sources":["C:/Repo/GitHub/rubiks-cube/node_modules/@react-three/drei/core/useEnvironment.js"],"sourcesContent":["import { useThree, useLoader } from '@react-three/fiber';\nimport { CubeReflectionMapping, EquirectangularReflectionMapping, CubeTextureLoader } from 'three';\nimport { RGBELoader, EXRLoader } from 'three-stdlib';\nimport { HDRJPGLoader, GainMapLoader } from '@monogrid/gainmap-js';\nimport { presetsObj } from '../helpers/environment-assets.js';\nimport { sRGBEncoding, LinearEncoding } from '../helpers/deprecated.js';\nimport { useLayoutEffect } from 'react';\n\nconst CUBEMAP_ROOT = 'https://raw.githack.com/pmndrs/drei-assets/456060a26bbeb8fdf79326f224b6d99b8bcce736/hdri/';\nconst isArray = arr => Array.isArray(arr);\nconst defaultFiles = ['/px.png', '/nx.png', '/py.png', '/ny.png', '/pz.png', '/nz.png'];\nfunction useEnvironment({\n  files = defaultFiles,\n  path = '',\n  preset = undefined,\n  encoding = undefined,\n  extensions\n} = {}) {\n  let loader = null;\n  let multiFile = false;\n  if (preset) {\n    validatePreset(preset);\n    files = presetsObj[preset];\n    path = CUBEMAP_ROOT;\n  }\n\n  // Everything else\n  multiFile = isArray(files);\n  const {\n    extension,\n    isCubemap\n  } = getExtension(files);\n  loader = getLoader(extension);\n  if (!loader) throw new Error('useEnvironment: Unrecognized file extension: ' + files);\n  const gl = useThree(state => state.gl);\n  useLayoutEffect(() => {\n    // Only required for gainmap\n    if (extension !== 'webp' && extension !== 'jpg' && extension !== 'jpeg') return;\n    function clearGainmapTexture() {\n      useLoader.clear(\n      // @ts-expect-error\n      loader, multiFile ? [files] : files);\n    }\n    gl.domElement.addEventListener('webglcontextlost', clearGainmapTexture, {\n      once: true\n    });\n  }, [files, gl.domElement]);\n  const loaderResult = useLoader(\n  // @ts-expect-error\n  loader, multiFile ? [files] : files, loader => {\n    // Gainmap requires a renderer\n    if (extension === 'webp' || extension === 'jpg' || extension === 'jpeg') {\n      loader.setRenderer(gl);\n    }\n    loader.setPath == null || loader.setPath(path);\n    if (extensions) extensions(loader);\n  });\n  let texture = multiFile ?\n  // @ts-ignore\n  loaderResult[0] : loaderResult;\n  if (extension === 'jpg' || extension === 'jpeg' || extension === 'webp') {\n    var _renderTarget;\n    texture = (_renderTarget = texture.renderTarget) == null ? void 0 : _renderTarget.texture;\n  }\n  texture.mapping = isCubemap ? CubeReflectionMapping : EquirectangularReflectionMapping;\n  if ('colorSpace' in texture) texture.colorSpace = (encoding !== null && encoding !== void 0 ? encoding : isCubemap) ? 'srgb' : 'srgb-linear';else texture.encoding = (encoding !== null && encoding !== void 0 ? encoding : isCubemap) ? sRGBEncoding : LinearEncoding;\n  return texture;\n}\nconst preloadDefaultOptions = {\n  files: defaultFiles,\n  path: '',\n  preset: undefined,\n  extensions: undefined\n};\nuseEnvironment.preload = preloadOptions => {\n  const options = {\n    ...preloadDefaultOptions,\n    ...preloadOptions\n  };\n  let {\n    files,\n    path = ''\n  } = options;\n  const {\n    preset,\n    extensions\n  } = options;\n  if (preset) {\n    validatePreset(preset);\n    files = presetsObj[preset];\n    path = CUBEMAP_ROOT;\n  }\n  const {\n    extension\n  } = getExtension(files);\n  if (extension === 'webp' || extension === 'jpg' || extension === 'jpeg') {\n    throw new Error('useEnvironment: Preloading gainmaps is not supported');\n  }\n  const loader = getLoader(extension);\n  if (!loader) throw new Error('useEnvironment: Unrecognized file extension: ' + files);\n  useLoader.preload(\n  // @ts-expect-error\n  loader, isArray(files) ? [files] : files, loader => {\n    loader.setPath == null || loader.setPath(path);\n    if (extensions) extensions(loader);\n  });\n};\nconst clearDefaultOptins = {\n  files: defaultFiles,\n  preset: undefined\n};\nuseEnvironment.clear = clearOptions => {\n  const options = {\n    ...clearDefaultOptins,\n    ...clearOptions\n  };\n  let {\n    files\n  } = options;\n  const {\n    preset\n  } = options;\n  if (preset) {\n    validatePreset(preset);\n    files = presetsObj[preset];\n  }\n  const {\n    extension\n  } = getExtension(files);\n  const loader = getLoader(extension);\n  if (!loader) throw new Error('useEnvironment: Unrecognized file extension: ' + files);\n  useLoader.clear(\n  // @ts-expect-error\n  loader, isArray(files) ? [files] : files);\n};\nfunction validatePreset(preset) {\n  if (!(preset in presetsObj)) throw new Error('Preset must be one of: ' + Object.keys(presetsObj).join(', '));\n}\nfunction getExtension(files) {\n  var _firstEntry$split$pop;\n  const isCubemap = isArray(files) && files.length === 6;\n  const isGainmap = isArray(files) && files.length === 3 && files.some(file => file.endsWith('json'));\n  const firstEntry = isArray(files) ? files[0] : files;\n\n  // Everything else\n  const extension = isCubemap ? 'cube' : isGainmap ? 'webp' : firstEntry.startsWith('data:application/exr') ? 'exr' : firstEntry.startsWith('data:application/hdr') ? 'hdr' : firstEntry.startsWith('data:image/jpeg') ? 'jpg' : (_firstEntry$split$pop = firstEntry.split('.').pop()) == null || (_firstEntry$split$pop = _firstEntry$split$pop.split('?')) == null || (_firstEntry$split$pop = _firstEntry$split$pop.shift()) == null ? void 0 : _firstEntry$split$pop.toLowerCase();\n  return {\n    extension,\n    isCubemap,\n    isGainmap\n  };\n}\nfunction getLoader(extension) {\n  const loader = extension === 'cube' ? CubeTextureLoader : extension === 'hdr' ? RGBELoader : extension === 'exr' ? EXRLoader : extension === 'jpg' || extension === 'jpeg' ? HDRJPGLoader : extension === 'webp' ? GainMapLoader : null;\n  return loader;\n}\n\nexport { useEnvironment };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}