{"ast":null,"code":"var _jsxFileName = \"C:\\\\Repo\\\\GitHub\\\\rubiks-cube\\\\src\\\\components\\\\RubiksCube.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$(),\n  _s3 = $RefreshSig$();\nimport React, { useRef, useMemo, useState, useCallback } from 'react';\nimport { Canvas, useFrame } from '@react-three/fiber';\nimport { OrbitControls, Environment } from '@react-three/drei';\nimport * as THREE from 'three';\n\n// Function to render numbers using small squares\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction renderNumber(number, scale) {\n  const digits = number.toString().split('');\n  const digitWidth = scale * 0.3;\n  const digitHeight = scale * 0.5;\n  const spacing = scale * 0.1;\n  return /*#__PURE__*/_jsxDEV(\"group\", {\n    children: digits.map((digit, index) => {\n      const offsetX = (index - (digits.length - 1) / 2) * (digitWidth + spacing);\n      return /*#__PURE__*/_jsxDEV(\"group\", {\n        position: [offsetX, 0, 0.004],\n        children: renderDigit(parseInt(digit), digitWidth, digitHeight)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 18,\n        columnNumber: 11\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 14,\n    columnNumber: 5\n  }, this);\n}\n\n// Function to render individual digits using small squares\nfunction renderDigit(digit, width, height) {\n  const segments = {\n    0: [[-1, 1], [1, 1], [1, -1], [-1, -1], [-1, 1]],\n    1: [[0, 1], [0, -1]],\n    2: [[-1, 1], [1, 1], [1, 0], [-1, 0], [-1, -1], [1, -1]],\n    3: [[-1, 1], [1, 1], [1, 0], [1, -1], [-1, -1]],\n    4: [[-1, 1], [-1, 0], [1, 0], [1, 1], [1, -1]],\n    5: [[1, 1], [-1, 1], [-1, 0], [1, 0], [1, -1], [-1, -1]],\n    6: [[1, 1], [-1, 1], [-1, 0], [-1, -1], [1, -1], [1, 0]],\n    7: [[-1, 1], [1, 1], [1, 0], [1, -1]],\n    8: [[-1, 1], [1, 1], [1, 0], [-1, 0], [-1, -1], [1, -1], [1, 0], [-1, 0]],\n    9: [[1, 1], [-1, 1], [-1, 0], [1, 0], [1, -1], [-1, -1]]\n  };\n  const path = segments[digit] || [];\n  const segmentSize = Math.min(width, height) * 0.1;\n  return /*#__PURE__*/_jsxDEV(\"group\", {\n    children: path.map((point, index) => /*#__PURE__*/_jsxDEV(\"mesh\", {\n      position: [point[0] * width * 0.3, point[1] * height * 0.3, 0],\n      children: [/*#__PURE__*/_jsxDEV(\"planeGeometry\", {\n        args: [segmentSize, segmentSize]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: \"black\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 11\n      }, this)]\n    }, index, true, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 5\n  }, this);\n}\n\n// Individual cube piece component with proper multi-colored faces\nfunction CubePiece({\n  position,\n  colors,\n  size = 0.95,\n  pieceId = 0\n}) {\n  _s();\n  const meshRef = useRef();\n\n  // Log piece information for debugging\n  React.useEffect(() => {\n    console.log(`Piece ${pieceId} at position [${position.join(', ')}] has colors:`, colors);\n  }, [pieceId, position, colors]);\n  const colorMap = {\n    'white': '#ffffff',\n    'yellow': '#ffd700',\n    'red': '#ff0000',\n    'orange': '#ff8c00',\n    'blue': '#0000ff',\n    'green': '#00ff00',\n    'black': '#1a1a1a'\n  };\n\n  // Create a solid cube geometry for the base\n  const cubeGeometry = useMemo(() => {\n    return new THREE.BoxGeometry(size, size, size);\n  }, [size]);\n\n  // Create individual face geometries for each side\n  const faceGeometry = useMemo(() => {\n    const geometry = new THREE.PlaneGeometry(size, size);\n    return geometry;\n  }, [size]);\n\n  // Get the color for a face based on the face index\n  const getFaceColor = faceIndex => {\n    // Face indices: 0=front, 1=back, 2=right, 3=left, 4=top, 5=bottom\n    switch (faceIndex) {\n      case 0:\n        return colors.front;\n      // Front face\n      case 1:\n        return colors.back;\n      // Back face\n      case 2:\n        return colors.right;\n      // Right face\n      case 3:\n        return colors.left;\n      // Left face\n      case 4:\n        return colors.top;\n      // Top face\n      case 5:\n        return colors.bottom;\n      // Bottom face\n      default:\n        return 'black';\n    }\n  };\n\n  // Face positions and rotations for a cube - faces positioned on the surface\n  const faces = [{\n    position: [0, 0, size / 2 + 0.001],\n    rotation: [0, 0, 0],\n    color: getFaceColor(0),\n    faceName: 'Front'\n  },\n  // Front\n  {\n    position: [0, 0, -size / 2 - 0.001],\n    rotation: [0, Math.PI, 0],\n    color: getFaceColor(1),\n    faceName: 'Back'\n  },\n  // Back\n  {\n    position: [size / 2 + 0.001, 0, 0],\n    rotation: [0, Math.PI / 2, 0],\n    color: getFaceColor(2),\n    faceName: 'Right'\n  },\n  // Right\n  {\n    position: [-size / 2 - 0.001, 0, 0],\n    rotation: [0, -Math.PI / 2, 0],\n    color: getFaceColor(3),\n    faceName: 'Left'\n  },\n  // Left\n  {\n    position: [0, size / 2 + 0.001, 0],\n    rotation: [-Math.PI / 2, 0, 0],\n    color: getFaceColor(4),\n    faceName: 'Top'\n  },\n  // Top\n  {\n    position: [0, -size / 2 - 0.001, 0],\n    rotation: [Math.PI / 2, 0, 0],\n    color: getFaceColor(5),\n    faceName: 'Bottom'\n  } // Bottom\n  ];\n  return /*#__PURE__*/_jsxDEV(\"group\", {\n    ref: meshRef,\n    position: position,\n    children: [/*#__PURE__*/_jsxDEV(\"mesh\", {\n      children: [/*#__PURE__*/_jsxDEV(\"primitive\", {\n        object: cubeGeometry\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"meshPhongMaterial\", {\n        color: \"#2a2a2a\",\n        side: THREE.DoubleSide,\n        shininess: 50,\n        specular: 0x111111\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 7\n    }, this), faces.map((face, index) => /*#__PURE__*/_jsxDEV(\"mesh\", {\n      position: face.position,\n      rotation: face.rotation,\n      children: [/*#__PURE__*/_jsxDEV(\"primitive\", {\n        object: faceGeometry\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"meshPhongMaterial\", {\n        color: colorMap[face.color] || colorMap['black'],\n        side: THREE.FrontSide,\n        shininess: 100,\n        specular: 0x222222,\n        emissive: colorMap[face.color] || colorMap['black'],\n        emissiveIntensity: 0.3\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 11\n      }, this)]\n    }, index, true, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 9\n    }, this)), faces.map((face, index) => {\n      if (face.color === 'black') return null; // Don't show labels on black faces\n\n      return /*#__PURE__*/_jsxDEV(\"group\", {\n        position: face.position,\n        rotation: face.rotation,\n        children: [/*#__PURE__*/_jsxDEV(\"mesh\", {\n          position: [0, 0, 0.01],\n          children: [/*#__PURE__*/_jsxDEV(\"planeGeometry\", {\n            args: [size * 0.5, size * 0.5]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 147,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n            color: \"white\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 148,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"mesh\", {\n          position: [0, 0, 0.011],\n          children: [/*#__PURE__*/_jsxDEV(\"planeGeometry\", {\n            args: [size * 0.45, size * 0.45]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 152,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n            color: \"black\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 153,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 151,\n          columnNumber: 13\n        }, this), createNumberDisplay(pieceId, size)]\n      }, `number-${index}`, true, {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 11\n      }, this);\n    }), /*#__PURE__*/_jsxDEV(\"mesh\", {\n      position: [0, 0, 0.005],\n      children: [/*#__PURE__*/_jsxDEV(\"planeGeometry\", {\n        args: [size * 0.7, size * 0.7]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: \"yellow\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"mesh\", {\n      position: [0, 0, 0.006],\n      children: [/*#__PURE__*/_jsxDEV(\"planeGeometry\", {\n        args: [size * 0.6, size * 0.6]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: \"black\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 7\n    }, this), createNumberDisplay(pieceId, size * 0.8)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 112,\n    columnNumber: 5\n  }, this);\n}\n\n// Cube state management and rotation logic\n_s(CubePiece, \"bKf4jm4WUTjktSFU7AKQ4whFGII=\");\n_c = CubePiece;\nfunction useCubeState() {\n  _s2();\n  const [cubeState, setCubeState] = useState(() => {\n    // Initialize solved cube state - track positions and original colors\n    // A real Rubik's cube has 26 pieces (not 27) - the center core is missing\n    const state = [];\n    for (let x = -1; x <= 1; x++) {\n      for (let y = -1; y <= 1; y++) {\n        for (let z = -1; z <= 1; z++) {\n          // Skip the center piece (0, 0, 0) - this is the core mechanism\n          if (x === 0 && y === 0 && z === 0) continue;\n          const position = [x, y, z];\n          // Store original colors for each face based on solved state\n          // Each piece gets colors based on its position type (corner, edge, center)\n          const colors = {\n            front: 'black',\n            back: 'black',\n            right: 'black',\n            left: 'black',\n            top: 'black',\n            bottom: 'black'\n          };\n\n          // Determine piece type and assign appropriate colors\n          const isCorner = x !== 0 && y !== 0 && z !== 0;\n          const isEdge = x === 0 && y !== 0 && z !== 0 || x !== 0 && y === 0 && z !== 0 || x !== 0 && y !== 0 && z === 0;\n          const isCenter = x === 0 && y === 0 && z !== 0 || x === 0 && y !== 0 && z === 0 || x !== 0 && y === 0 && z === 0;\n          if (isCorner) {\n            // Corner pieces: 3 colors based on which faces they touch\n            if (z === 1) colors.front = 'white';\n            if (z === -1) colors.back = 'yellow';\n            if (x === 1) colors.right = 'red';\n            if (x === -1) colors.left = 'orange';\n            if (y === 1) colors.top = 'blue';\n            if (y === -1) colors.bottom = 'green';\n          } else if (isEdge) {\n            // Edge pieces: 2 colors based on which faces they touch\n            if (z === 1) colors.front = 'white';\n            if (z === -1) colors.back = 'yellow';\n            if (x === 1) colors.right = 'red';\n            if (x === -1) colors.left = 'orange';\n            if (y === 1) colors.top = 'blue';\n            if (y === -1) colors.bottom = 'green';\n          } else if (isCenter) {\n            // Center pieces: 1 specific color each\n            if (z === 1) colors.front = 'white';\n            if (z === -1) colors.back = 'yellow';\n            if (x === 1) colors.right = 'red';\n            if (x === -1) colors.left = 'orange';\n            if (y === 1) colors.top = 'blue';\n            if (y === -1) colors.bottom = 'green';\n          }\n          state.push({\n            position: [...position],\n            colors\n          });\n        }\n      }\n    }\n    return state;\n  });\n  const [isAnimating, setIsAnimating] = useState(false);\n  const [animationQueue, setAnimationQueue] = useState([]);\n\n  // Rotation functions for each face\n  const rotateFace = useCallback((face, direction) => {\n    if (isAnimating) return;\n    setIsAnimating(true);\n    setCubeState(prevState => {\n      const newState = [...prevState];\n\n      // Define which pieces belong to each face\n      const facePieces = {\n        'F': newState.filter(p => p.position[2] === 1),\n        // Front face\n        'B': newState.filter(p => p.position[2] === -1),\n        // Back face\n        'R': newState.filter(p => p.position[0] === 1),\n        // Right face\n        'L': newState.filter(p => p.position[0] === -1),\n        // Left face\n        'U': newState.filter(p => p.position[1] === 1),\n        // Up face\n        'D': newState.filter(p => p.position[1] === -1) // Down face\n      };\n      const pieces = facePieces[face];\n      if (!pieces) return prevState;\n\n      // Apply rotation based on face and direction\n      pieces.forEach(piece => {\n        const [x, y, z] = piece.position;\n        let newX = x,\n          newY = y,\n          newZ = z;\n        let newColors = {\n          ...piece.colors\n        };\n        switch (face) {\n          case 'F':\n            // Front face rotation\n            if (direction === 'clockwise') {\n              newX = -y;\n              newY = x;\n              // Rotate colors: top->right, right->bottom, bottom->left, left->top\n              const temp = newColors.top;\n              newColors.top = newColors.left;\n              newColors.left = newColors.bottom;\n              newColors.bottom = newColors.right;\n              newColors.right = temp;\n            } else {\n              newX = y;\n              newY = -x;\n              // Rotate colors: top->left, left->bottom, bottom->right, right->top\n              const temp = newColors.top;\n              newColors.top = newColors.right;\n              newColors.right = newColors.bottom;\n              newColors.bottom = newColors.left;\n              newColors.left = temp;\n            }\n            break;\n          case 'B':\n            // Back face rotation\n            if (direction === 'clockwise') {\n              newX = y;\n              newY = -x;\n              // Rotate colors: top->left, left->bottom, bottom->right, right->top\n              const temp = newColors.top;\n              newColors.top = newColors.right;\n              newColors.right = newColors.bottom;\n              newColors.bottom = newColors.left;\n              newColors.left = temp;\n            } else {\n              newX = -y;\n              newY = x;\n              // Rotate colors: top->right, right->bottom, bottom->left, left->top\n              const temp = newColors.top;\n              newColors.top = newColors.left;\n              newColors.left = newColors.bottom;\n              newColors.bottom = newColors.right;\n              newColors.right = temp;\n            }\n            break;\n          case 'R':\n            // Right face rotation\n            if (direction === 'clockwise') {\n              newZ = -y;\n              newY = z;\n              // Rotate colors: top->front, front->bottom, bottom->back, back->top\n              const temp = newColors.top;\n              newColors.top = newColors.back;\n              newColors.back = newColors.bottom;\n              newColors.bottom = newColors.front;\n              newColors.front = temp;\n            } else {\n              newZ = y;\n              newY = -z;\n              // Rotate colors: top->back, back->bottom, bottom->front, front->top\n              const temp = newColors.top;\n              newColors.top = newColors.front;\n              newColors.front = newColors.bottom;\n              newColors.bottom = newColors.back;\n              newColors.back = temp;\n            }\n            break;\n          case 'L':\n            // Left face rotation\n            if (direction === 'clockwise') {\n              newZ = y;\n              newY = -z;\n              // Rotate colors: top->back, back->bottom, bottom->front, front->top\n              const temp = newColors.top;\n              newColors.top = newColors.front;\n              newColors.front = newColors.bottom;\n              newColors.bottom = newColors.back;\n              newColors.back = temp;\n            } else {\n              newZ = -y;\n              newY = z;\n              // Rotate colors: top->front, front->bottom, bottom->back, back->top\n              const temp = newColors.top;\n              newColors.top = newColors.back;\n              newColors.back = newColors.bottom;\n              newColors.bottom = newColors.front;\n              newColors.front = temp;\n            }\n            break;\n          case 'U':\n            // Up face rotation\n            if (direction === 'clockwise') {\n              newX = z;\n              newZ = -x;\n              // Rotate colors: front->right, right->back, back->left, left->front\n              const temp = newColors.front;\n              newColors.front = newColors.left;\n              newColors.left = newColors.back;\n              newColors.back = newColors.right;\n              newColors.right = temp;\n            } else {\n              newX = -z;\n              newZ = x;\n              // Rotate colors: front->left, left->back, back->right, right->front\n              const temp = newColors.front;\n              newColors.front = newColors.right;\n              newColors.right = newColors.back;\n              newColors.back = newColors.left;\n              newColors.left = temp;\n            }\n            break;\n          case 'D':\n            // Down face rotation\n            if (direction === 'clockwise') {\n              newX = -z;\n              newZ = x;\n              // Rotate colors: front->left, left->back, back->right, right->front\n              const temp = newColors.front;\n              newColors.front = newColors.right;\n              newColors.right = newColors.back;\n              newColors.back = newColors.left;\n              newColors.left = temp;\n            } else {\n              newX = z;\n              newZ = -x;\n              // Rotate colors: front->right, right->back, back->left, left->front\n              const temp = newColors.front;\n              newColors.front = newColors.left;\n              newColors.left = newColors.back;\n              newColors.back = newColors.right;\n              newColors.right = temp;\n            }\n            break;\n        }\n        piece.position = [newX, newY, newZ];\n        piece.colors = newColors;\n      });\n      return newState;\n    });\n\n    // Animation delay\n    setTimeout(() => setIsAnimating(false), 300);\n  }, [isAnimating]);\n\n  // Execute scramble moves\n  const executeScramble = useCallback(queue => {\n    if (queue.length === 0) {\n      setIsAnimating(false);\n      return;\n    }\n    const {\n      move,\n      direction\n    } = queue[0];\n    console.log(`Executing move: ${move} ${direction}`);\n\n    // Apply the rotation immediately\n    setCubeState(prevState => {\n      const newState = [...prevState];\n\n      // Define which pieces belong to each face\n      const facePieces = {\n        'F': newState.filter(p => p.position[2] === 1),\n        // Front face\n        'B': newState.filter(p => p.position[2] === -1),\n        // Back face\n        'R': newState.filter(p => p.position[0] === 1),\n        // Right face\n        'L': newState.filter(p => p.position[0] === -1),\n        // Left face\n        'U': newState.filter(p => p.position[1] === 1),\n        // Up face\n        'D': newState.filter(p => p.position[1] === -1) // Down face\n      };\n      const pieces = facePieces[move];\n      if (!pieces) return prevState;\n\n      // Apply rotation based on face and direction\n      pieces.forEach(piece => {\n        const [x, y, z] = piece.position;\n        let newX = x,\n          newY = y,\n          newZ = z;\n        let newColors = {\n          ...piece.colors\n        };\n        switch (move) {\n          case 'F':\n            // Front face rotation\n            if (direction === 'clockwise') {\n              newX = -y;\n              newY = x;\n              // Rotate colors: top->right, right->bottom, bottom->left, left->top\n              const temp = newColors.top;\n              newColors.top = newColors.left;\n              newColors.left = newColors.bottom;\n              newColors.bottom = newColors.right;\n              newColors.right = temp;\n            } else {\n              newX = y;\n              newY = -x;\n              // Rotate colors: top->left, left->bottom, bottom->right, right->top\n              const temp = newColors.top;\n              newColors.top = newColors.right;\n              newColors.right = newColors.bottom;\n              newColors.bottom = newColors.left;\n              newColors.left = temp;\n            }\n            break;\n          case 'B':\n            // Back face rotation\n            if (direction === 'clockwise') {\n              newX = y;\n              newY = -x;\n              // Rotate colors: top->left, left->bottom, bottom->right, right->top\n              const temp = newColors.top;\n              newColors.top = newColors.right;\n              newColors.right = newColors.bottom;\n              newColors.bottom = newColors.left;\n              newColors.left = temp;\n            } else {\n              newX = -y;\n              newY = x;\n              // Rotate colors: top->right, right->bottom, bottom->left, left->top\n              const temp = newColors.top;\n              newColors.top = newColors.left;\n              newColors.left = newColors.bottom;\n              newColors.bottom = newColors.right;\n              newColors.right = temp;\n            }\n            break;\n          case 'R':\n            // Right face rotation\n            if (direction === 'clockwise') {\n              newZ = -y;\n              newY = z;\n              // Rotate colors: top->front, front->bottom, bottom->back, back->top\n              const temp = newColors.top;\n              newColors.top = newColors.back;\n              newColors.back = newColors.bottom;\n              newColors.bottom = newColors.front;\n              newColors.front = temp;\n            } else {\n              newZ = y;\n              newY = -z;\n              // Rotate colors: top->back, back->bottom, bottom->front, front->top\n              const temp = newColors.top;\n              newColors.top = newColors.front;\n              newColors.front = newColors.bottom;\n              newColors.bottom = newColors.back;\n              newColors.back = temp;\n            }\n            break;\n          case 'L':\n            // Left face rotation\n            if (direction === 'clockwise') {\n              newZ = y;\n              newY = -z;\n              // Rotate colors: top->back, back->bottom, bottom->front, front->top\n              const temp = newColors.top;\n              newColors.top = newColors.front;\n              newColors.front = newColors.bottom;\n              newColors.bottom = newColors.back;\n              newColors.back = temp;\n            } else {\n              newZ = -y;\n              newY = z;\n              // Rotate colors: top->front, front->bottom, bottom->back, back->top\n              const temp = newColors.top;\n              newColors.top = newColors.back;\n              newColors.back = newColors.bottom;\n              newColors.bottom = newColors.front;\n              newColors.front = temp;\n            }\n            break;\n          case 'U':\n            // Up face rotation\n            if (direction === 'clockwise') {\n              newX = z;\n              newZ = -x;\n              // Rotate colors: front->right, right->back, back->left, left->front\n              const temp = newColors.front;\n              newColors.front = newColors.left;\n              newColors.left = newColors.back;\n              newColors.back = newColors.right;\n              newColors.right = temp;\n            } else {\n              newX = -z;\n              newZ = x;\n              // Rotate colors: front->left, left->back, back->right, right->front\n              const temp = newColors.front;\n              newColors.front = newColors.right;\n              newColors.right = newColors.back;\n              newColors.back = newColors.left;\n              newColors.left = temp;\n            }\n            break;\n          case 'D':\n            // Down face rotation\n            if (direction === 'clockwise') {\n              newX = -z;\n              newZ = x;\n              // Rotate colors: front->left, left->back, back->right, right->front\n              const temp = newColors.front;\n              newColors.front = newColors.right;\n              newColors.right = newColors.back;\n              newColors.back = newColors.left;\n              newColors.left = temp;\n            } else {\n              newX = z;\n              newZ = -x;\n              // Rotate colors: front->right, right->back, back->left, left->front\n              const temp = newColors.front;\n              newColors.front = newColors.left;\n              newColors.left = newColors.back;\n              newColors.back = newColors.right;\n              newColors.right = temp;\n            }\n            break;\n        }\n        piece.position = [newX, newY, newZ];\n        piece.colors = newColors;\n      });\n      return newState;\n    });\n\n    // Continue with the next move after a delay\n    setTimeout(() => {\n      executeScramble(queue.slice(1));\n    }, 350);\n  }, []);\n\n  // Scramble function using standard notation\n  const scramble = useCallback(() => {\n    console.log('Scramble function called');\n    if (isAnimating) {\n      console.log('Already animating, skipping scramble');\n      return;\n    }\n    setIsAnimating(true);\n    console.log('Starting scramble animation');\n    const moves = ['F', 'B', 'R', 'L', 'U', 'D'];\n    const directions = ['clockwise', 'counterclockwise'];\n    const scrambleLength = 20;\n    let currentQueue = [];\n    let lastMove = '';\n    for (let i = 0; i < scrambleLength; i++) {\n      let move;\n      let direction;\n\n      // Avoid doing the same move twice in a row\n      do {\n        move = moves[Math.floor(Math.random() * moves.length)];\n      } while (move === lastMove);\n      direction = directions[Math.floor(Math.random() * directions.length)];\n      lastMove = move;\n      currentQueue.push({\n        move,\n        direction\n      });\n    }\n    console.log('Generated scramble queue:', currentQueue);\n    setAnimationQueue(currentQueue);\n    executeScramble(currentQueue);\n  }, [isAnimating, executeScramble]);\n\n  // Reset function\n  const reset = useCallback(() => {\n    if (isAnimating) return;\n    setCubeState(() => {\n      const state = [];\n      for (let x = -1; x <= 1; x++) {\n        for (let y = -1; y <= 1; y++) {\n          for (let z = -1; z <= 1; z++) {\n            // Skip the center piece (0, 0, 0) - this is the core mechanism\n            if (x === 0 && y === 0 && z === 0) continue;\n            const position = [x, y, z];\n            // Store original colors for each face based on solved state\n            // Each piece gets colors based on its position type (corner, edge, center)\n            const colors = {\n              front: 'black',\n              back: 'black',\n              right: 'black',\n              left: 'black',\n              top: 'black',\n              bottom: 'black'\n            };\n\n            // Determine piece type and assign appropriate colors\n            const isCorner = x !== 0 && y !== 0 && z !== 0;\n            const isEdge = x === 0 && y !== 0 && z !== 0 || x !== 0 && y === 0 && z !== 0 || x !== 0 && y !== 0 && z === 0;\n            const isCenter = x === 0 && y === 0 && z !== 0 || x === 0 && y !== 0 && z === 0 || x !== 0 && y === 0 && z === 0;\n            if (isCorner) {\n              // Corner pieces: 3 colors based on which faces they touch\n              if (z === 1) colors.front = 'white';\n              if (z === -1) colors.back = 'yellow';\n              if (x === 1) colors.right = 'red';\n              if (x === -1) colors.left = 'orange';\n              if (y === 1) colors.top = 'blue';\n              if (y === -1) colors.bottom = 'green';\n            } else if (isEdge) {\n              // Edge pieces: 2 colors based on which faces they touch\n              if (z === 1) colors.front = 'white';\n              if (z === -1) colors.back = 'yellow';\n              if (x === 1) colors.right = 'red';\n              if (x === -1) colors.left = 'orange';\n              if (y === 1) colors.top = 'blue';\n              if (y === -1) colors.bottom = 'green';\n            } else if (isCenter) {\n              // Center pieces: 1 specific color each\n              if (z === 1) colors.front = 'white';\n              if (z === -1) colors.back = 'yellow';\n              if (x === 1) colors.right = 'red';\n              if (x === -1) colors.left = 'orange';\n              if (y === 1) colors.top = 'blue';\n              if (y === -1) colors.bottom = 'green';\n            }\n            state.push({\n              position: [...position],\n              colors\n            });\n          }\n        }\n      }\n      return state;\n    });\n  }, [isAnimating]);\n  return {\n    cubeState,\n    isAnimating,\n    rotateFace,\n    scramble,\n    reset\n  };\n}\n\n// Main cube group component with enhanced structure\n_s2(useCubeState, \"LEgKtu0O8OlFQHgbkZWzH07X/D8=\");\nfunction CubeGroup({\n  isRotating,\n  autoRotate = false,\n  onScramble,\n  onReset\n}) {\n  _s3();\n  const groupRef = useRef();\n  const [rotationSpeed] = useState({\n    x: 0.005,\n    y: 0.01\n  });\n  const {\n    cubeState,\n    isAnimating,\n    rotateFace,\n    scramble,\n    reset\n  } = useCubeState();\n\n  // Expose functions to parent\n  React.useEffect(() => {\n    if (onScramble) onScramble(scramble);\n    if (onReset) onReset(reset);\n  }, [onScramble, onReset, scramble, reset]);\n  useFrame(state => {\n    if (autoRotate && groupRef.current && !isAnimating) {\n      groupRef.current.rotation.y += rotationSpeed.y;\n      groupRef.current.rotation.x += rotationSpeed.x;\n    }\n  });\n  return /*#__PURE__*/_jsxDEV(\"group\", {\n    ref: groupRef,\n    children: cubeState.map((piece, index) => /*#__PURE__*/_jsxDEV(CubePiece, {\n      position: piece.position,\n      colors: piece.colors,\n      pieceId: index\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 722,\n      columnNumber: 15\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 720,\n    columnNumber: 11\n  }, this);\n}\n\n// Main Rubik's Cube component\n_s3(CubeGroup, \"4ehKp0Jd2vChjTIyWIyZQmjvX+4=\", false, function () {\n  return [useCubeState, useFrame];\n});\n_c2 = CubeGroup;\nfunction RubiksCube({\n  isRotating,\n  autoRotate = false,\n  onScramble,\n  onReset\n}) {\n  return /*#__PURE__*/_jsxDEV(Canvas, {\n    camera: {\n      position: [6, 6, 6],\n      fov: 60\n    },\n    style: {\n      width: '100%',\n      height: '100%'\n    },\n    gl: {\n      antialias: true,\n      alpha: true\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"ambientLight\", {\n      intensity: 1.2\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 742,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"directionalLight\", {\n      position: [10, 10, 5],\n      intensity: 3.0,\n      castShadow: true,\n      \"shadow-mapSize-width\": 2048,\n      \"shadow-mapSize-height\": 2048\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 743,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"pointLight\", {\n      position: [-10, -10, -5],\n      intensity: 2.0\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 750,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"pointLight\", {\n      position: [10, -10, 5],\n      intensity: 2.0\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 751,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"pointLight\", {\n      position: [0, 0, 10],\n      intensity: 1.5\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 752,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"spotLight\", {\n      position: [0, 10, 0],\n      angle: 0.5,\n      penumbra: 0.5,\n      intensity: 2.0,\n      castShadow: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 753,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Environment, {\n      preset: \"city\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 762,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CubeGroup, {\n      isRotating: isRotating,\n      autoRotate: autoRotate,\n      onScramble: onScramble,\n      onReset: onReset\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 765,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(OrbitControls, {\n      enablePan: true,\n      enableZoom: true,\n      enableRotate: true,\n      autoRotate: false,\n      autoRotateSpeed: 1,\n      minDistance: 3,\n      maxDistance: 15,\n      dampingFactor: 0.05,\n      enableDamping: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 773,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 736,\n    columnNumber: 5\n  }, this);\n}\n_c3 = RubiksCube;\nexport default RubiksCube;\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"CubePiece\");\n$RefreshReg$(_c2, \"CubeGroup\");\n$RefreshReg$(_c3, \"RubiksCube\");","map":{"version":3,"names":["React","useRef","useMemo","useState","useCallback","Canvas","useFrame","OrbitControls","Environment","THREE","jsxDEV","_jsxDEV","renderNumber","number","scale","digits","toString","split","digitWidth","digitHeight","spacing","children","map","digit","index","offsetX","length","position","renderDigit","parseInt","fileName","_jsxFileName","lineNumber","columnNumber","width","height","segments","path","segmentSize","Math","min","point","args","color","CubePiece","colors","size","pieceId","_s","meshRef","useEffect","console","log","join","colorMap","cubeGeometry","BoxGeometry","faceGeometry","geometry","PlaneGeometry","getFaceColor","faceIndex","front","back","right","left","top","bottom","faces","rotation","faceName","PI","ref","object","side","DoubleSide","shininess","specular","face","FrontSide","emissive","emissiveIntensity","createNumberDisplay","_c","useCubeState","_s2","cubeState","setCubeState","state","x","y","z","isCorner","isEdge","isCenter","push","isAnimating","setIsAnimating","animationQueue","setAnimationQueue","rotateFace","direction","prevState","newState","facePieces","filter","p","pieces","forEach","piece","newX","newY","newZ","newColors","temp","setTimeout","executeScramble","queue","move","slice","scramble","moves","directions","scrambleLength","currentQueue","lastMove","i","floor","random","reset","CubeGroup","isRotating","autoRotate","onScramble","onReset","_s3","groupRef","rotationSpeed","current","_c2","RubiksCube","camera","fov","style","gl","antialias","alpha","intensity","castShadow","angle","penumbra","preset","enablePan","enableZoom","enableRotate","autoRotateSpeed","minDistance","maxDistance","dampingFactor","enableDamping","_c3","$RefreshReg$"],"sources":["C:/Repo/GitHub/rubiks-cube/src/components/RubiksCube.js"],"sourcesContent":["import React, { useRef, useMemo, useState, useCallback } from 'react';\r\nimport { Canvas, useFrame } from '@react-three/fiber';\r\nimport { OrbitControls, Environment } from '@react-three/drei';\r\nimport * as THREE from 'three';\r\n\r\n// Function to render numbers using small squares\r\nfunction renderNumber(number, scale) {\r\n  const digits = number.toString().split('');\r\n  const digitWidth = scale * 0.3;\r\n  const digitHeight = scale * 0.5;\r\n  const spacing = scale * 0.1;\r\n  \r\n  return (\r\n    <group>\r\n      {digits.map((digit, index) => {\r\n        const offsetX = (index - (digits.length - 1) / 2) * (digitWidth + spacing);\r\n        return (\r\n          <group key={index} position={[offsetX, 0, 0.004]}>\r\n            {renderDigit(parseInt(digit), digitWidth, digitHeight)}\r\n          </group>\r\n        );\r\n      })}\r\n    </group>\r\n  );\r\n}\r\n\r\n// Function to render individual digits using small squares\r\nfunction renderDigit(digit, width, height) {\r\n  const segments = {\r\n    0: [[-1, 1], [1, 1], [1, -1], [-1, -1], [-1, 1]],\r\n    1: [[0, 1], [0, -1]],\r\n    2: [[-1, 1], [1, 1], [1, 0], [-1, 0], [-1, -1], [1, -1]],\r\n    3: [[-1, 1], [1, 1], [1, 0], [1, -1], [-1, -1]],\r\n    4: [[-1, 1], [-1, 0], [1, 0], [1, 1], [1, -1]],\r\n    5: [[1, 1], [-1, 1], [-1, 0], [1, 0], [1, -1], [-1, -1]],\r\n    6: [[1, 1], [-1, 1], [-1, 0], [-1, -1], [1, -1], [1, 0]],\r\n    7: [[-1, 1], [1, 1], [1, 0], [1, -1]],\r\n    8: [[-1, 1], [1, 1], [1, 0], [-1, 0], [-1, -1], [1, -1], [1, 0], [-1, 0]],\r\n    9: [[1, 1], [-1, 1], [-1, 0], [1, 0], [1, -1], [-1, -1]]\r\n  };\r\n  \r\n  const path = segments[digit] || [];\r\n  const segmentSize = Math.min(width, height) * 0.1;\r\n  \r\n  return (\r\n    <group>\r\n      {path.map((point, index) => (\r\n        <mesh key={index} position={[point[0] * width * 0.3, point[1] * height * 0.3, 0]}>\r\n          <planeGeometry args={[segmentSize, segmentSize]} />\r\n          <meshBasicMaterial color=\"black\" />\r\n        </mesh>\r\n      ))}\r\n    </group>\r\n  );\r\n}\r\n\r\n// Individual cube piece component with proper multi-colored faces\r\nfunction CubePiece({ position, colors, size = 0.95, pieceId = 0 }) {\r\n  const meshRef = useRef();\r\n  \r\n  // Log piece information for debugging\r\n  React.useEffect(() => {\r\n    console.log(`Piece ${pieceId} at position [${position.join(', ')}] has colors:`, colors);\r\n  }, [pieceId, position, colors]);\r\n  \r\n  const colorMap = {\r\n    'white': '#ffffff',\r\n    'yellow': '#ffd700',\r\n    'red': '#ff0000',\r\n    'orange': '#ff8c00',\r\n    'blue': '#0000ff',\r\n    'green': '#00ff00',\r\n    'black': '#1a1a1a'\r\n  };\r\n\r\n  // Create a solid cube geometry for the base\r\n  const cubeGeometry = useMemo(() => {\r\n    return new THREE.BoxGeometry(size, size, size);\r\n  }, [size]);\r\n\r\n  // Create individual face geometries for each side\r\n  const faceGeometry = useMemo(() => {\r\n    const geometry = new THREE.PlaneGeometry(size, size);\r\n    return geometry;\r\n  }, [size]);\r\n\r\n  // Get the color for a face based on the face index\r\n  const getFaceColor = (faceIndex) => {\r\n    // Face indices: 0=front, 1=back, 2=right, 3=left, 4=top, 5=bottom\r\n    switch (faceIndex) {\r\n      case 0: return colors.front;  // Front face\r\n      case 1: return colors.back;   // Back face\r\n      case 2: return colors.right;  // Right face\r\n      case 3: return colors.left;   // Left face\r\n      case 4: return colors.top;    // Top face\r\n      case 5: return colors.bottom; // Bottom face\r\n      default: return 'black';\r\n    }\r\n  };\r\n\r\n  // Face positions and rotations for a cube - faces positioned on the surface\r\n  const faces = [\r\n    { position: [0, 0, size/2 + 0.001], rotation: [0, 0, 0], color: getFaceColor(0), faceName: 'Front' }, // Front\r\n    { position: [0, 0, -size/2 - 0.001], rotation: [0, Math.PI, 0], color: getFaceColor(1), faceName: 'Back' }, // Back\r\n    { position: [size/2 + 0.001, 0, 0], rotation: [0, Math.PI/2, 0], color: getFaceColor(2), faceName: 'Right' }, // Right\r\n    { position: [-size/2 - 0.001, 0, 0], rotation: [0, -Math.PI/2, 0], color: getFaceColor(3), faceName: 'Left' }, // Left\r\n    { position: [0, size/2 + 0.001, 0], rotation: [-Math.PI/2, 0, 0], color: getFaceColor(4), faceName: 'Top' }, // Top\r\n    { position: [0, -size/2 - 0.001, 0], rotation: [Math.PI/2, 0, 0], color: getFaceColor(5), faceName: 'Bottom' }  // Bottom\r\n  ];\r\n\r\n  return (\r\n    <group ref={meshRef} position={position}>\r\n      {/* Solid cube base */}\r\n      <mesh>\r\n        <primitive object={cubeGeometry} />\r\n        <meshPhongMaterial \r\n          color=\"#2a2a2a\"\r\n          side={THREE.DoubleSide}\r\n          shininess={50}\r\n          specular={0x111111}\r\n        />\r\n      </mesh>\r\n      \r\n      {/* Colored faces on the surface */}\r\n      {faces.map((face, index) => (\r\n        <mesh key={index} position={face.position} rotation={face.rotation}>\r\n          <primitive object={faceGeometry} />\r\n          <meshPhongMaterial \r\n            color={colorMap[face.color] || colorMap['black']}\r\n            side={THREE.FrontSide}\r\n            shininess={100}\r\n            specular={0x222222}\r\n            emissive={colorMap[face.color] || colorMap['black']}\r\n            emissiveIntensity={0.3}\r\n          />\r\n        </mesh>\r\n      ))}\r\n      \r\n      {/* Large visible numbers on each face */}\r\n      {faces.map((face, index) => {\r\n        if (face.color === 'black') return null; // Don't show labels on black faces\r\n        \r\n        return (\r\n          <group key={`number-${index}`} position={face.position} rotation={face.rotation}>\r\n            {/* Large white background */}\r\n            <mesh position={[0, 0, 0.01]}>\r\n              <planeGeometry args={[size * 0.5, size * 0.5]} />\r\n              <meshBasicMaterial color=\"white\" />\r\n            </mesh>\r\n            {/* Black border */}\r\n            <mesh position={[0, 0, 0.011]}>\r\n              <planeGeometry args={[size * 0.45, size * 0.45]} />\r\n              <meshBasicMaterial color=\"black\" />\r\n            </mesh>\r\n            {/* Large number using multiple squares */}\r\n            {createNumberDisplay(pieceId, size)}\r\n          </group>\r\n        );\r\n      })}\r\n      \r\n      {/* Center piece identifier with number */}\r\n      <mesh position={[0, 0, 0.005]}>\r\n        <planeGeometry args={[size * 0.7, size * 0.7]} />\r\n        <meshBasicMaterial color=\"yellow\" />\r\n      </mesh>\r\n      <mesh position={[0, 0, 0.006]}>\r\n        <planeGeometry args={[size * 0.6, size * 0.6]} />\r\n        <meshBasicMaterial color=\"black\" />\r\n      </mesh>\r\n      {createNumberDisplay(pieceId, size * 0.8)}\r\n    </group>\r\n  );\r\n}\r\n\r\n// Cube state management and rotation logic\r\nfunction useCubeState() {\r\n  const [cubeState, setCubeState] = useState(() => {\r\n    // Initialize solved cube state - track positions and original colors\r\n    // A real Rubik's cube has 26 pieces (not 27) - the center core is missing\r\n    const state = [];\r\n    for (let x = -1; x <= 1; x++) {\r\n      for (let y = -1; y <= 1; y++) {\r\n        for (let z = -1; z <= 1; z++) {\r\n          // Skip the center piece (0, 0, 0) - this is the core mechanism\r\n          if (x === 0 && y === 0 && z === 0) continue;\r\n          \r\n          const position = [x, y, z];\r\n          // Store original colors for each face based on solved state\r\n          // Each piece gets colors based on its position type (corner, edge, center)\r\n          const colors = {\r\n            front: 'black',\r\n            back: 'black', \r\n            right: 'black',\r\n            left: 'black',\r\n            top: 'black',\r\n            bottom: 'black'\r\n          };\r\n          \r\n          // Determine piece type and assign appropriate colors\r\n          const isCorner = (x !== 0 && y !== 0 && z !== 0);\r\n          const isEdge = ((x === 0 && y !== 0 && z !== 0) || \r\n                         (x !== 0 && y === 0 && z !== 0) || \r\n                         (x !== 0 && y !== 0 && z === 0));\r\n          const isCenter = ((x === 0 && y === 0 && z !== 0) || \r\n                           (x === 0 && y !== 0 && z === 0) || \r\n                           (x !== 0 && y === 0 && z === 0));\r\n          \r\n          if (isCorner) {\r\n            // Corner pieces: 3 colors based on which faces they touch\r\n            if (z === 1) colors.front = 'white';\r\n            if (z === -1) colors.back = 'yellow';\r\n            if (x === 1) colors.right = 'red';\r\n            if (x === -1) colors.left = 'orange';\r\n            if (y === 1) colors.top = 'blue';\r\n            if (y === -1) colors.bottom = 'green';\r\n          } else if (isEdge) {\r\n            // Edge pieces: 2 colors based on which faces they touch\r\n            if (z === 1) colors.front = 'white';\r\n            if (z === -1) colors.back = 'yellow';\r\n            if (x === 1) colors.right = 'red';\r\n            if (x === -1) colors.left = 'orange';\r\n            if (y === 1) colors.top = 'blue';\r\n            if (y === -1) colors.bottom = 'green';\r\n          } else if (isCenter) {\r\n            // Center pieces: 1 specific color each\r\n            if (z === 1) colors.front = 'white';\r\n            if (z === -1) colors.back = 'yellow';\r\n            if (x === 1) colors.right = 'red';\r\n            if (x === -1) colors.left = 'orange';\r\n            if (y === 1) colors.top = 'blue';\r\n            if (y === -1) colors.bottom = 'green';\r\n          }\r\n          state.push({ position: [...position], colors });\r\n        }\r\n      }\r\n    }\r\n    return state;\r\n  });\r\n\r\n  const [isAnimating, setIsAnimating] = useState(false);\r\n  const [animationQueue, setAnimationQueue] = useState([]);\r\n\r\n  // Rotation functions for each face\r\n  const rotateFace = useCallback((face, direction) => {\r\n    if (isAnimating) return;\r\n    \r\n    setIsAnimating(true);\r\n    \r\n    setCubeState(prevState => {\r\n      const newState = [...prevState];\r\n      \r\n      // Define which pieces belong to each face\r\n      const facePieces = {\r\n        'F': newState.filter(p => p.position[2] === 1), // Front face\r\n        'B': newState.filter(p => p.position[2] === -1), // Back face\r\n        'R': newState.filter(p => p.position[0] === 1), // Right face\r\n        'L': newState.filter(p => p.position[0] === -1), // Left face\r\n        'U': newState.filter(p => p.position[1] === 1), // Up face\r\n        'D': newState.filter(p => p.position[1] === -1) // Down face\r\n      };\r\n\r\n      const pieces = facePieces[face];\r\n      if (!pieces) return prevState;\r\n\r\n        // Apply rotation based on face and direction\r\n        pieces.forEach(piece => {\r\n          const [x, y, z] = piece.position;\r\n          let newX = x, newY = y, newZ = z;\r\n          let newColors = { ...piece.colors };\r\n          \r\n          switch (face) {\r\n            case 'F': // Front face rotation\r\n              if (direction === 'clockwise') {\r\n                newX = -y;\r\n                newY = x;\r\n                // Rotate colors: top->right, right->bottom, bottom->left, left->top\r\n                const temp = newColors.top;\r\n                newColors.top = newColors.left;\r\n                newColors.left = newColors.bottom;\r\n                newColors.bottom = newColors.right;\r\n                newColors.right = temp;\r\n              } else {\r\n                newX = y;\r\n                newY = -x;\r\n                // Rotate colors: top->left, left->bottom, bottom->right, right->top\r\n                const temp = newColors.top;\r\n                newColors.top = newColors.right;\r\n                newColors.right = newColors.bottom;\r\n                newColors.bottom = newColors.left;\r\n                newColors.left = temp;\r\n              }\r\n              break;\r\n            case 'B': // Back face rotation\r\n              if (direction === 'clockwise') {\r\n                newX = y;\r\n                newY = -x;\r\n                // Rotate colors: top->left, left->bottom, bottom->right, right->top\r\n                const temp = newColors.top;\r\n                newColors.top = newColors.right;\r\n                newColors.right = newColors.bottom;\r\n                newColors.bottom = newColors.left;\r\n                newColors.left = temp;\r\n              } else {\r\n                newX = -y;\r\n                newY = x;\r\n                // Rotate colors: top->right, right->bottom, bottom->left, left->top\r\n                const temp = newColors.top;\r\n                newColors.top = newColors.left;\r\n                newColors.left = newColors.bottom;\r\n                newColors.bottom = newColors.right;\r\n                newColors.right = temp;\r\n              }\r\n              break;\r\n            case 'R': // Right face rotation\r\n              if (direction === 'clockwise') {\r\n                newZ = -y;\r\n                newY = z;\r\n                // Rotate colors: top->front, front->bottom, bottom->back, back->top\r\n                const temp = newColors.top;\r\n                newColors.top = newColors.back;\r\n                newColors.back = newColors.bottom;\r\n                newColors.bottom = newColors.front;\r\n                newColors.front = temp;\r\n              } else {\r\n                newZ = y;\r\n                newY = -z;\r\n                // Rotate colors: top->back, back->bottom, bottom->front, front->top\r\n                const temp = newColors.top;\r\n                newColors.top = newColors.front;\r\n                newColors.front = newColors.bottom;\r\n                newColors.bottom = newColors.back;\r\n                newColors.back = temp;\r\n              }\r\n              break;\r\n            case 'L': // Left face rotation\r\n              if (direction === 'clockwise') {\r\n                newZ = y;\r\n                newY = -z;\r\n                // Rotate colors: top->back, back->bottom, bottom->front, front->top\r\n                const temp = newColors.top;\r\n                newColors.top = newColors.front;\r\n                newColors.front = newColors.bottom;\r\n                newColors.bottom = newColors.back;\r\n                newColors.back = temp;\r\n              } else {\r\n                newZ = -y;\r\n                newY = z;\r\n                // Rotate colors: top->front, front->bottom, bottom->back, back->top\r\n                const temp = newColors.top;\r\n                newColors.top = newColors.back;\r\n                newColors.back = newColors.bottom;\r\n                newColors.bottom = newColors.front;\r\n                newColors.front = temp;\r\n              }\r\n              break;\r\n            case 'U': // Up face rotation\r\n              if (direction === 'clockwise') {\r\n                newX = z;\r\n                newZ = -x;\r\n                // Rotate colors: front->right, right->back, back->left, left->front\r\n                const temp = newColors.front;\r\n                newColors.front = newColors.left;\r\n                newColors.left = newColors.back;\r\n                newColors.back = newColors.right;\r\n                newColors.right = temp;\r\n              } else {\r\n                newX = -z;\r\n                newZ = x;\r\n                // Rotate colors: front->left, left->back, back->right, right->front\r\n                const temp = newColors.front;\r\n                newColors.front = newColors.right;\r\n                newColors.right = newColors.back;\r\n                newColors.back = newColors.left;\r\n                newColors.left = temp;\r\n              }\r\n              break;\r\n            case 'D': // Down face rotation\r\n              if (direction === 'clockwise') {\r\n                newX = -z;\r\n                newZ = x;\r\n                // Rotate colors: front->left, left->back, back->right, right->front\r\n                const temp = newColors.front;\r\n                newColors.front = newColors.right;\r\n                newColors.right = newColors.back;\r\n                newColors.back = newColors.left;\r\n                newColors.left = temp;\r\n              } else {\r\n                newX = z;\r\n                newZ = -x;\r\n                // Rotate colors: front->right, right->back, back->left, left->front\r\n                const temp = newColors.front;\r\n                newColors.front = newColors.left;\r\n                newColors.left = newColors.back;\r\n                newColors.back = newColors.right;\r\n                newColors.right = temp;\r\n              }\r\n              break;\r\n          }\r\n          \r\n          piece.position = [newX, newY, newZ];\r\n          piece.colors = newColors;\r\n        });\r\n\r\n      return newState;\r\n    });\r\n    \r\n    // Animation delay\r\n    setTimeout(() => setIsAnimating(false), 300);\r\n  }, [isAnimating]);\r\n\r\n  // Execute scramble moves\r\n  const executeScramble = useCallback((queue) => {\r\n    if (queue.length === 0) {\r\n      setIsAnimating(false);\r\n      return;\r\n    }\r\n    \r\n    const { move, direction } = queue[0];\r\n    console.log(`Executing move: ${move} ${direction}`);\r\n    \r\n    // Apply the rotation immediately\r\n    setCubeState(prevState => {\r\n      const newState = [...prevState];\r\n      \r\n      // Define which pieces belong to each face\r\n      const facePieces = {\r\n        'F': newState.filter(p => p.position[2] === 1), // Front face\r\n        'B': newState.filter(p => p.position[2] === -1), // Back face\r\n        'R': newState.filter(p => p.position[0] === 1), // Right face\r\n        'L': newState.filter(p => p.position[0] === -1), // Left face\r\n        'U': newState.filter(p => p.position[1] === 1), // Up face\r\n        'D': newState.filter(p => p.position[1] === -1) // Down face\r\n      };\r\n\r\n      const pieces = facePieces[move];\r\n      if (!pieces) return prevState;\r\n\r\n        // Apply rotation based on face and direction\r\n        pieces.forEach(piece => {\r\n          const [x, y, z] = piece.position;\r\n          let newX = x, newY = y, newZ = z;\r\n          let newColors = { ...piece.colors };\r\n          \r\n          switch (move) {\r\n            case 'F': // Front face rotation\r\n              if (direction === 'clockwise') {\r\n                newX = -y;\r\n                newY = x;\r\n                // Rotate colors: top->right, right->bottom, bottom->left, left->top\r\n                const temp = newColors.top;\r\n                newColors.top = newColors.left;\r\n                newColors.left = newColors.bottom;\r\n                newColors.bottom = newColors.right;\r\n                newColors.right = temp;\r\n              } else {\r\n                newX = y;\r\n                newY = -x;\r\n                // Rotate colors: top->left, left->bottom, bottom->right, right->top\r\n                const temp = newColors.top;\r\n                newColors.top = newColors.right;\r\n                newColors.right = newColors.bottom;\r\n                newColors.bottom = newColors.left;\r\n                newColors.left = temp;\r\n              }\r\n              break;\r\n            case 'B': // Back face rotation\r\n              if (direction === 'clockwise') {\r\n                newX = y;\r\n                newY = -x;\r\n                // Rotate colors: top->left, left->bottom, bottom->right, right->top\r\n                const temp = newColors.top;\r\n                newColors.top = newColors.right;\r\n                newColors.right = newColors.bottom;\r\n                newColors.bottom = newColors.left;\r\n                newColors.left = temp;\r\n              } else {\r\n                newX = -y;\r\n                newY = x;\r\n                // Rotate colors: top->right, right->bottom, bottom->left, left->top\r\n                const temp = newColors.top;\r\n                newColors.top = newColors.left;\r\n                newColors.left = newColors.bottom;\r\n                newColors.bottom = newColors.right;\r\n                newColors.right = temp;\r\n              }\r\n              break;\r\n            case 'R': // Right face rotation\r\n              if (direction === 'clockwise') {\r\n                newZ = -y;\r\n                newY = z;\r\n                // Rotate colors: top->front, front->bottom, bottom->back, back->top\r\n                const temp = newColors.top;\r\n                newColors.top = newColors.back;\r\n                newColors.back = newColors.bottom;\r\n                newColors.bottom = newColors.front;\r\n                newColors.front = temp;\r\n              } else {\r\n                newZ = y;\r\n                newY = -z;\r\n                // Rotate colors: top->back, back->bottom, bottom->front, front->top\r\n                const temp = newColors.top;\r\n                newColors.top = newColors.front;\r\n                newColors.front = newColors.bottom;\r\n                newColors.bottom = newColors.back;\r\n                newColors.back = temp;\r\n              }\r\n              break;\r\n            case 'L': // Left face rotation\r\n              if (direction === 'clockwise') {\r\n                newZ = y;\r\n                newY = -z;\r\n                // Rotate colors: top->back, back->bottom, bottom->front, front->top\r\n                const temp = newColors.top;\r\n                newColors.top = newColors.front;\r\n                newColors.front = newColors.bottom;\r\n                newColors.bottom = newColors.back;\r\n                newColors.back = temp;\r\n              } else {\r\n                newZ = -y;\r\n                newY = z;\r\n                // Rotate colors: top->front, front->bottom, bottom->back, back->top\r\n                const temp = newColors.top;\r\n                newColors.top = newColors.back;\r\n                newColors.back = newColors.bottom;\r\n                newColors.bottom = newColors.front;\r\n                newColors.front = temp;\r\n              }\r\n              break;\r\n            case 'U': // Up face rotation\r\n              if (direction === 'clockwise') {\r\n                newX = z;\r\n                newZ = -x;\r\n                // Rotate colors: front->right, right->back, back->left, left->front\r\n                const temp = newColors.front;\r\n                newColors.front = newColors.left;\r\n                newColors.left = newColors.back;\r\n                newColors.back = newColors.right;\r\n                newColors.right = temp;\r\n              } else {\r\n                newX = -z;\r\n                newZ = x;\r\n                // Rotate colors: front->left, left->back, back->right, right->front\r\n                const temp = newColors.front;\r\n                newColors.front = newColors.right;\r\n                newColors.right = newColors.back;\r\n                newColors.back = newColors.left;\r\n                newColors.left = temp;\r\n              }\r\n              break;\r\n            case 'D': // Down face rotation\r\n              if (direction === 'clockwise') {\r\n                newX = -z;\r\n                newZ = x;\r\n                // Rotate colors: front->left, left->back, back->right, right->front\r\n                const temp = newColors.front;\r\n                newColors.front = newColors.right;\r\n                newColors.right = newColors.back;\r\n                newColors.back = newColors.left;\r\n                newColors.left = temp;\r\n              } else {\r\n                newX = z;\r\n                newZ = -x;\r\n                // Rotate colors: front->right, right->back, back->left, left->front\r\n                const temp = newColors.front;\r\n                newColors.front = newColors.left;\r\n                newColors.left = newColors.back;\r\n                newColors.back = newColors.right;\r\n                newColors.right = temp;\r\n              }\r\n              break;\r\n          }\r\n          \r\n          piece.position = [newX, newY, newZ];\r\n          piece.colors = newColors;\r\n        });\r\n\r\n      return newState;\r\n    });\r\n    \r\n    // Continue with the next move after a delay\r\n    setTimeout(() => {\r\n      executeScramble(queue.slice(1));\r\n    }, 350);\r\n  }, []);\r\n\r\n  // Scramble function using standard notation\r\n  const scramble = useCallback(() => {\r\n    console.log('Scramble function called');\r\n    if (isAnimating) {\r\n      console.log('Already animating, skipping scramble');\r\n      return;\r\n    }\r\n    \r\n    setIsAnimating(true);\r\n    console.log('Starting scramble animation');\r\n    \r\n    const moves = ['F', 'B', 'R', 'L', 'U', 'D'];\r\n    const directions = ['clockwise', 'counterclockwise'];\r\n    const scrambleLength = 20;\r\n    \r\n    let currentQueue = [];\r\n    let lastMove = '';\r\n    \r\n    for (let i = 0; i < scrambleLength; i++) {\r\n      let move;\r\n      let direction;\r\n      \r\n      // Avoid doing the same move twice in a row\r\n      do {\r\n        move = moves[Math.floor(Math.random() * moves.length)];\r\n      } while (move === lastMove);\r\n      \r\n      direction = directions[Math.floor(Math.random() * directions.length)];\r\n      lastMove = move;\r\n      \r\n      currentQueue.push({ move, direction });\r\n    }\r\n    \r\n    console.log('Generated scramble queue:', currentQueue);\r\n    setAnimationQueue(currentQueue);\r\n    executeScramble(currentQueue);\r\n  }, [isAnimating, executeScramble]);\r\n\r\n  // Reset function\r\n  const reset = useCallback(() => {\r\n    if (isAnimating) return;\r\n    \r\n    setCubeState(() => {\r\n      const state = [];\r\n      for (let x = -1; x <= 1; x++) {\r\n        for (let y = -1; y <= 1; y++) {\r\n          for (let z = -1; z <= 1; z++) {\r\n            // Skip the center piece (0, 0, 0) - this is the core mechanism\r\n            if (x === 0 && y === 0 && z === 0) continue;\r\n            \r\n            const position = [x, y, z];\r\n            // Store original colors for each face based on solved state\r\n            // Each piece gets colors based on its position type (corner, edge, center)\r\n            const colors = {\r\n              front: 'black',\r\n              back: 'black', \r\n              right: 'black',\r\n              left: 'black',\r\n              top: 'black',\r\n              bottom: 'black'\r\n            };\r\n            \r\n            // Determine piece type and assign appropriate colors\r\n            const isCorner = (x !== 0 && y !== 0 && z !== 0);\r\n            const isEdge = ((x === 0 && y !== 0 && z !== 0) || \r\n                           (x !== 0 && y === 0 && z !== 0) || \r\n                           (x !== 0 && y !== 0 && z === 0));\r\n            const isCenter = ((x === 0 && y === 0 && z !== 0) || \r\n                             (x === 0 && y !== 0 && z === 0) || \r\n                             (x !== 0 && y === 0 && z === 0));\r\n            \r\n            if (isCorner) {\r\n              // Corner pieces: 3 colors based on which faces they touch\r\n              if (z === 1) colors.front = 'white';\r\n              if (z === -1) colors.back = 'yellow';\r\n              if (x === 1) colors.right = 'red';\r\n              if (x === -1) colors.left = 'orange';\r\n              if (y === 1) colors.top = 'blue';\r\n              if (y === -1) colors.bottom = 'green';\r\n            } else if (isEdge) {\r\n              // Edge pieces: 2 colors based on which faces they touch\r\n              if (z === 1) colors.front = 'white';\r\n              if (z === -1) colors.back = 'yellow';\r\n              if (x === 1) colors.right = 'red';\r\n              if (x === -1) colors.left = 'orange';\r\n              if (y === 1) colors.top = 'blue';\r\n              if (y === -1) colors.bottom = 'green';\r\n            } else if (isCenter) {\r\n              // Center pieces: 1 specific color each\r\n              if (z === 1) colors.front = 'white';\r\n              if (z === -1) colors.back = 'yellow';\r\n              if (x === 1) colors.right = 'red';\r\n              if (x === -1) colors.left = 'orange';\r\n              if (y === 1) colors.top = 'blue';\r\n              if (y === -1) colors.bottom = 'green';\r\n            }\r\n            state.push({ position: [...position], colors });\r\n          }\r\n        }\r\n      }\r\n      return state;\r\n    });\r\n  }, [isAnimating]);\r\n\r\n  return {\r\n    cubeState,\r\n    isAnimating,\r\n    rotateFace,\r\n    scramble,\r\n    reset\r\n  };\r\n}\r\n\r\n// Main cube group component with enhanced structure\r\nfunction CubeGroup({ isRotating, autoRotate = false, onScramble, onReset }) {\r\n  const groupRef = useRef();\r\n  const [rotationSpeed] = useState({ x: 0.005, y: 0.01 });\r\n  \r\n  const { cubeState, isAnimating, rotateFace, scramble, reset } = useCubeState();\r\n  \r\n  // Expose functions to parent\r\n  React.useEffect(() => {\r\n    if (onScramble) onScramble(scramble);\r\n    if (onReset) onReset(reset);\r\n  }, [onScramble, onReset, scramble, reset]);\r\n  \r\n  useFrame((state) => {\r\n    if (autoRotate && groupRef.current && !isAnimating) {\r\n      groupRef.current.rotation.y += rotationSpeed.y;\r\n      groupRef.current.rotation.x += rotationSpeed.x;\r\n    }\r\n  });\r\n\r\n        return (\r\n          <group ref={groupRef}>\r\n            {cubeState.map((piece, index) => (\r\n              <CubePiece\r\n                key={index}\r\n                position={piece.position}\r\n                colors={piece.colors}\r\n                pieceId={index}\r\n              />\r\n            ))}\r\n          </group>\r\n        );\r\n}\r\n\r\n// Main Rubik's Cube component\r\nfunction RubiksCube({ isRotating, autoRotate = false, onScramble, onReset }) {\r\n  return (\r\n    <Canvas\r\n      camera={{ position: [6, 6, 6], fov: 60 }}\r\n      style={{ width: '100%', height: '100%' }}\r\n      gl={{ antialias: true, alpha: true }}\r\n    >\r\n      {/* Enhanced Lighting */}\r\n      <ambientLight intensity={1.2} />\r\n      <directionalLight \r\n        position={[10, 10, 5]} \r\n        intensity={3.0}\r\n        castShadow\r\n        shadow-mapSize-width={2048}\r\n        shadow-mapSize-height={2048}\r\n      />\r\n      <pointLight position={[-10, -10, -5]} intensity={2.0} />\r\n      <pointLight position={[10, -10, 5]} intensity={2.0} />\r\n      <pointLight position={[0, 0, 10]} intensity={1.5} />\r\n      <spotLight\r\n        position={[0, 10, 0]}\r\n        angle={0.5}\r\n        penumbra={0.5}\r\n        intensity={2.0}\r\n        castShadow\r\n      />\r\n      \r\n      {/* Environment */}\r\n      <Environment preset=\"city\" />\r\n      \r\n      {/* Cube */}\r\n      <CubeGroup \r\n        isRotating={isRotating} \r\n        autoRotate={autoRotate}\r\n        onScramble={onScramble}\r\n        onReset={onReset}\r\n      />\r\n      \r\n      {/* Controls */}\r\n      <OrbitControls \r\n        enablePan={true}\r\n        enableZoom={true}\r\n        enableRotate={true}\r\n        autoRotate={false}\r\n        autoRotateSpeed={1}\r\n        minDistance={3}\r\n        maxDistance={15}\r\n        dampingFactor={0.05}\r\n        enableDamping={true}\r\n      />\r\n    </Canvas>\r\n  );\r\n}\r\n\r\nexport default RubiksCube;"],"mappings":";;;;AAAA,OAAOA,KAAK,IAAIC,MAAM,EAAEC,OAAO,EAAEC,QAAQ,EAAEC,WAAW,QAAQ,OAAO;AACrE,SAASC,MAAM,EAAEC,QAAQ,QAAQ,oBAAoB;AACrD,SAASC,aAAa,EAAEC,WAAW,QAAQ,mBAAmB;AAC9D,OAAO,KAAKC,KAAK,MAAM,OAAO;;AAE9B;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,SAASC,YAAYA,CAACC,MAAM,EAAEC,KAAK,EAAE;EACnC,MAAMC,MAAM,GAAGF,MAAM,CAACG,QAAQ,CAAC,CAAC,CAACC,KAAK,CAAC,EAAE,CAAC;EAC1C,MAAMC,UAAU,GAAGJ,KAAK,GAAG,GAAG;EAC9B,MAAMK,WAAW,GAAGL,KAAK,GAAG,GAAG;EAC/B,MAAMM,OAAO,GAAGN,KAAK,GAAG,GAAG;EAE3B,oBACEH,OAAA;IAAAU,QAAA,EACGN,MAAM,CAACO,GAAG,CAAC,CAACC,KAAK,EAAEC,KAAK,KAAK;MAC5B,MAAMC,OAAO,GAAG,CAACD,KAAK,GAAG,CAACT,MAAM,CAACW,MAAM,GAAG,CAAC,IAAI,CAAC,KAAKR,UAAU,GAAGE,OAAO,CAAC;MAC1E,oBACET,OAAA;QAAmBgB,QAAQ,EAAE,CAACF,OAAO,EAAE,CAAC,EAAE,KAAK,CAAE;QAAAJ,QAAA,EAC9CO,WAAW,CAACC,QAAQ,CAACN,KAAK,CAAC,EAAEL,UAAU,EAAEC,WAAW;MAAC,GAD5CK,KAAK;QAAAM,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAEV,CAAC;IAEZ,CAAC;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACG,CAAC;AAEZ;;AAEA;AACA,SAASL,WAAWA,CAACL,KAAK,EAAEW,KAAK,EAAEC,MAAM,EAAE;EACzC,MAAMC,QAAQ,GAAG;IACf,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;IAChD,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;IACpB,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;IACxxD,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;IACxD,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;IACrC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;IACzE,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAA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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}