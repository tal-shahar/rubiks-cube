{"ast":null,"code":"var _jsxFileName = \"C:\\\\Repo\\\\GitHub\\\\rubiks-cube\\\\src\\\\components\\\\RubiksCube.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { useRef, useMemo, useState } from 'react';\nimport { Canvas, useFrame } from '@react-three/fiber';\nimport { OrbitControls, Environment } from '@react-three/drei';\nimport * as THREE from 'three';\n\n// Individual cube piece component with improved materials\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction CubePiece({\n  position,\n  colors,\n  size = 0.95\n}) {\n  _s();\n  const meshRef = useRef();\n  const colorMap = {\n    'white': '#ffffff',\n    'yellow': '#ffd500',\n    'red': '#ff0000',\n    'orange': '#ff8c00',\n    'blue': '#0051ba',\n    'green': '#00aa00',\n    'black': '#1a1a1a'\n  };\n\n  // Create a solid cube geometry\n  const geometry = useMemo(() => new THREE.BoxGeometry(size, size, size), [size]);\n\n  // Get the main color for this cube piece (first color in the array)\n  const mainColor = colors[0] || 'white';\n  return /*#__PURE__*/_jsxDEV(\"mesh\", {\n    ref: meshRef,\n    position: position,\n    geometry: geometry,\n    children: /*#__PURE__*/_jsxDEV(\"meshPhongMaterial\", {\n      color: colorMap[mainColor],\n      side: THREE.DoubleSide,\n      shininess: 30,\n      specular: 0x444444\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 5\n  }, this);\n}\n\n// Main cube group component with enhanced structure\n_s(CubePiece, \"2fOnDMalIvZA5iFyYBzhKHAJnxI=\");\n_c = CubePiece;\nfunction CubeGroup({\n  isRotating,\n  autoRotate = false\n}) {\n  _s2();\n  const groupRef = useRef();\n  const [rotationSpeed] = useState({\n    x: 0.005,\n    y: 0.01\n  });\n  useFrame(state => {\n    if (autoRotate && groupRef.current) {\n      groupRef.current.rotation.y += rotationSpeed.y;\n      groupRef.current.rotation.x += rotationSpeed.x;\n    }\n  });\n\n  // Generate complete 3x3x3 cube structure\n  const cubePieces = useMemo(() => {\n    const pieces = [];\n\n    // Create all 27 pieces (3x3x3)\n    for (let x = -1; x <= 1; x++) {\n      for (let y = -1; y <= 1; y++) {\n        for (let z = -1; z <= 1; z++) {\n          const position = [x * 1.0, y * 1.0, z * 1.0];\n\n          // Determine the main color for each cube piece based on its position\n          let mainColor = 'white'; // default color\n\n          // Simple color assignment based on position\n          if (z === 1) {\n            // Front face pieces\n            mainColor = 'white';\n          } else if (z === -1) {\n            // Back face pieces\n            mainColor = 'yellow';\n          } else if (x === 1) {\n            // Right face pieces\n            mainColor = 'red';\n          } else if (x === -1) {\n            // Left face pieces\n            mainColor = 'orange';\n          } else if (y === 1) {\n            // Top face pieces\n            mainColor = 'blue';\n          } else if (y === -1) {\n            // Bottom face pieces\n            mainColor = 'green';\n          } else {\n            // Center piece\n            mainColor = 'white';\n          }\n          pieces.push({\n            position,\n            colors: [mainColor, mainColor, mainColor, mainColor, mainColor, mainColor]\n          });\n        }\n      }\n    }\n    return pieces;\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"group\", {\n    ref: groupRef,\n    children: cubePieces.map((piece, index) => /*#__PURE__*/_jsxDEV(CubePiece, {\n      position: piece.position,\n      colors: piece.colors\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 99,\n    columnNumber: 5\n  }, this);\n}\n\n// Main Rubik's Cube component\n_s2(CubeGroup, \"itL0R5rTwyW9gXUkPHOpg05BY0w=\", false, function () {\n  return [useFrame];\n});\n_c2 = CubeGroup;\nfunction RubiksCube({\n  isRotating,\n  autoRotate = false\n}) {\n  return /*#__PURE__*/_jsxDEV(Canvas, {\n    camera: {\n      position: [6, 6, 6],\n      fov: 60\n    },\n    style: {\n      width: '100%',\n      height: '100%'\n    },\n    gl: {\n      antialias: true,\n      alpha: true\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"ambientLight\", {\n      intensity: 0.6\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"directionalLight\", {\n      position: [10, 10, 5],\n      intensity: 1.5,\n      castShadow: true,\n      \"shadow-mapSize-width\": 2048,\n      \"shadow-mapSize-height\": 2048\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"pointLight\", {\n      position: [-10, -10, -5],\n      intensity: 1.0\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"spotLight\", {\n      position: [0, 10, 0],\n      angle: 0.3,\n      penumbra: 1,\n      intensity: 0.8,\n      castShadow: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Environment, {\n      preset: \"city\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CubeGroup, {\n      isRotating: isRotating,\n      autoRotate: autoRotate\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(OrbitControls, {\n      enablePan: true,\n      enableZoom: true,\n      enableRotate: true,\n      autoRotate: false,\n      autoRotateSpeed: 1,\n      minDistance: 3,\n      maxDistance: 15,\n      dampingFactor: 0.05,\n      enableDamping: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 114,\n    columnNumber: 5\n  }, this);\n}\n_c3 = RubiksCube;\nexport default RubiksCube;\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"CubePiece\");\n$RefreshReg$(_c2, \"CubeGroup\");\n$RefreshReg$(_c3, \"RubiksCube\");","map":{"version":3,"names":["React","useRef","useMemo","useState","Canvas","useFrame","OrbitControls","Environment","THREE","jsxDEV","_jsxDEV","CubePiece","position","colors","size","_s","meshRef","colorMap","geometry","BoxGeometry","mainColor","ref","children","color","side","DoubleSide","shininess","specular","fileName","_jsxFileName","lineNumber","columnNumber","_c","CubeGroup","isRotating","autoRotate","_s2","groupRef","rotationSpeed","x","y","state","current","rotation","cubePieces","pieces","z","push","map","piece","index","_c2","RubiksCube","camera","fov","style","width","height","gl","antialias","alpha","intensity","castShadow","angle","penumbra","preset","enablePan","enableZoom","enableRotate","autoRotateSpeed","minDistance","maxDistance","dampingFactor","enableDamping","_c3","$RefreshReg$"],"sources":["C:/Repo/GitHub/rubiks-cube/src/components/RubiksCube.js"],"sourcesContent":["import React, { useRef, useMemo, useState } from 'react';\r\nimport { Canvas, useFrame } from '@react-three/fiber';\r\nimport { OrbitControls, Environment } from '@react-three/drei';\r\nimport * as THREE from 'three';\r\n\r\n// Individual cube piece component with improved materials\r\nfunction CubePiece({ position, colors, size = 0.95 }) {\r\n  const meshRef = useRef();\r\n  \r\n  const colorMap = {\r\n    'white': '#ffffff',\r\n    'yellow': '#ffd500',\r\n    'red': '#ff0000',\r\n    'orange': '#ff8c00',\r\n    'blue': '#0051ba',\r\n    'green': '#00aa00',\r\n    'black': '#1a1a1a'\r\n  };\r\n\r\n  // Create a solid cube geometry\r\n  const geometry = useMemo(() => new THREE.BoxGeometry(size, size, size), [size]);\r\n  \r\n  // Get the main color for this cube piece (first color in the array)\r\n  const mainColor = colors[0] || 'white';\r\n\r\n  return (\r\n    <mesh ref={meshRef} position={position} geometry={geometry}>\r\n      <meshPhongMaterial \r\n        color={colorMap[mainColor]}\r\n        side={THREE.DoubleSide}\r\n        shininess={30}\r\n        specular={0x444444}\r\n      />\r\n    </mesh>\r\n  );\r\n}\r\n\r\n// Main cube group component with enhanced structure\r\nfunction CubeGroup({ isRotating, autoRotate = false }) {\r\n  const groupRef = useRef();\r\n  const [rotationSpeed] = useState({ x: 0.005, y: 0.01 });\r\n  \r\n  useFrame((state) => {\r\n    if (autoRotate && groupRef.current) {\r\n      groupRef.current.rotation.y += rotationSpeed.y;\r\n      groupRef.current.rotation.x += rotationSpeed.x;\r\n    }\r\n  });\r\n\r\n  // Generate complete 3x3x3 cube structure\r\n  const cubePieces = useMemo(() => {\r\n    const pieces = [];\r\n    \r\n    // Create all 27 pieces (3x3x3)\r\n    for (let x = -1; x <= 1; x++) {\r\n      for (let y = -1; y <= 1; y++) {\r\n        for (let z = -1; z <= 1; z++) {\r\n                     const position = [x * 1.0, y * 1.0, z * 1.0];\r\n          \r\n                     // Determine the main color for each cube piece based on its position\r\n           let mainColor = 'white'; // default color\r\n           \r\n           // Simple color assignment based on position\r\n           if (z === 1) {\r\n             // Front face pieces\r\n             mainColor = 'white';\r\n           } else if (z === -1) {\r\n             // Back face pieces\r\n             mainColor = 'yellow';\r\n           } else if (x === 1) {\r\n             // Right face pieces\r\n             mainColor = 'red';\r\n           } else if (x === -1) {\r\n             // Left face pieces\r\n             mainColor = 'orange';\r\n           } else if (y === 1) {\r\n             // Top face pieces\r\n             mainColor = 'blue';\r\n           } else if (y === -1) {\r\n             // Bottom face pieces\r\n             mainColor = 'green';\r\n           } else {\r\n             // Center piece\r\n             mainColor = 'white';\r\n           }\r\n          \r\n                     pieces.push({\r\n             position,\r\n             colors: [mainColor, mainColor, mainColor, mainColor, mainColor, mainColor]\r\n           });\r\n        }\r\n      }\r\n    }\r\n    \r\n    return pieces;\r\n  }, []);\r\n\r\n  return (\r\n    <group ref={groupRef}>\r\n      {cubePieces.map((piece, index) => (\r\n        <CubePiece\r\n          key={index}\r\n          position={piece.position}\r\n          colors={piece.colors}\r\n        />\r\n      ))}\r\n    </group>\r\n  );\r\n}\r\n\r\n// Main Rubik's Cube component\r\nfunction RubiksCube({ isRotating, autoRotate = false }) {\r\n  return (\r\n    <Canvas\r\n      camera={{ position: [6, 6, 6], fov: 60 }}\r\n      style={{ width: '100%', height: '100%' }}\r\n      gl={{ antialias: true, alpha: true }}\r\n    >\r\n      {/* Enhanced Lighting */}\r\n      <ambientLight intensity={0.6} />\r\n      <directionalLight \r\n        position={[10, 10, 5]} \r\n        intensity={1.5}\r\n        castShadow\r\n        shadow-mapSize-width={2048}\r\n        shadow-mapSize-height={2048}\r\n      />\r\n      <pointLight position={[-10, -10, -5]} intensity={1.0} />\r\n      <spotLight\r\n        position={[0, 10, 0]}\r\n        angle={0.3}\r\n        penumbra={1}\r\n        intensity={0.8}\r\n        castShadow\r\n      />\r\n      \r\n      {/* Environment */}\r\n      <Environment preset=\"city\" />\r\n      \r\n      {/* Cube */}\r\n      <CubeGroup isRotating={isRotating} autoRotate={autoRotate} />\r\n      \r\n      {/* Controls */}\r\n      <OrbitControls \r\n        enablePan={true}\r\n        enableZoom={true}\r\n        enableRotate={true}\r\n        autoRotate={false}\r\n        autoRotateSpeed={1}\r\n        minDistance={3}\r\n        maxDistance={15}\r\n        dampingFactor={0.05}\r\n        enableDamping={true}\r\n      />\r\n    </Canvas>\r\n  );\r\n}\r\n\r\nexport default RubiksCube; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}