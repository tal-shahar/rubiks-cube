{"ast":null,"code":"var _jsxFileName = \"C:\\\\Repo\\\\GitHub\\\\rubiks-cube\\\\src\\\\components\\\\RubiksCube.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$(),\n  _s3 = $RefreshSig$();\nimport React, { useRef, useMemo, useState, useCallback } from 'react';\nimport { Canvas, useFrame } from '@react-three/fiber';\nimport { OrbitControls, Environment } from '@react-three/drei';\nimport * as THREE from 'three';\n\n// Individual cube piece component with proper multi-colored faces\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction CubePiece({\n  position,\n  colors,\n  size = 0.95,\n  pieceId = 0\n}) {\n  _s();\n  const meshRef = useRef();\n  const colorMap = {\n    'white': '#ffffff',\n    'yellow': '#ffd700',\n    'red': '#ff0000',\n    'orange': '#ff8c00',\n    'blue': '#0000ff',\n    'green': '#00ff00',\n    'black': '#1a1a1a'\n  };\n\n  // Create a solid cube geometry for the base\n  const cubeGeometry = useMemo(() => {\n    return new THREE.BoxGeometry(size, size, size);\n  }, [size]);\n\n  // Create individual face geometries for each side\n  const faceGeometry = useMemo(() => {\n    const geometry = new THREE.PlaneGeometry(size, size);\n    return geometry;\n  }, [size]);\n\n  // Get the color for a face based on the face index\n  const getFaceColor = faceIndex => {\n    // Face indices: 0=front, 1=back, 2=right, 3=left, 4=top, 5=bottom\n    switch (faceIndex) {\n      case 0:\n        return colors.front;\n      // Front face\n      case 1:\n        return colors.back;\n      // Back face\n      case 2:\n        return colors.right;\n      // Right face\n      case 3:\n        return colors.left;\n      // Left face\n      case 4:\n        return colors.top;\n      // Top face\n      case 5:\n        return colors.bottom;\n      // Bottom face\n      default:\n        return 'black';\n    }\n  };\n\n  // Face positions and rotations for a cube - faces positioned on the surface\n  const faces = [{\n    position: [0, 0, size / 2 + 0.001],\n    rotation: [0, 0, 0],\n    color: getFaceColor(0),\n    faceName: 'Front'\n  },\n  // Front\n  {\n    position: [0, 0, -size / 2 - 0.001],\n    rotation: [0, Math.PI, 0],\n    color: getFaceColor(1),\n    faceName: 'Back'\n  },\n  // Back\n  {\n    position: [size / 2 + 0.001, 0, 0],\n    rotation: [0, Math.PI / 2, 0],\n    color: getFaceColor(2),\n    faceName: 'Right'\n  },\n  // Right\n  {\n    position: [-size / 2 - 0.001, 0, 0],\n    rotation: [0, -Math.PI / 2, 0],\n    color: getFaceColor(3),\n    faceName: 'Left'\n  },\n  // Left\n  {\n    position: [0, size / 2 + 0.001, 0],\n    rotation: [-Math.PI / 2, 0, 0],\n    color: getFaceColor(4),\n    faceName: 'Top'\n  },\n  // Top\n  {\n    position: [0, -size / 2 - 0.001, 0],\n    rotation: [Math.PI / 2, 0, 0],\n    color: getFaceColor(5),\n    faceName: 'Bottom'\n  } // Bottom\n  ];\n  return /*#__PURE__*/_jsxDEV(\"group\", {\n    ref: meshRef,\n    position: position,\n    children: [/*#__PURE__*/_jsxDEV(\"mesh\", {\n      children: [/*#__PURE__*/_jsxDEV(\"primitive\", {\n        object: cubeGeometry\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"meshPhongMaterial\", {\n        color: \"#2a2a2a\",\n        side: THREE.DoubleSide,\n        shininess: 50,\n        specular: 0x111111\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this), faces.map((face, index) => /*#__PURE__*/_jsxDEV(\"mesh\", {\n      position: face.position,\n      rotation: face.rotation,\n      children: [/*#__PURE__*/_jsxDEV(\"primitive\", {\n        object: faceGeometry\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"meshPhongMaterial\", {\n        color: colorMap[face.color] || colorMap['black'],\n        side: THREE.FrontSide,\n        shininess: 100,\n        specular: 0x222222,\n        emissive: colorMap[face.color] || colorMap['black'],\n        emissiveIntensity: 0.3\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 11\n      }, this)]\n    }, index, true, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 9\n    }, this)), faces.map((face, index) => {\n      if (face.color === 'black') return null; // Don't show labels on black faces\n\n      return /*#__PURE__*/_jsxDEV(\"group\", {\n        position: face.position,\n        rotation: face.rotation,\n        children: [/*#__PURE__*/_jsxDEV(\"mesh\", {\n          position: [0, 0.15, 0.002],\n          children: [/*#__PURE__*/_jsxDEV(\"planeGeometry\", {\n            args: [size * 0.3, size * 0.1]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 91,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n            color: \"red\",\n            transparent: true,\n            opacity: 0.8\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 92,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"mesh\", {\n          position: [0, 0, 0.003],\n          children: [/*#__PURE__*/_jsxDEV(\"planeGeometry\", {\n            args: [size * 0.2, size * 0.2]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 96,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n            color: \"white\",\n            transparent: true,\n            opacity: 0.9\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 97,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"mesh\", {\n          position: [0, -0.15, 0.002],\n          children: [/*#__PURE__*/_jsxDEV(\"planeGeometry\", {\n            args: [size * 0.2, size * 0.1]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 101,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n            color: \"yellow\",\n            transparent: true,\n            opacity: 0.8\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 102,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 13\n        }, this)]\n      }, `text-${index}`, true, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 11\n      }, this);\n    }), /*#__PURE__*/_jsxDEV(\"mesh\", {\n      position: [0, 0, 0],\n      children: [/*#__PURE__*/_jsxDEV(\"planeGeometry\", {\n        args: [size * 0.4, size * 0.4]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: \"black\",\n        transparent: true,\n        opacity: 0.7\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 5\n  }, this);\n}\n\n// Cube state management and rotation logic\n_s(CubePiece, \"KSzIzirMmUonIFkL5S+SVPGfUQg=\");\n_c = CubePiece;\nfunction useCubeState() {\n  _s2();\n  const [cubeState, setCubeState] = useState(() => {\n    // Initialize solved cube state - track positions and original colors\n    // A real Rubik's cube has 26 pieces (not 27) - the center core is missing\n    const state = [];\n    for (let x = -1; x <= 1; x++) {\n      for (let y = -1; y <= 1; y++) {\n        for (let z = -1; z <= 1; z++) {\n          // Skip the center piece (0, 0, 0) - this is the core mechanism\n          if (x === 0 && y === 0 && z === 0) continue;\n          const position = [x, y, z];\n          // Store original colors for each face based on solved state\n          // Each piece gets colors based on its position type (corner, edge, center)\n          const colors = {\n            front: 'black',\n            back: 'black',\n            right: 'black',\n            left: 'black',\n            top: 'black',\n            bottom: 'black'\n          };\n\n          // Determine piece type and assign appropriate colors\n          const isCorner = x !== 0 && y !== 0 && z !== 0;\n          const isEdge = x === 0 && y !== 0 && z !== 0 || x !== 0 && y === 0 && z !== 0 || x !== 0 && y !== 0 && z === 0;\n          const isCenter = x === 0 && y === 0 && z !== 0 || x === 0 && y !== 0 && z === 0 || x !== 0 && y === 0 && z === 0;\n          if (isCorner) {\n            // Corner pieces: 3 colors based on which faces they touch\n            if (z === 1) colors.front = 'white';\n            if (z === -1) colors.back = 'yellow';\n            if (x === 1) colors.right = 'red';\n            if (x === -1) colors.left = 'orange';\n            if (y === 1) colors.top = 'blue';\n            if (y === -1) colors.bottom = 'green';\n          } else if (isEdge) {\n            // Edge pieces: 2 colors based on which faces they touch\n            if (z === 1) colors.front = 'white';\n            if (z === -1) colors.back = 'yellow';\n            if (x === 1) colors.right = 'red';\n            if (x === -1) colors.left = 'orange';\n            if (y === 1) colors.top = 'blue';\n            if (y === -1) colors.bottom = 'green';\n          } else if (isCenter) {\n            // Center pieces: 1 specific color each\n            if (z === 1) colors.front = 'white';\n            if (z === -1) colors.back = 'yellow';\n            if (x === 1) colors.right = 'red';\n            if (x === -1) colors.left = 'orange';\n            if (y === 1) colors.top = 'blue';\n            if (y === -1) colors.bottom = 'green';\n          }\n          state.push({\n            position: [...position],\n            colors\n          });\n        }\n      }\n    }\n    return state;\n  });\n  const [isAnimating, setIsAnimating] = useState(false);\n  const [animationQueue, setAnimationQueue] = useState([]);\n\n  // Rotation functions for each face\n  const rotateFace = useCallback((face, direction) => {\n    if (isAnimating) return;\n    setIsAnimating(true);\n    setCubeState(prevState => {\n      const newState = [...prevState];\n\n      // Define which pieces belong to each face\n      const facePieces = {\n        'F': newState.filter(p => p.position[2] === 1),\n        // Front face\n        'B': newState.filter(p => p.position[2] === -1),\n        // Back face\n        'R': newState.filter(p => p.position[0] === 1),\n        // Right face\n        'L': newState.filter(p => p.position[0] === -1),\n        // Left face\n        'U': newState.filter(p => p.position[1] === 1),\n        // Up face\n        'D': newState.filter(p => p.position[1] === -1) // Down face\n      };\n      const pieces = facePieces[face];\n      if (!pieces) return prevState;\n\n      // Apply rotation based on face and direction\n      pieces.forEach(piece => {\n        const [x, y, z] = piece.position;\n        let newX = x,\n          newY = y,\n          newZ = z;\n        let newColors = {\n          ...piece.colors\n        };\n        switch (face) {\n          case 'F':\n            // Front face rotation\n            if (direction === 'clockwise') {\n              newX = -y;\n              newY = x;\n              // Rotate colors: top->right, right->bottom, bottom->left, left->top\n              const temp = newColors.top;\n              newColors.top = newColors.left;\n              newColors.left = newColors.bottom;\n              newColors.bottom = newColors.right;\n              newColors.right = temp;\n            } else {\n              newX = y;\n              newY = -x;\n              // Rotate colors: top->left, left->bottom, bottom->right, right->top\n              const temp = newColors.top;\n              newColors.top = newColors.right;\n              newColors.right = newColors.bottom;\n              newColors.bottom = newColors.left;\n              newColors.left = temp;\n            }\n            break;\n          case 'B':\n            // Back face rotation\n            if (direction === 'clockwise') {\n              newX = y;\n              newY = -x;\n              // Rotate colors: top->left, left->bottom, bottom->right, right->top\n              const temp = newColors.top;\n              newColors.top = newColors.right;\n              newColors.right = newColors.bottom;\n              newColors.bottom = newColors.left;\n              newColors.left = temp;\n            } else {\n              newX = -y;\n              newY = x;\n              // Rotate colors: top->right, right->bottom, bottom->left, left->top\n              const temp = newColors.top;\n              newColors.top = newColors.left;\n              newColors.left = newColors.bottom;\n              newColors.bottom = newColors.right;\n              newColors.right = temp;\n            }\n            break;\n          case 'R':\n            // Right face rotation\n            if (direction === 'clockwise') {\n              newZ = -y;\n              newY = z;\n              // Rotate colors: top->front, front->bottom, bottom->back, back->top\n              const temp = newColors.top;\n              newColors.top = newColors.back;\n              newColors.back = newColors.bottom;\n              newColors.bottom = newColors.front;\n              newColors.front = temp;\n            } else {\n              newZ = y;\n              newY = -z;\n              // Rotate colors: top->back, back->bottom, bottom->front, front->top\n              const temp = newColors.top;\n              newColors.top = newColors.front;\n              newColors.front = newColors.bottom;\n              newColors.bottom = newColors.back;\n              newColors.back = temp;\n            }\n            break;\n          case 'L':\n            // Left face rotation\n            if (direction === 'clockwise') {\n              newZ = y;\n              newY = -z;\n              // Rotate colors: top->back, back->bottom, bottom->front, front->top\n              const temp = newColors.top;\n              newColors.top = newColors.front;\n              newColors.front = newColors.bottom;\n              newColors.bottom = newColors.back;\n              newColors.back = temp;\n            } else {\n              newZ = -y;\n              newY = z;\n              // Rotate colors: top->front, front->bottom, bottom->back, back->top\n              const temp = newColors.top;\n              newColors.top = newColors.back;\n              newColors.back = newColors.bottom;\n              newColors.bottom = newColors.front;\n              newColors.front = temp;\n            }\n            break;\n          case 'U':\n            // Up face rotation\n            if (direction === 'clockwise') {\n              newX = z;\n              newZ = -x;\n              // Rotate colors: front->right, right->back, back->left, left->front\n              const temp = newColors.front;\n              newColors.front = newColors.left;\n              newColors.left = newColors.back;\n              newColors.back = newColors.right;\n              newColors.right = temp;\n            } else {\n              newX = -z;\n              newZ = x;\n              // Rotate colors: front->left, left->back, back->right, right->front\n              const temp = newColors.front;\n              newColors.front = newColors.right;\n              newColors.right = newColors.back;\n              newColors.back = newColors.left;\n              newColors.left = temp;\n            }\n            break;\n          case 'D':\n            // Down face rotation\n            if (direction === 'clockwise') {\n              newX = -z;\n              newZ = x;\n              // Rotate colors: front->left, left->back, back->right, right->front\n              const temp = newColors.front;\n              newColors.front = newColors.right;\n              newColors.right = newColors.back;\n              newColors.back = newColors.left;\n              newColors.left = temp;\n            } else {\n              newX = z;\n              newZ = -x;\n              // Rotate colors: front->right, right->back, back->left, left->front\n              const temp = newColors.front;\n              newColors.front = newColors.left;\n              newColors.left = newColors.back;\n              newColors.back = newColors.right;\n              newColors.right = temp;\n            }\n            break;\n        }\n        piece.position = [newX, newY, newZ];\n        piece.colors = newColors;\n      });\n      return newState;\n    });\n\n    // Animation delay\n    setTimeout(() => setIsAnimating(false), 300);\n  }, [isAnimating]);\n\n  // Execute scramble moves\n  const executeScramble = useCallback(queue => {\n    if (queue.length === 0) {\n      setIsAnimating(false);\n      return;\n    }\n    const {\n      move,\n      direction\n    } = queue[0];\n    console.log(`Executing move: ${move} ${direction}`);\n\n    // Apply the rotation immediately\n    setCubeState(prevState => {\n      const newState = [...prevState];\n\n      // Define which pieces belong to each face\n      const facePieces = {\n        'F': newState.filter(p => p.position[2] === 1),\n        // Front face\n        'B': newState.filter(p => p.position[2] === -1),\n        // Back face\n        'R': newState.filter(p => p.position[0] === 1),\n        // Right face\n        'L': newState.filter(p => p.position[0] === -1),\n        // Left face\n        'U': newState.filter(p => p.position[1] === 1),\n        // Up face\n        'D': newState.filter(p => p.position[1] === -1) // Down face\n      };\n      const pieces = facePieces[move];\n      if (!pieces) return prevState;\n\n      // Apply rotation based on face and direction\n      pieces.forEach(piece => {\n        const [x, y, z] = piece.position;\n        let newX = x,\n          newY = y,\n          newZ = z;\n        let newColors = {\n          ...piece.colors\n        };\n        switch (move) {\n          case 'F':\n            // Front face rotation\n            if (direction === 'clockwise') {\n              newX = -y;\n              newY = x;\n              // Rotate colors: top->right, right->bottom, bottom->left, left->top\n              const temp = newColors.top;\n              newColors.top = newColors.left;\n              newColors.left = newColors.bottom;\n              newColors.bottom = newColors.right;\n              newColors.right = temp;\n            } else {\n              newX = y;\n              newY = -x;\n              // Rotate colors: top->left, left->bottom, bottom->right, right->top\n              const temp = newColors.top;\n              newColors.top = newColors.right;\n              newColors.right = newColors.bottom;\n              newColors.bottom = newColors.left;\n              newColors.left = temp;\n            }\n            break;\n          case 'B':\n            // Back face rotation\n            if (direction === 'clockwise') {\n              newX = y;\n              newY = -x;\n              // Rotate colors: top->left, left->bottom, bottom->right, right->top\n              const temp = newColors.top;\n              newColors.top = newColors.right;\n              newColors.right = newColors.bottom;\n              newColors.bottom = newColors.left;\n              newColors.left = temp;\n            } else {\n              newX = -y;\n              newY = x;\n              // Rotate colors: top->right, right->bottom, bottom->left, left->top\n              const temp = newColors.top;\n              newColors.top = newColors.left;\n              newColors.left = newColors.bottom;\n              newColors.bottom = newColors.right;\n              newColors.right = temp;\n            }\n            break;\n          case 'R':\n            // Right face rotation\n            if (direction === 'clockwise') {\n              newZ = -y;\n              newY = z;\n              // Rotate colors: top->front, front->bottom, bottom->back, back->top\n              const temp = newColors.top;\n              newColors.top = newColors.back;\n              newColors.back = newColors.bottom;\n              newColors.bottom = newColors.front;\n              newColors.front = temp;\n            } else {\n              newZ = y;\n              newY = -z;\n              // Rotate colors: top->back, back->bottom, bottom->front, front->top\n              const temp = newColors.top;\n              newColors.top = newColors.front;\n              newColors.front = newColors.bottom;\n              newColors.bottom = newColors.back;\n              newColors.back = temp;\n            }\n            break;\n          case 'L':\n            // Left face rotation\n            if (direction === 'clockwise') {\n              newZ = y;\n              newY = -z;\n              // Rotate colors: top->back, back->bottom, bottom->front, front->top\n              const temp = newColors.top;\n              newColors.top = newColors.front;\n              newColors.front = newColors.bottom;\n              newColors.bottom = newColors.back;\n              newColors.back = temp;\n            } else {\n              newZ = -y;\n              newY = z;\n              // Rotate colors: top->front, front->bottom, bottom->back, back->top\n              const temp = newColors.top;\n              newColors.top = newColors.back;\n              newColors.back = newColors.bottom;\n              newColors.bottom = newColors.front;\n              newColors.front = temp;\n            }\n            break;\n          case 'U':\n            // Up face rotation\n            if (direction === 'clockwise') {\n              newX = z;\n              newZ = -x;\n              // Rotate colors: front->right, right->back, back->left, left->front\n              const temp = newColors.front;\n              newColors.front = newColors.left;\n              newColors.left = newColors.back;\n              newColors.back = newColors.right;\n              newColors.right = temp;\n            } else {\n              newX = -z;\n              newZ = x;\n              // Rotate colors: front->left, left->back, back->right, right->front\n              const temp = newColors.front;\n              newColors.front = newColors.right;\n              newColors.right = newColors.back;\n              newColors.back = newColors.left;\n              newColors.left = temp;\n            }\n            break;\n          case 'D':\n            // Down face rotation\n            if (direction === 'clockwise') {\n              newX = -z;\n              newZ = x;\n              // Rotate colors: front->left, left->back, back->right, right->front\n              const temp = newColors.front;\n              newColors.front = newColors.right;\n              newColors.right = newColors.back;\n              newColors.back = newColors.left;\n              newColors.left = temp;\n            } else {\n              newX = z;\n              newZ = -x;\n              // Rotate colors: front->right, right->back, back->left, left->front\n              const temp = newColors.front;\n              newColors.front = newColors.left;\n              newColors.left = newColors.back;\n              newColors.back = newColors.right;\n              newColors.right = temp;\n            }\n            break;\n        }\n        piece.position = [newX, newY, newZ];\n        piece.colors = newColors;\n      });\n      return newState;\n    });\n\n    // Continue with the next move after a delay\n    setTimeout(() => {\n      executeScramble(queue.slice(1));\n    }, 350);\n  }, []);\n\n  // Scramble function using standard notation\n  const scramble = useCallback(() => {\n    console.log('Scramble function called');\n    if (isAnimating) {\n      console.log('Already animating, skipping scramble');\n      return;\n    }\n    setIsAnimating(true);\n    console.log('Starting scramble animation');\n    const moves = ['F', 'B', 'R', 'L', 'U', 'D'];\n    const directions = ['clockwise', 'counterclockwise'];\n    const scrambleLength = 20;\n    let currentQueue = [];\n    let lastMove = '';\n    for (let i = 0; i < scrambleLength; i++) {\n      let move;\n      let direction;\n\n      // Avoid doing the same move twice in a row\n      do {\n        move = moves[Math.floor(Math.random() * moves.length)];\n      } while (move === lastMove);\n      direction = directions[Math.floor(Math.random() * directions.length)];\n      lastMove = move;\n      currentQueue.push({\n        move,\n        direction\n      });\n    }\n    console.log('Generated scramble queue:', currentQueue);\n    setAnimationQueue(currentQueue);\n    executeScramble(currentQueue);\n  }, [isAnimating, executeScramble]);\n\n  // Reset function\n  const reset = useCallback(() => {\n    if (isAnimating) return;\n    setCubeState(() => {\n      const state = [];\n      for (let x = -1; x <= 1; x++) {\n        for (let y = -1; y <= 1; y++) {\n          for (let z = -1; z <= 1; z++) {\n            // Skip the center piece (0, 0, 0) - this is the core mechanism\n            if (x === 0 && y === 0 && z === 0) continue;\n            const position = [x, y, z];\n            // Store original colors for each face based on solved state\n            // Each piece gets colors based on its position type (corner, edge, center)\n            const colors = {\n              front: 'black',\n              back: 'black',\n              right: 'black',\n              left: 'black',\n              top: 'black',\n              bottom: 'black'\n            };\n\n            // Determine piece type and assign appropriate colors\n            const isCorner = x !== 0 && y !== 0 && z !== 0;\n            const isEdge = x === 0 && y !== 0 && z !== 0 || x !== 0 && y === 0 && z !== 0 || x !== 0 && y !== 0 && z === 0;\n            const isCenter = x === 0 && y === 0 && z !== 0 || x === 0 && y !== 0 && z === 0 || x !== 0 && y === 0 && z === 0;\n            if (isCorner) {\n              // Corner pieces: 3 colors based on which faces they touch\n              if (z === 1) colors.front = 'white';\n              if (z === -1) colors.back = 'yellow';\n              if (x === 1) colors.right = 'red';\n              if (x === -1) colors.left = 'orange';\n              if (y === 1) colors.top = 'blue';\n              if (y === -1) colors.bottom = 'green';\n            } else if (isEdge) {\n              // Edge pieces: 2 colors based on which faces they touch\n              if (z === 1) colors.front = 'white';\n              if (z === -1) colors.back = 'yellow';\n              if (x === 1) colors.right = 'red';\n              if (x === -1) colors.left = 'orange';\n              if (y === 1) colors.top = 'blue';\n              if (y === -1) colors.bottom = 'green';\n            } else if (isCenter) {\n              // Center pieces: 1 specific color each\n              if (z === 1) colors.front = 'white';\n              if (z === -1) colors.back = 'yellow';\n              if (x === 1) colors.right = 'red';\n              if (x === -1) colors.left = 'orange';\n              if (y === 1) colors.top = 'blue';\n              if (y === -1) colors.bottom = 'green';\n            }\n            state.push({\n              position: [...position],\n              colors\n            });\n          }\n        }\n      }\n      return state;\n    });\n  }, [isAnimating]);\n  return {\n    cubeState,\n    isAnimating,\n    rotateFace,\n    scramble,\n    reset\n  };\n}\n\n// Main cube group component with enhanced structure\n_s2(useCubeState, \"LEgKtu0O8OlFQHgbkZWzH07X/D8=\");\nfunction CubeGroup({\n  isRotating,\n  autoRotate = false,\n  onScramble,\n  onReset\n}) {\n  _s3();\n  const groupRef = useRef();\n  const [rotationSpeed] = useState({\n    x: 0.005,\n    y: 0.01\n  });\n  const {\n    cubeState,\n    isAnimating,\n    rotateFace,\n    scramble,\n    reset\n  } = useCubeState();\n\n  // Expose functions to parent\n  React.useEffect(() => {\n    if (onScramble) onScramble(scramble);\n    if (onReset) onReset(reset);\n  }, [onScramble, onReset, scramble, reset]);\n  useFrame(state => {\n    if (autoRotate && groupRef.current && !isAnimating) {\n      groupRef.current.rotation.y += rotationSpeed.y;\n      groupRef.current.rotation.x += rotationSpeed.x;\n    }\n  });\n  return /*#__PURE__*/_jsxDEV(\"group\", {\n    ref: groupRef,\n    children: cubeState.map((piece, index) => /*#__PURE__*/_jsxDEV(CubePiece, {\n      position: piece.position,\n      colors: piece.colors,\n      pieceId: index\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 664,\n      columnNumber: 15\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 662,\n    columnNumber: 11\n  }, this);\n}\n\n// Main Rubik's Cube component\n_s3(CubeGroup, \"4ehKp0Jd2vChjTIyWIyZQmjvX+4=\", false, function () {\n  return [useCubeState, useFrame];\n});\n_c2 = CubeGroup;\nfunction RubiksCube({\n  isRotating,\n  autoRotate = false,\n  onScramble,\n  onReset\n}) {\n  return /*#__PURE__*/_jsxDEV(Canvas, {\n    camera: {\n      position: [6, 6, 6],\n      fov: 60\n    },\n    style: {\n      width: '100%',\n      height: '100%'\n    },\n    gl: {\n      antialias: true,\n      alpha: true\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"ambientLight\", {\n      intensity: 1.2\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 684,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"directionalLight\", {\n      position: [10, 10, 5],\n      intensity: 3.0,\n      castShadow: true,\n      \"shadow-mapSize-width\": 2048,\n      \"shadow-mapSize-height\": 2048\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 685,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"pointLight\", {\n      position: [-10, -10, -5],\n      intensity: 2.0\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 692,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"pointLight\", {\n      position: [10, -10, 5],\n      intensity: 2.0\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 693,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"pointLight\", {\n      position: [0, 0, 10],\n      intensity: 1.5\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 694,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"spotLight\", {\n      position: [0, 10, 0],\n      angle: 0.5,\n      penumbra: 0.5,\n      intensity: 2.0,\n      castShadow: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 695,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Environment, {\n      preset: \"city\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 704,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CubeGroup, {\n      isRotating: isRotating,\n      autoRotate: autoRotate,\n      onScramble: onScramble,\n      onReset: onReset\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 707,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(OrbitControls, {\n      enablePan: true,\n      enableZoom: true,\n      enableRotate: true,\n      autoRotate: false,\n      autoRotateSpeed: 1,\n      minDistance: 3,\n      maxDistance: 15,\n      dampingFactor: 0.05,\n      enableDamping: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 715,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 678,\n    columnNumber: 5\n  }, this);\n}\n_c3 = RubiksCube;\nexport default RubiksCube;\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"CubePiece\");\n$RefreshReg$(_c2, \"CubeGroup\");\n$RefreshReg$(_c3, \"RubiksCube\");","map":{"version":3,"names":["React","useRef","useMemo","useState","useCallback","Canvas","useFrame","OrbitControls","Environment","THREE","jsxDEV","_jsxDEV","CubePiece","position","colors","size","pieceId","_s","meshRef","colorMap","cubeGeometry","BoxGeometry","faceGeometry","geometry","PlaneGeometry","getFaceColor","faceIndex","front","back","right","left","top","bottom","faces","rotation","color","faceName","Math","PI","ref","children","object","fileName","_jsxFileName","lineNumber","columnNumber","side","DoubleSide","shininess","specular","map","face","index","FrontSide","emissive","emissiveIntensity","args","transparent","opacity","_c","useCubeState","_s2","cubeState","setCubeState","state","x","y","z","isCorner","isEdge","isCenter","push","isAnimating","setIsAnimating","animationQueue","setAnimationQueue","rotateFace","direction","prevState","newState","facePieces","filter","p","pieces","forEach","piece","newX","newY","newZ","newColors","temp","setTimeout","executeScramble","queue","length","move","console","log","slice","scramble","moves","directions","scrambleLength","currentQueue","lastMove","i","floor","random","reset","CubeGroup","isRotating","autoRotate","onScramble","onReset","_s3","groupRef","rotationSpeed","useEffect","current","_c2","RubiksCube","camera","fov","style","width","height","gl","antialias","alpha","intensity","castShadow","angle","penumbra","preset","enablePan","enableZoom","enableRotate","autoRotateSpeed","minDistance","maxDistance","dampingFactor","enableDamping","_c3","$RefreshReg$"],"sources":["C:/Repo/GitHub/rubiks-cube/src/components/RubiksCube.js"],"sourcesContent":["import React, { useRef, useMemo, useState, useCallback } from 'react';\r\nimport { Canvas, useFrame } from '@react-three/fiber';\r\nimport { OrbitControls, Environment } from '@react-three/drei';\r\nimport * as THREE from 'three';\r\n\r\n// Individual cube piece component with proper multi-colored faces\r\nfunction CubePiece({ position, colors, size = 0.95, pieceId = 0 }) {\r\n  const meshRef = useRef();\r\n  \r\n  const colorMap = {\r\n    'white': '#ffffff',\r\n    'yellow': '#ffd700',\r\n    'red': '#ff0000',\r\n    'orange': '#ff8c00',\r\n    'blue': '#0000ff',\r\n    'green': '#00ff00',\r\n    'black': '#1a1a1a'\r\n  };\r\n\r\n  // Create a solid cube geometry for the base\r\n  const cubeGeometry = useMemo(() => {\r\n    return new THREE.BoxGeometry(size, size, size);\r\n  }, [size]);\r\n\r\n  // Create individual face geometries for each side\r\n  const faceGeometry = useMemo(() => {\r\n    const geometry = new THREE.PlaneGeometry(size, size);\r\n    return geometry;\r\n  }, [size]);\r\n\r\n  // Get the color for a face based on the face index\r\n  const getFaceColor = (faceIndex) => {\r\n    // Face indices: 0=front, 1=back, 2=right, 3=left, 4=top, 5=bottom\r\n    switch (faceIndex) {\r\n      case 0: return colors.front;  // Front face\r\n      case 1: return colors.back;   // Back face\r\n      case 2: return colors.right;  // Right face\r\n      case 3: return colors.left;   // Left face\r\n      case 4: return colors.top;    // Top face\r\n      case 5: return colors.bottom; // Bottom face\r\n      default: return 'black';\r\n    }\r\n  };\r\n\r\n  // Face positions and rotations for a cube - faces positioned on the surface\r\n  const faces = [\r\n    { position: [0, 0, size/2 + 0.001], rotation: [0, 0, 0], color: getFaceColor(0), faceName: 'Front' }, // Front\r\n    { position: [0, 0, -size/2 - 0.001], rotation: [0, Math.PI, 0], color: getFaceColor(1), faceName: 'Back' }, // Back\r\n    { position: [size/2 + 0.001, 0, 0], rotation: [0, Math.PI/2, 0], color: getFaceColor(2), faceName: 'Right' }, // Right\r\n    { position: [-size/2 - 0.001, 0, 0], rotation: [0, -Math.PI/2, 0], color: getFaceColor(3), faceName: 'Left' }, // Left\r\n    { position: [0, size/2 + 0.001, 0], rotation: [-Math.PI/2, 0, 0], color: getFaceColor(4), faceName: 'Top' }, // Top\r\n    { position: [0, -size/2 - 0.001, 0], rotation: [Math.PI/2, 0, 0], color: getFaceColor(5), faceName: 'Bottom' }  // Bottom\r\n  ];\r\n\r\n  return (\r\n    <group ref={meshRef} position={position}>\r\n      {/* Solid cube base */}\r\n      <mesh>\r\n        <primitive object={cubeGeometry} />\r\n        <meshPhongMaterial \r\n          color=\"#2a2a2a\"\r\n          side={THREE.DoubleSide}\r\n          shininess={50}\r\n          specular={0x111111}\r\n        />\r\n      </mesh>\r\n      \r\n      {/* Colored faces on the surface */}\r\n      {faces.map((face, index) => (\r\n        <mesh key={index} position={face.position} rotation={face.rotation}>\r\n          <primitive object={faceGeometry} />\r\n          <meshPhongMaterial \r\n            color={colorMap[face.color] || colorMap['black']}\r\n            side={THREE.FrontSide}\r\n            shininess={100}\r\n            specular={0x222222}\r\n            emissive={colorMap[face.color] || colorMap['black']}\r\n            emissiveIntensity={0.3}\r\n          />\r\n        </mesh>\r\n      ))}\r\n      \r\n      {/* Debug text labels for each face */}\r\n      {faces.map((face, index) => {\r\n        if (face.color === 'black') return null; // Don't show labels on black faces\r\n        \r\n        return (\r\n          <group key={`text-${index}`} position={face.position} rotation={face.rotation}>\r\n            {/* Face name label */}\r\n            <mesh position={[0, 0.15, 0.002]}>\r\n              <planeGeometry args={[size * 0.3, size * 0.1]} />\r\n              <meshBasicMaterial color=\"red\" transparent opacity={0.8} />\r\n            </mesh>\r\n            {/* Piece ID number */}\r\n            <mesh position={[0, 0, 0.003]}>\r\n              <planeGeometry args={[size * 0.2, size * 0.2]} />\r\n              <meshBasicMaterial color=\"white\" transparent opacity={0.9} />\r\n            </mesh>\r\n            {/* Face index */}\r\n            <mesh position={[0, -0.15, 0.002]}>\r\n              <planeGeometry args={[size * 0.2, size * 0.1]} />\r\n              <meshBasicMaterial color=\"yellow\" transparent opacity={0.8} />\r\n            </mesh>\r\n          </group>\r\n        );\r\n      })}\r\n      \r\n      {/* Large piece ID in the center of each piece */}\r\n      <mesh position={[0, 0, 0]}>\r\n        <planeGeometry args={[size * 0.4, size * 0.4]} />\r\n        <meshBasicMaterial color=\"black\" transparent opacity={0.7} />\r\n      </mesh>\r\n    </group>\r\n  );\r\n}\r\n\r\n// Cube state management and rotation logic\r\nfunction useCubeState() {\r\n  const [cubeState, setCubeState] = useState(() => {\r\n    // Initialize solved cube state - track positions and original colors\r\n    // A real Rubik's cube has 26 pieces (not 27) - the center core is missing\r\n    const state = [];\r\n    for (let x = -1; x <= 1; x++) {\r\n      for (let y = -1; y <= 1; y++) {\r\n        for (let z = -1; z <= 1; z++) {\r\n          // Skip the center piece (0, 0, 0) - this is the core mechanism\r\n          if (x === 0 && y === 0 && z === 0) continue;\r\n          \r\n          const position = [x, y, z];\r\n          // Store original colors for each face based on solved state\r\n          // Each piece gets colors based on its position type (corner, edge, center)\r\n          const colors = {\r\n            front: 'black',\r\n            back: 'black', \r\n            right: 'black',\r\n            left: 'black',\r\n            top: 'black',\r\n            bottom: 'black'\r\n          };\r\n          \r\n          // Determine piece type and assign appropriate colors\r\n          const isCorner = (x !== 0 && y !== 0 && z !== 0);\r\n          const isEdge = ((x === 0 && y !== 0 && z !== 0) || \r\n                         (x !== 0 && y === 0 && z !== 0) || \r\n                         (x !== 0 && y !== 0 && z === 0));\r\n          const isCenter = ((x === 0 && y === 0 && z !== 0) || \r\n                           (x === 0 && y !== 0 && z === 0) || \r\n                           (x !== 0 && y === 0 && z === 0));\r\n          \r\n          if (isCorner) {\r\n            // Corner pieces: 3 colors based on which faces they touch\r\n            if (z === 1) colors.front = 'white';\r\n            if (z === -1) colors.back = 'yellow';\r\n            if (x === 1) colors.right = 'red';\r\n            if (x === -1) colors.left = 'orange';\r\n            if (y === 1) colors.top = 'blue';\r\n            if (y === -1) colors.bottom = 'green';\r\n          } else if (isEdge) {\r\n            // Edge pieces: 2 colors based on which faces they touch\r\n            if (z === 1) colors.front = 'white';\r\n            if (z === -1) colors.back = 'yellow';\r\n            if (x === 1) colors.right = 'red';\r\n            if (x === -1) colors.left = 'orange';\r\n            if (y === 1) colors.top = 'blue';\r\n            if (y === -1) colors.bottom = 'green';\r\n          } else if (isCenter) {\r\n            // Center pieces: 1 specific color each\r\n            if (z === 1) colors.front = 'white';\r\n            if (z === -1) colors.back = 'yellow';\r\n            if (x === 1) colors.right = 'red';\r\n            if (x === -1) colors.left = 'orange';\r\n            if (y === 1) colors.top = 'blue';\r\n            if (y === -1) colors.bottom = 'green';\r\n          }\r\n          state.push({ position: [...position], colors });\r\n        }\r\n      }\r\n    }\r\n    return state;\r\n  });\r\n\r\n  const [isAnimating, setIsAnimating] = useState(false);\r\n  const [animationQueue, setAnimationQueue] = useState([]);\r\n\r\n  // Rotation functions for each face\r\n  const rotateFace = useCallback((face, direction) => {\r\n    if (isAnimating) return;\r\n    \r\n    setIsAnimating(true);\r\n    \r\n    setCubeState(prevState => {\r\n      const newState = [...prevState];\r\n      \r\n      // Define which pieces belong to each face\r\n      const facePieces = {\r\n        'F': newState.filter(p => p.position[2] === 1), // Front face\r\n        'B': newState.filter(p => p.position[2] === -1), // Back face\r\n        'R': newState.filter(p => p.position[0] === 1), // Right face\r\n        'L': newState.filter(p => p.position[0] === -1), // Left face\r\n        'U': newState.filter(p => p.position[1] === 1), // Up face\r\n        'D': newState.filter(p => p.position[1] === -1) // Down face\r\n      };\r\n\r\n      const pieces = facePieces[face];\r\n      if (!pieces) return prevState;\r\n\r\n        // Apply rotation based on face and direction\r\n        pieces.forEach(piece => {\r\n          const [x, y, z] = piece.position;\r\n          let newX = x, newY = y, newZ = z;\r\n          let newColors = { ...piece.colors };\r\n          \r\n          switch (face) {\r\n            case 'F': // Front face rotation\r\n              if (direction === 'clockwise') {\r\n                newX = -y;\r\n                newY = x;\r\n                // Rotate colors: top->right, right->bottom, bottom->left, left->top\r\n                const temp = newColors.top;\r\n                newColors.top = newColors.left;\r\n                newColors.left = newColors.bottom;\r\n                newColors.bottom = newColors.right;\r\n                newColors.right = temp;\r\n              } else {\r\n                newX = y;\r\n                newY = -x;\r\n                // Rotate colors: top->left, left->bottom, bottom->right, right->top\r\n                const temp = newColors.top;\r\n                newColors.top = newColors.right;\r\n                newColors.right = newColors.bottom;\r\n                newColors.bottom = newColors.left;\r\n                newColors.left = temp;\r\n              }\r\n              break;\r\n            case 'B': // Back face rotation\r\n              if (direction === 'clockwise') {\r\n                newX = y;\r\n                newY = -x;\r\n                // Rotate colors: top->left, left->bottom, bottom->right, right->top\r\n                const temp = newColors.top;\r\n                newColors.top = newColors.right;\r\n                newColors.right = newColors.bottom;\r\n                newColors.bottom = newColors.left;\r\n                newColors.left = temp;\r\n              } else {\r\n                newX = -y;\r\n                newY = x;\r\n                // Rotate colors: top->right, right->bottom, bottom->left, left->top\r\n                const temp = newColors.top;\r\n                newColors.top = newColors.left;\r\n                newColors.left = newColors.bottom;\r\n                newColors.bottom = newColors.right;\r\n                newColors.right = temp;\r\n              }\r\n              break;\r\n            case 'R': // Right face rotation\r\n              if (direction === 'clockwise') {\r\n                newZ = -y;\r\n                newY = z;\r\n                // Rotate colors: top->front, front->bottom, bottom->back, back->top\r\n                const temp = newColors.top;\r\n                newColors.top = newColors.back;\r\n                newColors.back = newColors.bottom;\r\n                newColors.bottom = newColors.front;\r\n                newColors.front = temp;\r\n              } else {\r\n                newZ = y;\r\n                newY = -z;\r\n                // Rotate colors: top->back, back->bottom, bottom->front, front->top\r\n                const temp = newColors.top;\r\n                newColors.top = newColors.front;\r\n                newColors.front = newColors.bottom;\r\n                newColors.bottom = newColors.back;\r\n                newColors.back = temp;\r\n              }\r\n              break;\r\n            case 'L': // Left face rotation\r\n              if (direction === 'clockwise') {\r\n                newZ = y;\r\n                newY = -z;\r\n                // Rotate colors: top->back, back->bottom, bottom->front, front->top\r\n                const temp = newColors.top;\r\n                newColors.top = newColors.front;\r\n                newColors.front = newColors.bottom;\r\n                newColors.bottom = newColors.back;\r\n                newColors.back = temp;\r\n              } else {\r\n                newZ = -y;\r\n                newY = z;\r\n                // Rotate colors: top->front, front->bottom, bottom->back, back->top\r\n                const temp = newColors.top;\r\n                newColors.top = newColors.back;\r\n                newColors.back = newColors.bottom;\r\n                newColors.bottom = newColors.front;\r\n                newColors.front = temp;\r\n              }\r\n              break;\r\n            case 'U': // Up face rotation\r\n              if (direction === 'clockwise') {\r\n                newX = z;\r\n                newZ = -x;\r\n                // Rotate colors: front->right, right->back, back->left, left->front\r\n                const temp = newColors.front;\r\n                newColors.front = newColors.left;\r\n                newColors.left = newColors.back;\r\n                newColors.back = newColors.right;\r\n                newColors.right = temp;\r\n              } else {\r\n                newX = -z;\r\n                newZ = x;\r\n                // Rotate colors: front->left, left->back, back->right, right->front\r\n                const temp = newColors.front;\r\n                newColors.front = newColors.right;\r\n                newColors.right = newColors.back;\r\n                newColors.back = newColors.left;\r\n                newColors.left = temp;\r\n              }\r\n              break;\r\n            case 'D': // Down face rotation\r\n              if (direction === 'clockwise') {\r\n                newX = -z;\r\n                newZ = x;\r\n                // Rotate colors: front->left, left->back, back->right, right->front\r\n                const temp = newColors.front;\r\n                newColors.front = newColors.right;\r\n                newColors.right = newColors.back;\r\n                newColors.back = newColors.left;\r\n                newColors.left = temp;\r\n              } else {\r\n                newX = z;\r\n                newZ = -x;\r\n                // Rotate colors: front->right, right->back, back->left, left->front\r\n                const temp = newColors.front;\r\n                newColors.front = newColors.left;\r\n                newColors.left = newColors.back;\r\n                newColors.back = newColors.right;\r\n                newColors.right = temp;\r\n              }\r\n              break;\r\n          }\r\n          \r\n          piece.position = [newX, newY, newZ];\r\n          piece.colors = newColors;\r\n        });\r\n\r\n      return newState;\r\n    });\r\n    \r\n    // Animation delay\r\n    setTimeout(() => setIsAnimating(false), 300);\r\n  }, [isAnimating]);\r\n\r\n  // Execute scramble moves\r\n  const executeScramble = useCallback((queue) => {\r\n    if (queue.length === 0) {\r\n      setIsAnimating(false);\r\n      return;\r\n    }\r\n    \r\n    const { move, direction } = queue[0];\r\n    console.log(`Executing move: ${move} ${direction}`);\r\n    \r\n    // Apply the rotation immediately\r\n    setCubeState(prevState => {\r\n      const newState = [...prevState];\r\n      \r\n      // Define which pieces belong to each face\r\n      const facePieces = {\r\n        'F': newState.filter(p => p.position[2] === 1), // Front face\r\n        'B': newState.filter(p => p.position[2] === -1), // Back face\r\n        'R': newState.filter(p => p.position[0] === 1), // Right face\r\n        'L': newState.filter(p => p.position[0] === -1), // Left face\r\n        'U': newState.filter(p => p.position[1] === 1), // Up face\r\n        'D': newState.filter(p => p.position[1] === -1) // Down face\r\n      };\r\n\r\n      const pieces = facePieces[move];\r\n      if (!pieces) return prevState;\r\n\r\n        // Apply rotation based on face and direction\r\n        pieces.forEach(piece => {\r\n          const [x, y, z] = piece.position;\r\n          let newX = x, newY = y, newZ = z;\r\n          let newColors = { ...piece.colors };\r\n          \r\n          switch (move) {\r\n            case 'F': // Front face rotation\r\n              if (direction === 'clockwise') {\r\n                newX = -y;\r\n                newY = x;\r\n                // Rotate colors: top->right, right->bottom, bottom->left, left->top\r\n                const temp = newColors.top;\r\n                newColors.top = newColors.left;\r\n                newColors.left = newColors.bottom;\r\n                newColors.bottom = newColors.right;\r\n                newColors.right = temp;\r\n              } else {\r\n                newX = y;\r\n                newY = -x;\r\n                // Rotate colors: top->left, left->bottom, bottom->right, right->top\r\n                const temp = newColors.top;\r\n                newColors.top = newColors.right;\r\n                newColors.right = newColors.bottom;\r\n                newColors.bottom = newColors.left;\r\n                newColors.left = temp;\r\n              }\r\n              break;\r\n            case 'B': // Back face rotation\r\n              if (direction === 'clockwise') {\r\n                newX = y;\r\n                newY = -x;\r\n                // Rotate colors: top->left, left->bottom, bottom->right, right->top\r\n                const temp = newColors.top;\r\n                newColors.top = newColors.right;\r\n                newColors.right = newColors.bottom;\r\n                newColors.bottom = newColors.left;\r\n                newColors.left = temp;\r\n              } else {\r\n                newX = -y;\r\n                newY = x;\r\n                // Rotate colors: top->right, right->bottom, bottom->left, left->top\r\n                const temp = newColors.top;\r\n                newColors.top = newColors.left;\r\n                newColors.left = newColors.bottom;\r\n                newColors.bottom = newColors.right;\r\n                newColors.right = temp;\r\n              }\r\n              break;\r\n            case 'R': // Right face rotation\r\n              if (direction === 'clockwise') {\r\n                newZ = -y;\r\n                newY = z;\r\n                // Rotate colors: top->front, front->bottom, bottom->back, back->top\r\n                const temp = newColors.top;\r\n                newColors.top = newColors.back;\r\n                newColors.back = newColors.bottom;\r\n                newColors.bottom = newColors.front;\r\n                newColors.front = temp;\r\n              } else {\r\n                newZ = y;\r\n                newY = -z;\r\n                // Rotate colors: top->back, back->bottom, bottom->front, front->top\r\n                const temp = newColors.top;\r\n                newColors.top = newColors.front;\r\n                newColors.front = newColors.bottom;\r\n                newColors.bottom = newColors.back;\r\n                newColors.back = temp;\r\n              }\r\n              break;\r\n            case 'L': // Left face rotation\r\n              if (direction === 'clockwise') {\r\n                newZ = y;\r\n                newY = -z;\r\n                // Rotate colors: top->back, back->bottom, bottom->front, front->top\r\n                const temp = newColors.top;\r\n                newColors.top = newColors.front;\r\n                newColors.front = newColors.bottom;\r\n                newColors.bottom = newColors.back;\r\n                newColors.back = temp;\r\n              } else {\r\n                newZ = -y;\r\n                newY = z;\r\n                // Rotate colors: top->front, front->bottom, bottom->back, back->top\r\n                const temp = newColors.top;\r\n                newColors.top = newColors.back;\r\n                newColors.back = newColors.bottom;\r\n                newColors.bottom = newColors.front;\r\n                newColors.front = temp;\r\n              }\r\n              break;\r\n            case 'U': // Up face rotation\r\n              if (direction === 'clockwise') {\r\n                newX = z;\r\n                newZ = -x;\r\n                // Rotate colors: front->right, right->back, back->left, left->front\r\n                const temp = newColors.front;\r\n                newColors.front = newColors.left;\r\n                newColors.left = newColors.back;\r\n                newColors.back = newColors.right;\r\n                newColors.right = temp;\r\n              } else {\r\n                newX = -z;\r\n                newZ = x;\r\n                // Rotate colors: front->left, left->back, back->right, right->front\r\n                const temp = newColors.front;\r\n                newColors.front = newColors.right;\r\n                newColors.right = newColors.back;\r\n                newColors.back = newColors.left;\r\n                newColors.left = temp;\r\n              }\r\n              break;\r\n            case 'D': // Down face rotation\r\n              if (direction === 'clockwise') {\r\n                newX = -z;\r\n                newZ = x;\r\n                // Rotate colors: front->left, left->back, back->right, right->front\r\n                const temp = newColors.front;\r\n                newColors.front = newColors.right;\r\n                newColors.right = newColors.back;\r\n                newColors.back = newColors.left;\r\n                newColors.left = temp;\r\n              } else {\r\n                newX = z;\r\n                newZ = -x;\r\n                // Rotate colors: front->right, right->back, back->left, left->front\r\n                const temp = newColors.front;\r\n                newColors.front = newColors.left;\r\n                newColors.left = newColors.back;\r\n                newColors.back = newColors.right;\r\n                newColors.right = temp;\r\n              }\r\n              break;\r\n          }\r\n          \r\n          piece.position = [newX, newY, newZ];\r\n          piece.colors = newColors;\r\n        });\r\n\r\n      return newState;\r\n    });\r\n    \r\n    // Continue with the next move after a delay\r\n    setTimeout(() => {\r\n      executeScramble(queue.slice(1));\r\n    }, 350);\r\n  }, []);\r\n\r\n  // Scramble function using standard notation\r\n  const scramble = useCallback(() => {\r\n    console.log('Scramble function called');\r\n    if (isAnimating) {\r\n      console.log('Already animating, skipping scramble');\r\n      return;\r\n    }\r\n    \r\n    setIsAnimating(true);\r\n    console.log('Starting scramble animation');\r\n    \r\n    const moves = ['F', 'B', 'R', 'L', 'U', 'D'];\r\n    const directions = ['clockwise', 'counterclockwise'];\r\n    const scrambleLength = 20;\r\n    \r\n    let currentQueue = [];\r\n    let lastMove = '';\r\n    \r\n    for (let i = 0; i < scrambleLength; i++) {\r\n      let move;\r\n      let direction;\r\n      \r\n      // Avoid doing the same move twice in a row\r\n      do {\r\n        move = moves[Math.floor(Math.random() * moves.length)];\r\n      } while (move === lastMove);\r\n      \r\n      direction = directions[Math.floor(Math.random() * directions.length)];\r\n      lastMove = move;\r\n      \r\n      currentQueue.push({ move, direction });\r\n    }\r\n    \r\n    console.log('Generated scramble queue:', currentQueue);\r\n    setAnimationQueue(currentQueue);\r\n    executeScramble(currentQueue);\r\n  }, [isAnimating, executeScramble]);\r\n\r\n  // Reset function\r\n  const reset = useCallback(() => {\r\n    if (isAnimating) return;\r\n    \r\n    setCubeState(() => {\r\n      const state = [];\r\n      for (let x = -1; x <= 1; x++) {\r\n        for (let y = -1; y <= 1; y++) {\r\n          for (let z = -1; z <= 1; z++) {\r\n            // Skip the center piece (0, 0, 0) - this is the core mechanism\r\n            if (x === 0 && y === 0 && z === 0) continue;\r\n            \r\n            const position = [x, y, z];\r\n            // Store original colors for each face based on solved state\r\n            // Each piece gets colors based on its position type (corner, edge, center)\r\n            const colors = {\r\n              front: 'black',\r\n              back: 'black', \r\n              right: 'black',\r\n              left: 'black',\r\n              top: 'black',\r\n              bottom: 'black'\r\n            };\r\n            \r\n            // Determine piece type and assign appropriate colors\r\n            const isCorner = (x !== 0 && y !== 0 && z !== 0);\r\n            const isEdge = ((x === 0 && y !== 0 && z !== 0) || \r\n                           (x !== 0 && y === 0 && z !== 0) || \r\n                           (x !== 0 && y !== 0 && z === 0));\r\n            const isCenter = ((x === 0 && y === 0 && z !== 0) || \r\n                             (x === 0 && y !== 0 && z === 0) || \r\n                             (x !== 0 && y === 0 && z === 0));\r\n            \r\n            if (isCorner) {\r\n              // Corner pieces: 3 colors based on which faces they touch\r\n              if (z === 1) colors.front = 'white';\r\n              if (z === -1) colors.back = 'yellow';\r\n              if (x === 1) colors.right = 'red';\r\n              if (x === -1) colors.left = 'orange';\r\n              if (y === 1) colors.top = 'blue';\r\n              if (y === -1) colors.bottom = 'green';\r\n            } else if (isEdge) {\r\n              // Edge pieces: 2 colors based on which faces they touch\r\n              if (z === 1) colors.front = 'white';\r\n              if (z === -1) colors.back = 'yellow';\r\n              if (x === 1) colors.right = 'red';\r\n              if (x === -1) colors.left = 'orange';\r\n              if (y === 1) colors.top = 'blue';\r\n              if (y === -1) colors.bottom = 'green';\r\n            } else if (isCenter) {\r\n              // Center pieces: 1 specific color each\r\n              if (z === 1) colors.front = 'white';\r\n              if (z === -1) colors.back = 'yellow';\r\n              if (x === 1) colors.right = 'red';\r\n              if (x === -1) colors.left = 'orange';\r\n              if (y === 1) colors.top = 'blue';\r\n              if (y === -1) colors.bottom = 'green';\r\n            }\r\n            state.push({ position: [...position], colors });\r\n          }\r\n        }\r\n      }\r\n      return state;\r\n    });\r\n  }, [isAnimating]);\r\n\r\n  return {\r\n    cubeState,\r\n    isAnimating,\r\n    rotateFace,\r\n    scramble,\r\n    reset\r\n  };\r\n}\r\n\r\n// Main cube group component with enhanced structure\r\nfunction CubeGroup({ isRotating, autoRotate = false, onScramble, onReset }) {\r\n  const groupRef = useRef();\r\n  const [rotationSpeed] = useState({ x: 0.005, y: 0.01 });\r\n  \r\n  const { cubeState, isAnimating, rotateFace, scramble, reset } = useCubeState();\r\n  \r\n  // Expose functions to parent\r\n  React.useEffect(() => {\r\n    if (onScramble) onScramble(scramble);\r\n    if (onReset) onReset(reset);\r\n  }, [onScramble, onReset, scramble, reset]);\r\n  \r\n  useFrame((state) => {\r\n    if (autoRotate && groupRef.current && !isAnimating) {\r\n      groupRef.current.rotation.y += rotationSpeed.y;\r\n      groupRef.current.rotation.x += rotationSpeed.x;\r\n    }\r\n  });\r\n\r\n        return (\r\n          <group ref={groupRef}>\r\n            {cubeState.map((piece, index) => (\r\n              <CubePiece\r\n                key={index}\r\n                position={piece.position}\r\n                colors={piece.colors}\r\n                pieceId={index}\r\n              />\r\n            ))}\r\n          </group>\r\n        );\r\n}\r\n\r\n// Main Rubik's Cube component\r\nfunction RubiksCube({ isRotating, autoRotate = false, onScramble, onReset }) {\r\n  return (\r\n    <Canvas\r\n      camera={{ position: [6, 6, 6], fov: 60 }}\r\n      style={{ width: '100%', height: '100%' }}\r\n      gl={{ antialias: true, alpha: true }}\r\n    >\r\n      {/* Enhanced Lighting */}\r\n      <ambientLight intensity={1.2} />\r\n      <directionalLight \r\n        position={[10, 10, 5]} \r\n        intensity={3.0}\r\n        castShadow\r\n        shadow-mapSize-width={2048}\r\n        shadow-mapSize-height={2048}\r\n      />\r\n      <pointLight position={[-10, -10, -5]} intensity={2.0} />\r\n      <pointLight position={[10, -10, 5]} intensity={2.0} />\r\n      <pointLight position={[0, 0, 10]} intensity={1.5} />\r\n      <spotLight\r\n        position={[0, 10, 0]}\r\n        angle={0.5}\r\n        penumbra={0.5}\r\n        intensity={2.0}\r\n        castShadow\r\n      />\r\n      \r\n      {/* Environment */}\r\n      <Environment preset=\"city\" />\r\n      \r\n      {/* Cube */}\r\n      <CubeGroup \r\n        isRotating={isRotating} \r\n        autoRotate={autoRotate}\r\n        onScramble={onScramble}\r\n        onReset={onReset}\r\n      />\r\n      \r\n      {/* Controls */}\r\n      <OrbitControls \r\n        enablePan={true}\r\n        enableZoom={true}\r\n        enableRotate={true}\r\n        autoRotate={false}\r\n        autoRotateSpeed={1}\r\n        minDistance={3}\r\n        maxDistance={15}\r\n        dampingFactor={0.05}\r\n        enableDamping={true}\r\n      />\r\n    </Canvas>\r\n  );\r\n}\r\n\r\nexport default RubiksCube;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}