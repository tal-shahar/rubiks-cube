{"ast":null,"code":"var _jsxFileName = \"C:\\\\Repo\\\\GitHub\\\\rubiks-cube\\\\src\\\\components\\\\RubiksCube.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$(),\n  _s3 = $RefreshSig$(),\n  _s4 = $RefreshSig$();\nimport React, { useState, useRef, useMemo, useCallback, useEffect } from 'react';\nimport { Canvas, useFrame } from '@react-three/fiber';\nimport { OrbitControls, Environment } from '@react-three/drei';\nimport * as THREE from 'three';\n\n// Function to create unique shapes for each piece\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction createShape(pieceId, size) {\n  const shapes = [\n  // 0-4: Basic geometric shapes (Squares)\n  () => /*#__PURE__*/_jsxDEV(\"mesh\", {\n    position: [0, 0, 0.012],\n    children: [/*#__PURE__*/_jsxDEV(\"planeGeometry\", {\n      args: [size, size]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 42\n    }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n      color: \"red\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 79\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 10,\n    columnNumber: 11\n  }, this),\n  // Square\n  () => /*#__PURE__*/_jsxDEV(\"mesh\", {\n    position: [0, 0, 0.012],\n    children: [/*#__PURE__*/_jsxDEV(\"planeGeometry\", {\n      args: [size, size]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 42\n    }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n      color: \"blue\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 79\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 11,\n    columnNumber: 11\n  }, this),\n  // Square\n  () => /*#__PURE__*/_jsxDEV(\"mesh\", {\n    position: [0, 0, 0.012],\n    children: [/*#__PURE__*/_jsxDEV(\"planeGeometry\", {\n      args: [size, size]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 42\n    }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n      color: \"green\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 79\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 12,\n    columnNumber: 11\n  }, this),\n  // Square\n  () => /*#__PURE__*/_jsxDEV(\"mesh\", {\n    position: [0, 0, 0.012],\n    children: [/*#__PURE__*/_jsxDEV(\"planeGeometry\", {\n      args: [size, size]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 42\n    }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n      color: \"orange\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 79\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 13,\n    columnNumber: 11\n  }, this),\n  // Square\n  () => /*#__PURE__*/_jsxDEV(\"mesh\", {\n    position: [0, 0, 0.012],\n    children: [/*#__PURE__*/_jsxDEV(\"planeGeometry\", {\n      args: [size, size]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 42\n    }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n      color: \"purple\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 79\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 14,\n    columnNumber: 11\n  }, this),\n  // Square\n\n  // 5-9: Circles\n  () => /*#__PURE__*/_jsxDEV(\"mesh\", {\n    position: [0, 0, 0.012],\n    children: [/*#__PURE__*/_jsxDEV(\"circleGeometry\", {\n      args: [size / 2, 32]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 42\n    }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n      color: \"red\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 80\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 17,\n    columnNumber: 11\n  }, this),\n  // Circle\n  () => /*#__PURE__*/_jsxDEV(\"mesh\", {\n    position: [0, 0, 0.012],\n    children: [/*#__PURE__*/_jsxDEV(\"circleGeometry\", {\n      args: [size / 2, 32]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 42\n    }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n      color: \"blue\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 80\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 18,\n    columnNumber: 11\n  }, this),\n  // Circle\n  () => /*#__PURE__*/_jsxDEV(\"mesh\", {\n    position: [0, 0, 0.012],\n    children: [/*#__PURE__*/_jsxDEV(\"circleGeometry\", {\n      args: [size / 2, 32]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 42\n    }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n      color: \"green\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 80\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 19,\n    columnNumber: 11\n  }, this),\n  // Circle\n  () => /*#__PURE__*/_jsxDEV(\"mesh\", {\n    position: [0, 0, 0.012],\n    children: [/*#__PURE__*/_jsxDEV(\"circleGeometry\", {\n      args: [size / 2, 32]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 42\n    }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n      color: \"orange\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 80\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 20,\n    columnNumber: 11\n  }, this),\n  // Circle\n  () => /*#__PURE__*/_jsxDEV(\"mesh\", {\n    position: [0, 0, 0.012],\n    children: [/*#__PURE__*/_jsxDEV(\"circleGeometry\", {\n      args: [size / 2, 32]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 42\n    }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n      color: \"purple\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 80\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 21,\n    columnNumber: 11\n  }, this),\n  // Circle\n\n  // 10-14: Triangles (using planeGeometry for now, ideally custom geometry)\n  () => /*#__PURE__*/_jsxDEV(\"mesh\", {\n    position: [0, 0, 0.012],\n    children: [/*#__PURE__*/_jsxDEV(\"planeGeometry\", {\n      args: [size, size]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 42\n    }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n      color: \"red\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 79\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 11\n  }, this),\n  // Triangle\n  () => /*#__PURE__*/_jsxDEV(\"mesh\", {\n    position: [0, 0, 0.012],\n    children: [/*#__PURE__*/_jsxDEV(\"planeGeometry\", {\n      args: [size, size]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 42\n    }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n      color: \"blue\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 79\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 11\n  }, this),\n  // Triangle\n  () => /*#__PURE__*/_jsxDEV(\"mesh\", {\n    position: [0, 0, 0.012],\n    children: [/*#__PURE__*/_jsxDEV(\"planeGeometry\", {\n      args: [size, size]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 42\n    }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n      color: \"green\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 79\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 11\n  }, this),\n  // Triangle\n  () => /*#__PURE__*/_jsxDEV(\"mesh\", {\n    position: [0, 0, 0.012],\n    children: [/*#__PURE__*/_jsxDEV(\"planeGeometry\", {\n      args: [size, size]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 42\n    }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n      color: \"orange\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 79\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 11\n  }, this),\n  // Triangle\n  () => /*#__PURE__*/_jsxDEV(\"mesh\", {\n    position: [0, 0, 0.012],\n    children: [/*#__PURE__*/_jsxDEV(\"planeGeometry\", {\n      args: [size, size]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 42\n    }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n      color: \"purple\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 79\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 11\n  }, this),\n  // Triangle\n\n  // 15-19: Diamonds (rotated squares)\n  () => /*#__PURE__*/_jsxDEV(\"group\", {\n    position: [0, 0, 0.012],\n    children: /*#__PURE__*/_jsxDEV(\"mesh\", {\n      rotation: [0, 0, Math.PI / 4],\n      children: [/*#__PURE__*/_jsxDEV(\"planeGeometry\", {\n        args: [size, size]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 78\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: \"red\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 115\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 43\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 11\n  }, this),\n  // Diamond\n  () => /*#__PURE__*/_jsxDEV(\"group\", {\n    position: [0, 0, 0.012],\n    children: /*#__PURE__*/_jsxDEV(\"mesh\", {\n      rotation: [0, 0, Math.PI / 4],\n      children: [/*#__PURE__*/_jsxDEV(\"planeGeometry\", {\n        args: [size, size]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 78\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: \"blue\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 115\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 43\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 11\n  }, this),\n  // Diamond\n  () => /*#__PURE__*/_jsxDEV(\"group\", {\n    position: [0, 0, 0.012],\n    children: /*#__PURE__*/_jsxDEV(\"mesh\", {\n      rotation: [0, 0, Math.PI / 4],\n      children: [/*#__PURE__*/_jsxDEV(\"planeGeometry\", {\n        args: [size, size]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 78\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: \"green\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 115\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 43\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 11\n  }, this),\n  // Diamond\n  () => /*#__PURE__*/_jsxDEV(\"group\", {\n    position: [0, 0, 0.012],\n    children: /*#__PURE__*/_jsxDEV(\"mesh\", {\n      rotation: [0, 0, Math.PI / 4],\n      children: [/*#__PURE__*/_jsxDEV(\"planeGeometry\", {\n        args: [size, size]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 78\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: \"orange\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 115\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 43\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 11\n  }, this),\n  // Diamond\n  () => /*#__PURE__*/_jsxDEV(\"group\", {\n    position: [0, 0, 0.012],\n    children: /*#__PURE__*/_jsxDEV(\"mesh\", {\n      rotation: [0, 0, Math.PI / 4],\n      children: [/*#__PURE__*/_jsxDEV(\"planeGeometry\", {\n        args: [size, size]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 78\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: \"purple\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 115\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 43\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 11\n  }, this),\n  // Diamond\n\n  // 20-25: Complex patterns (Squares with white centers)\n  () => /*#__PURE__*/_jsxDEV(\"group\", {\n    position: [0, 0, 0.012],\n    children: [/*#__PURE__*/_jsxDEV(\"mesh\", {\n      children: [/*#__PURE__*/_jsxDEV(\"planeGeometry\", {\n        args: [size, size]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 49\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: \"red\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 86\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 43\n    }, this), /*#__PURE__*/_jsxDEV(\"mesh\", {\n      position: [0, 0, 0.001],\n      children: [/*#__PURE__*/_jsxDEV(\"planeGeometry\", {\n        args: [size * 0.5, size * 0.5]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 157\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: \"white\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 202\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 126\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 11\n  }, this),\n  // Square with white center\n  () => /*#__PURE__*/_jsxDEV(\"group\", {\n    position: [0, 0, 0.012],\n    children: [/*#__PURE__*/_jsxDEV(\"mesh\", {\n      children: [/*#__PURE__*/_jsxDEV(\"planeGeometry\", {\n        args: [size, size]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 49\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: \"blue\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 86\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 43\n    }, this), /*#__PURE__*/_jsxDEV(\"mesh\", {\n      position: [0, 0, 0.001],\n      children: [/*#__PURE__*/_jsxDEV(\"planeGeometry\", {\n        args: [size * 0.5, size * 0.5]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 158\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: \"white\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 203\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 127\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 11\n  }, this),\n  // Square with white center\n  () => /*#__PURE__*/_jsxDEV(\"group\", {\n    position: [0, 0, 0.012],\n    children: [/*#__PURE__*/_jsxDEV(\"mesh\", {\n      children: [/*#__PURE__*/_jsxDEV(\"planeGeometry\", {\n        args: [size, size]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 49\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: \"green\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 86\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 43\n    }, this), /*#__PURE__*/_jsxDEV(\"mesh\", {\n      position: [0, 0, 0.001],\n      children: [/*#__PURE__*/_jsxDEV(\"planeGeometry\", {\n        args: [size * 0.5, size * 0.5]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 159\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: \"white\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 204\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 128\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 11\n  }, this),\n  // Square with white center\n  () => /*#__PURE__*/_jsxDEV(\"group\", {\n    position: [0, 0, 0.012],\n    children: [/*#__PURE__*/_jsxDEV(\"mesh\", {\n      children: [/*#__PURE__*/_jsxDEV(\"planeGeometry\", {\n        args: [size, size]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 49\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: \"orange\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 86\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 43\n    }, this), /*#__PURE__*/_jsxDEV(\"mesh\", {\n      position: [0, 0, 0.001],\n      children: [/*#__PURE__*/_jsxDEV(\"planeGeometry\", {\n        args: [size * 0.5, size * 0.5]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 160\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: \"white\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 205\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 129\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 11\n  }, this),\n  // Square with white center\n  () => /*#__PURE__*/_jsxDEV(\"group\", {\n    position: [0, 0, 0.012],\n    children: [/*#__PURE__*/_jsxDEV(\"mesh\", {\n      children: [/*#__PURE__*/_jsxDEV(\"planeGeometry\", {\n        args: [size, size]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 49\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: \"purple\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 86\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 43\n    }, this), /*#__PURE__*/_jsxDEV(\"mesh\", {\n      position: [0, 0, 0.001],\n      children: [/*#__PURE__*/_jsxDEV(\"planeGeometry\", {\n        args: [size * 0.5, size * 0.5]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 160\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: \"white\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 205\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 129\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 11\n  }, this),\n  // Square with white center\n  () => /*#__PURE__*/_jsxDEV(\"group\", {\n    position: [0, 0, 0.012],\n    children: [/*#__PURE__*/_jsxDEV(\"mesh\", {\n      children: [/*#__PURE__*/_jsxDEV(\"planeGeometry\", {\n        args: [size, size]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 49\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: \"cyan\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 86\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 43\n    }, this), /*#__PURE__*/_jsxDEV(\"mesh\", {\n      position: [0, 0, 0.001],\n      children: [/*#__PURE__*/_jsxDEV(\"planeGeometry\", {\n        args: [size * 0.5, size * 0.5]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 158\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: \"white\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 203\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 127\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 11\n  }, this) // Square with white center\n  ];\n  const shapeIndex = pieceId; // Changed from pieceId % shapes.length\n  return shapes[shapeIndex]();\n}\n\n// Individual cube piece component\nfunction CubePiece({\n  position,\n  colors,\n  size = 0.95,\n  pieceId = 0\n}) {\n  _s();\n  const meshRef = useRef();\n\n  // Log piece information for debugging\n  React.useEffect(() => {\n    const shapeTypes = ['Square', 'Square', 'Square', 'Square', 'Square', 'Circle', 'Circle', 'Circle', 'Circle', 'Circle', 'Triangle', 'Triangle', 'Triangle', 'Triangle', 'Triangle', 'Diamond', 'Diamond', 'Diamond', 'Diamond', 'Diamond', 'Square+White', 'Square+White', 'Square+White', 'Square+White', 'Square+White', 'Square+White'];\n    const shapeColors = ['Red', 'Blue', 'Green', 'Orange', 'Purple', 'Red', 'Blue', 'Green', 'Orange', 'Purple', 'Red', 'Blue', 'Green', 'Orange', 'Purple', 'Red', 'Blue', 'Green', 'Orange', 'Purple', 'Red', 'Blue', 'Green', 'Orange', 'Purple', 'Cyan'];\n    const shapeType = shapeTypes[pieceId] || 'Unknown'; // Changed from pieceId % shapeTypes.length\n    const shapeColor = shapeColors[pieceId] || 'Unknown'; // Changed from pieceId % shapeColors.length\n\n    // Debug all pieces to see initial color assignment\n    console.log(`Piece ${pieceId}: ${shapeColor} ${shapeType} at position [${position.join(', ')}]`);\n    console.log(`  Stored Colors:`, colors);\n\n    // Show what colors should be visible based on position\n    const [x, y, z] = position;\n    const visibleFaces = [];\n    if (x === 1) visibleFaces.push('right');\n    if (x === -1) visibleFaces.push('left');\n    if (y === 1) visibleFaces.push('top');\n    if (y === -1) visibleFaces.push('bottom');\n    if (z === 1) visibleFaces.push('front');\n    if (z === -1) visibleFaces.push('back');\n    console.log(`  Visible faces:`, visibleFaces);\n    console.log(`  Colors on visible faces:`, visibleFaces.map(face => `${face}: ${colors[face]}`));\n  }, [pieceId, position, colors]);\n\n  // Color mapping\n  const colorMap = {\n    'white': '#FFFFFF',\n    'yellow': '#FFD700',\n    'red': '#FF0000',\n    'orange': '#FFA500',\n    'blue': '#0000FF',\n    'green': '#00FF00',\n    'black': '#000000'\n  };\n\n  // Create cube geometry\n  const cubeGeometry = useMemo(() => new THREE.BoxGeometry(size, size, size), [size]);\n\n  // Create face geometry\n  const faceGeometry = useMemo(() => {\n    const geometry = new THREE.PlaneGeometry(size, size);\n    return geometry;\n  }, [size]);\n\n  // Get the color for a face based on the face index and position\n  const getFaceColor = faceIndex => {\n    const [x, y, z] = position;\n\n    // Determine which faces are visible based on position\n    const visibleFaces = [];\n    if (x === 1) visibleFaces.push(2); // Right face visible\n    if (x === -1) visibleFaces.push(3); // Left face visible\n    if (y === 1) visibleFaces.push(4); // Top face visible\n    if (y === -1) visibleFaces.push(5); // Bottom face visible\n    if (z === 1) visibleFaces.push(0); // Front face visible\n    if (z === -1) visibleFaces.push(1); // Back face visible\n\n    // If this face is not visible, return black\n    if (!visibleFaces.includes(faceIndex)) {\n      return 'black';\n    }\n\n    // Map face index to color property\n    let faceColor;\n    switch (faceIndex) {\n      case 0:\n        faceColor = colors.front;\n        break;\n      // Front face\n      case 1:\n        faceColor = colors.back;\n        break;\n      // Back face\n      case 2:\n        faceColor = colors.right;\n        break;\n      // Right face\n      case 3:\n        faceColor = colors.left;\n        break;\n      // Left face\n      case 4:\n        faceColor = colors.top;\n        break;\n      // Top face\n      case 5:\n        faceColor = colors.bottom;\n        break;\n      // Bottom face\n      default:\n        faceColor = 'black';\n    }\n    return faceColor;\n  };\n  return /*#__PURE__*/_jsxDEV(\"group\", {\n    position: position,\n    children: [/*#__PURE__*/_jsxDEV(\"mesh\", {\n      geometry: cubeGeometry,\n      children: /*#__PURE__*/_jsxDEV(\"meshPhongMaterial\", {\n        color: \"#333333\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 7\n    }, this), [0, 1, 2, 3, 4, 5].map(faceIndex => {\n      const faceColor = getFaceColor(faceIndex);\n      const facePosition = [faceIndex === 2 ? size / 2 + 0.001 : faceIndex === 3 ? -size / 2 - 0.001 : 0, faceIndex === 4 ? size / 2 + 0.001 : faceIndex === 5 ? -size / 2 - 0.001 : 0, faceIndex === 0 ? size / 2 + 0.001 : faceIndex === 1 ? -size / 2 - 0.001 : 0];\n      const faceRotation = [faceIndex === 4 ? Math.PI / 2 : faceIndex === 5 ? -Math.PI / 2 : 0, faceIndex === 2 ? Math.PI / 2 : faceIndex === 3 ? -Math.PI / 2 : 0, 0];\n      return /*#__PURE__*/_jsxDEV(\"mesh\", {\n        position: facePosition,\n        rotation: faceRotation,\n        geometry: faceGeometry,\n        children: /*#__PURE__*/_jsxDEV(\"meshPhongMaterial\", {\n          color: colorMap[faceColor] || '#000000',\n          side: THREE.FrontSide,\n          emissive: colorMap[faceColor] || '#000000',\n          emissiveIntensity: 0.3\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 162,\n          columnNumber: 13\n        }, this)\n      }, faceIndex, false, {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 11\n      }, this);\n    }), [0, 1, 2, 3, 4, 5].map(faceIndex => {\n      const facePosition = [faceIndex === 2 ? size / 2 + 0.002 : faceIndex === 3 ? -size / 2 - 0.002 : 0, faceIndex === 4 ? size / 2 + 0.002 : faceIndex === 5 ? -size / 2 - 0.002 : 0, faceIndex === 0 ? size / 2 + 0.002 : faceIndex === 1 ? -size / 2 - 0.002 : 0];\n      const faceRotation = [faceIndex === 4 ? Math.PI / 2 : faceIndex === 5 ? -Math.PI / 2 : 0, faceIndex === 2 ? Math.PI / 2 : faceIndex === 3 ? -Math.PI / 2 : 0, 0];\n      return /*#__PURE__*/_jsxDEV(\"group\", {\n        position: facePosition,\n        rotation: faceRotation,\n        children: createShape(pieceId, size * 0.3)\n      }, `shape-${faceIndex}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 11\n      }, this);\n    })]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 134,\n    columnNumber: 5\n  }, this);\n}\n\n// Custom hook for cube state management\n_s(CubePiece, \"bKf4jm4WUTjktSFU7AKQ4whFGII=\");\n_c = CubePiece;\nfunction useCubeState() {\n  _s2();\n  const [cubeState, setCubeState] = useState(() => {\n    const state = [];\n\n    // Create 26 pieces (3x3x3 minus center)\n    for (let x = -1; x <= 1; x++) {\n      for (let y = -1; y <= 1; y++) {\n        for (let z = -1; z <= 1; z++) {\n          // Skip the center piece\n          if (x === 0 && y === 0 && z === 0) continue;\n\n          // Determine piece type and assign colors accordingly\n          let colors = {\n            front: 'black',\n            back: 'black',\n            right: 'black',\n            left: 'black',\n            top: 'black',\n            bottom: 'black'\n          };\n\n          // Assign colors based on piece position in solved state\n          // Only assign colors to faces that are visible (not internal)\n          if (x === -1) colors.left = 'orange';\n          if (x === 1) colors.right = 'red';\n          if (y === -1) colors.bottom = 'green';\n          if (y === 1) colors.top = 'blue';\n          if (z === -1) colors.back = 'yellow';\n          if (z === 1) colors.front = 'white';\n          state.push({\n            position: [x, y, z],\n            colors,\n            rotationHistory: [] // Track all rotations this piece has undergone\n          });\n        }\n      }\n    }\n    return state;\n  });\n  const [isAnimating, setIsAnimating] = useState(false);\n\n  // Rotate a face of the cube\n  const rotateFace = useCallback((face, direction) => {\n    if (isAnimating) return;\n    setIsAnimating(true);\n    setCubeState(prevState => {\n      const newState = [...prevState];\n      const pieces = newState.map((piece, index) => ({\n        ...piece,\n        pieceId: index\n      }));\n\n      // Apply rotation to pieces on the specified face\n      pieces.forEach(piece => {\n        const [x, y, z] = piece.position;\n        let newX = x,\n          newY = y,\n          newZ = z;\n        let newColors = {\n          ...piece.colors\n        }; // Keep original colors for comparison\n\n        // Debug purple diamond piece 19 and green diamond piece 17\n        if (piece.pieceId === 19 || piece.pieceId === 17) {\n          console.log(`🔄 BEFORE ${face} rotation - Piece ${piece.pieceId} at [${x}, ${y}, ${z}]:`, newColors);\n        }\n\n        // Store original position for color mapping\n        const oldPosition = [x, y, z];\n\n        // Apply 3D transformation first\n        switch (face) {\n          case 'F':\n            // Front face rotation\n            if (z === 1) {\n              // Only pieces on the front face\n              if (direction === 'clockwise') {\n                newX = -y;\n                newY = x;\n                // 3D color rotation: when piece rotates around Z-axis clockwise\n                // Colors rotate in the XY plane: top->right, right->bottom, bottom->left, left->top\n                const temp = newColors.top;\n                newColors.top = newColors.left;\n                newColors.left = newColors.bottom;\n                newColors.bottom = newColors.right;\n                newColors.right = temp;\n              } else {\n                newX = y;\n                newY = -x;\n                // 3D color rotation: when piece rotates around Z-axis counterclockwise\n                // Colors rotate in the XY plane: top->left, left->bottom, bottom->right, right->top\n                const temp = newColors.top;\n                newColors.top = newColors.right;\n                newColors.right = newColors.bottom;\n                newColors.bottom = newColors.left;\n                newColors.left = temp;\n              }\n            }\n            break;\n          case 'B':\n            // Back face rotation\n            if (z === -1) {\n              // Only pieces on the back face\n              if (direction === 'clockwise') {\n                newX = y;\n                newY = -x;\n                // 3D color rotation: when piece rotates around Z-axis clockwise (back face)\n                // Colors rotate in the XY plane: top->right, right->bottom, bottom->left, left->top\n                const temp = newColors.top;\n                newColors.top = newColors.left;\n                newColors.left = newColors.bottom;\n                newColors.bottom = newColors.right;\n                newColors.right = temp;\n              } else {\n                newX = -y;\n                newY = x;\n                // 3D color rotation: when piece rotates around Z-axis counterclockwise (back face)\n                // Colors rotate in the XY plane: top->left, left->bottom, bottom->right, right->top\n                const temp = newColors.top;\n                newColors.top = newColors.right;\n                newColors.right = newColors.bottom;\n                newColors.bottom = newColors.left;\n                newColors.left = temp;\n              }\n            }\n            break;\n          case 'R':\n            // Right face rotation\n            if (x === 1) {\n              // Only pieces on the right face\n              if (direction === 'clockwise') {\n                newZ = -y;\n                newY = z;\n                // 3D color rotation: when piece rotates around X-axis clockwise\n                // Colors rotate in the YZ plane: top->front, front->bottom, bottom->back, back->top\n                const temp = newColors.top;\n                newColors.top = newColors.back;\n                newColors.back = newColors.bottom;\n                newColors.bottom = newColors.front;\n                newColors.front = temp;\n              } else {\n                newZ = y;\n                newY = -z;\n                // 3D color rotation: when piece rotates around X-axis counterclockwise\n                // Colors rotate in the YZ plane: top->back, back->bottom, bottom->front, front->top\n                const temp = newColors.top;\n                newColors.top = newColors.front;\n                newColors.front = newColors.bottom;\n                newColors.bottom = newColors.back;\n                newColors.back = temp;\n              }\n            }\n            break;\n          case 'L':\n            // Left face rotation\n            if (x === -1) {\n              // Only pieces on the left face\n              if (direction === 'clockwise') {\n                newZ = y;\n                newY = -z;\n                // 3D color rotation: when piece rotates around X-axis clockwise (left face)\n                // Colors rotate in the YZ plane: top->back, back->bottom, bottom->front, front->top\n                const temp = newColors.top;\n                newColors.top = newColors.front;\n                newColors.front = newColors.bottom;\n                newColors.bottom = newColors.back;\n                newColors.back = temp;\n              } else {\n                newZ = -y;\n                newY = z;\n                // 3D color rotation: when piece rotates around X-axis counterclockwise (left face)\n                // Colors rotate in the YZ plane: top->front, front->bottom, bottom->back, back->top\n                const temp = newColors.top;\n                newColors.top = newColors.back;\n                newColors.back = newColors.bottom;\n                newColors.bottom = newColors.front;\n                newColors.front = temp;\n              }\n            }\n            break;\n          case 'U':\n            // Up face rotation\n            if (y === 1) {\n              // Only pieces on the top face\n              if (direction === 'clockwise') {\n                newX = z;\n                newZ = -x;\n                // 3D color rotation: when piece rotates around Y-axis clockwise\n                // Colors rotate in the XZ plane: front->right, right->back, back->left, left->front\n                const temp = newColors.front;\n                newColors.front = newColors.left;\n                newColors.left = newColors.back;\n                newColors.back = newColors.right;\n                newColors.right = temp;\n              } else {\n                newX = -z;\n                newZ = x;\n                // 3D color rotation: when piece rotates around Y-axis counterclockwise\n                // Colors rotate in the XZ plane: front->left, left->back, back->right, right->front\n                const temp = newColors.front;\n                newColors.front = newColors.right;\n                newColors.right = newColors.back;\n                newColors.back = newColors.left;\n                newColors.left = temp;\n              }\n            }\n            break;\n          case 'D':\n            // Down face rotation\n            if (y === -1) {\n              // Only pieces on the bottom face\n              if (direction === 'clockwise') {\n                newX = -z;\n                newZ = x;\n                // 3D color rotation: when piece rotates around Y-axis clockwise (down face)\n                // Colors rotate in the XZ plane: front->left, left->back, back->right, right->front\n                const temp = newColors.front;\n                newColors.front = newColors.right;\n                newColors.right = newColors.back;\n                newColors.back = newColors.left;\n                newColors.left = temp;\n              } else {\n                newX = z;\n                newZ = -x;\n                // 3D color rotation: when piece rotates around Y-axis counterclockwise (down face)\n                // Colors rotate in the XZ plane: front->right, right->back, back->left, left->front\n                const temp = newColors.front;\n                newColors.front = newColors.left;\n                newColors.left = newColors.back;\n                newColors.back = newColors.right;\n                newColors.right = temp;\n              }\n            }\n            break;\n        }\n\n        // Only apply color rotation if the piece actually moved\n        const positionChanged = x !== newX || y !== newY || z !== newZ;\n\n        // Debug purple diamond piece 19 and green diamond piece 17\n        if (piece.pieceId === 19 || piece.pieceId === 17) {\n          console.log(`🔄 AFTER ${face} rotation - Piece ${piece.pieceId} at [${newX}, ${newY}, ${newZ}]:`, newColors);\n          console.log(`  Position changed: ${positionChanged}`);\n        }\n        piece.position = [newX, newY, newZ];\n\n        // Only apply color rotation if the piece actually moved\n        if (positionChanged) {\n          // Apply the color rotation that was calculated in the switch statement\n          piece.colors = newColors;\n          piece.rotationHistory.push({\n            move: face,\n            direction: direction,\n            fromPosition: [x, y, z],\n            toPosition: [newX, newY, newZ],\n            timestamp: new Date().toISOString()\n          });\n        }\n      });\n      return newState;\n    });\n\n    // Reset animation state after a short delay\n    setTimeout(() => setIsAnimating(false), 100);\n  }, [isAnimating]);\n\n  // Scramble the cube\n  const scramble = useCallback(() => {\n    if (isAnimating) return;\n    setIsAnimating(true);\n    const moves = ['F', 'B', 'R', 'L', 'U', 'D'];\n    const directions = ['clockwise', 'counterclockwise'];\n    const scrambleSequence = [];\n\n    // Generate 20 random moves\n    for (let i = 0; i < 20; i++) {\n      const move = moves[Math.floor(Math.random() * moves.length)];\n      const direction = directions[Math.floor(Math.random() * directions.length)];\n      scrambleSequence.push({\n        move,\n        direction\n      });\n    }\n    console.log('Scrambling with sequence:', scrambleSequence);\n\n    // Execute scramble moves\n    executeScramble(scrambleSequence);\n  }, [isAnimating]);\n\n  // Execute scramble sequence\n  const executeScramble = useCallback(sequence => {\n    if (sequence.length === 0) {\n      setIsAnimating(false);\n      return;\n    }\n    const {\n      move,\n      direction\n    } = sequence[0];\n    console.log(`Executing move: ${move} ${direction}`);\n\n    // Apply the move\n    setCubeState(prevState => {\n      const newState = [...prevState];\n      const pieces = newState.map((piece, index) => ({\n        ...piece,\n        pieceId: index\n      }));\n\n      // Apply rotation to pieces on the specified face\n      pieces.forEach(piece => {\n        const [x, y, z] = piece.position;\n        let newX = x,\n          newY = y,\n          newZ = z;\n        let newColors = {\n          ...piece.colors\n        }; // Keep original colors for comparison\n\n        // Debug purple diamond piece 19 and green diamond piece 17 in executeScramble\n        if (piece.pieceId === 19 || piece.pieceId === 17) {\n          console.log(`🎲 BEFORE ${move} move - Piece ${piece.pieceId}:`, newColors);\n        }\n        switch (move) {\n          case 'F':\n            // Front face rotation\n            if (z === 1) {\n              // Only pieces on the front face\n              if (direction === 'clockwise') {\n                newX = -y;\n                newY = x;\n                // 3D color rotation: when piece rotates around Z-axis clockwise\n                // Colors rotate in the XY plane: top->right, right->bottom, bottom->left, left->top\n                const temp = newColors.top;\n                newColors.top = newColors.left;\n                newColors.left = newColors.bottom;\n                newColors.bottom = newColors.right;\n                newColors.right = temp;\n              } else {\n                newX = y;\n                newY = -x;\n                // 3D color rotation: when piece rotates around Z-axis counterclockwise\n                // Colors rotate in the XY plane: top->left, left->bottom, bottom->right, right->top\n                const temp = newColors.top;\n                newColors.top = newColors.right;\n                newColors.right = newColors.bottom;\n                newColors.bottom = newColors.left;\n                newColors.left = temp;\n              }\n            }\n            break;\n          case 'B':\n            // Back face rotation\n            if (z === -1) {\n              // Only pieces on the back face\n              if (direction === 'clockwise') {\n                newX = y;\n                newY = -x;\n                // 3D color rotation: when piece rotates around Z-axis clockwise (back face)\n                // Colors rotate in the XY plane: top->right, right->bottom, bottom->left, left->top\n                const temp = newColors.top;\n                newColors.top = newColors.left;\n                newColors.left = newColors.bottom;\n                newColors.bottom = newColors.right;\n                newColors.right = temp;\n              } else {\n                newX = -y;\n                newY = x;\n                // 3D color rotation: when piece rotates around Z-axis counterclockwise (back face)\n                // Colors rotate in the XY plane: top->left, left->bottom, bottom->right, right->top\n                const temp = newColors.top;\n                newColors.top = newColors.right;\n                newColors.right = newColors.bottom;\n                newColors.bottom = newColors.left;\n                newColors.left = temp;\n              }\n            }\n            break;\n          case 'R':\n            // Right face rotation\n            if (x === 1) {\n              // Only pieces on the right face\n              if (direction === 'clockwise') {\n                newZ = -y;\n                newY = z;\n                // 3D color rotation: when piece rotates around X-axis clockwise\n                // Colors rotate in the YZ plane: top->front, front->bottom, bottom->back, back->top\n                const temp = newColors.top;\n                newColors.top = newColors.back;\n                newColors.back = newColors.bottom;\n                newColors.bottom = newColors.front;\n                newColors.front = temp;\n              } else {\n                newZ = y;\n                newY = -z;\n                // 3D color rotation: when piece rotates around X-axis counterclockwise\n                // Colors rotate in the YZ plane: top->back, back->bottom, bottom->front, front->top\n                const temp = newColors.top;\n                newColors.top = newColors.front;\n                newColors.front = newColors.bottom;\n                newColors.bottom = newColors.back;\n                newColors.back = temp;\n              }\n            }\n            break;\n          case 'L':\n            // Left face rotation\n            if (x === -1) {\n              // Only pieces on the left face\n              if (direction === 'clockwise') {\n                newZ = y;\n                newY = -z;\n                // 3D color rotation: when piece rotates around X-axis clockwise (left face)\n                // Colors rotate in the YZ plane: top->back, back->bottom, bottom->front, front->top\n                const temp = newColors.top;\n                newColors.top = newColors.front;\n                newColors.front = newColors.bottom;\n                newColors.bottom = newColors.back;\n                newColors.back = temp;\n              } else {\n                newZ = -y;\n                newY = z;\n                // 3D color rotation: when piece rotates around X-axis counterclockwise (left face)\n                // Colors rotate in the YZ plane: top->front, front->bottom, bottom->back, back->top\n                const temp = newColors.top;\n                newColors.top = newColors.back;\n                newColors.back = newColors.bottom;\n                newColors.bottom = newColors.front;\n                newColors.front = temp;\n              }\n            }\n            break;\n          case 'U':\n            // Up face rotation\n            if (y === 1) {\n              // Only pieces on the top face\n              if (direction === 'clockwise') {\n                newX = z;\n                newZ = -x;\n                // 3D color rotation: when piece rotates around Y-axis clockwise\n                // Colors rotate in the XZ plane: front->right, right->back, back->left, left->front\n                const temp = newColors.front;\n                newColors.front = newColors.left;\n                newColors.left = newColors.back;\n                newColors.back = newColors.right;\n                newColors.right = temp;\n              } else {\n                newX = -z;\n                newZ = x;\n                // 3D color rotation: when piece rotates around Y-axis counterclockwise\n                // Colors rotate in the XZ plane: front->left, left->back, back->right, right->front\n                const temp = newColors.front;\n                newColors.front = newColors.right;\n                newColors.right = newColors.back;\n                newColors.back = newColors.left;\n                newColors.left = temp;\n              }\n            }\n            break;\n          case 'D':\n            // Down face rotation\n            if (y === -1) {\n              // Only pieces on the bottom face\n              if (direction === 'clockwise') {\n                newX = -z;\n                newZ = x;\n                // 3D color rotation: when piece rotates around Y-axis clockwise (down face)\n                // Colors rotate in the XZ plane: front->left, left->back, back->right, right->front\n                const temp = newColors.front;\n                newColors.front = newColors.right;\n                newColors.right = newColors.back;\n                newColors.back = newColors.left;\n                newColors.left = temp;\n              } else {\n                newX = z;\n                newZ = -x;\n                // 3D color rotation: when piece rotates around Y-axis counterclockwise (down face)\n                // Colors rotate in the XZ plane: front->right, right->back, back->left, left->front\n                const temp = newColors.front;\n                newColors.front = newColors.left;\n                newColors.left = newColors.back;\n                newColors.back = newColors.right;\n                newColors.right = temp;\n              }\n            }\n            break;\n        }\n\n        // Only apply color rotation if the piece actually moved\n        const positionChanged = x !== newX || y !== newY || z !== newZ;\n\n        // Debug purple diamond piece 19 and green diamond piece 17 in executeScramble\n        if (piece.pieceId === 19 || piece.pieceId === 17) {\n          console.log(`🎲 AFTER ${move} move - Piece ${piece.pieceId}:`, newColors);\n          console.log(`  Position changed: ${positionChanged}`);\n        }\n        piece.position = [newX, newY, newZ];\n\n        // Only apply color rotation if the piece actually moved\n        if (positionChanged) {\n          // Apply the color rotation that was calculated in the switch statement\n          piece.colors = newColors;\n          piece.rotationHistory.push({\n            move: move,\n            direction: direction,\n            fromPosition: [x, y, z],\n            toPosition: [newX, newY, newZ],\n            timestamp: new Date().toISOString()\n          });\n        }\n      });\n      return newState;\n    });\n\n    // Continue with next move after a short delay\n    setTimeout(() => executeScramble(sequence.slice(1)), 100);\n  }, []);\n\n  // Reset the cube to solved state\n  const reset = useCallback(() => {\n    setCubeState(() => {\n      const state = [];\n\n      // Create 26 pieces (3x3x3 minus center)\n      for (let x = -1; x <= 1; x++) {\n        for (let y = -1; y <= 1; y++) {\n          for (let z = -1; z <= 1; z++) {\n            // Skip the center piece\n            if (x === 0 && y === 0 && z === 0) continue;\n\n            // Determine piece type and assign colors accordingly\n            let colors = {\n              front: 'black',\n              back: 'black',\n              right: 'black',\n              left: 'black',\n              top: 'black',\n              bottom: 'black'\n            };\n\n            // Assign colors based on piece position in solved state\n            // Only assign colors to faces that are visible (not internal)\n            if (x === -1) colors.left = 'orange';\n            if (x === 1) colors.right = 'red';\n            if (y === -1) colors.bottom = 'green';\n            if (y === 1) colors.top = 'blue';\n            if (z === -1) colors.back = 'yellow';\n            if (z === 1) colors.front = 'white';\n            state.push({\n              position: [x, y, z],\n              colors,\n              rotationHistory: [] // Reset rotation history\n            });\n          }\n        }\n      }\n      return state;\n    });\n  }, []);\n  return {\n    cubeState,\n    isAnimating,\n    rotateFace,\n    scramble,\n    reset\n  };\n}\n\n// Main cube group component with enhanced structure\n_s2(useCubeState, \"EI1TKGBccnxI0czI8qzZw7sQDb4=\");\nfunction CubeGroup({\n  isRotating,\n  autoRotate = false,\n  onScramble,\n  onReset,\n  onCubeStateChange\n}) {\n  _s3();\n  const groupRef = useRef();\n  const [rotationSpeed] = useState({\n    x: 0.005,\n    y: 0.01\n  });\n  const {\n    cubeState,\n    isAnimating,\n    rotateFace,\n    scramble,\n    reset\n  } = useCubeState();\n\n  // Expose functions to parent\n  React.useEffect(() => {\n    if (onScramble) onScramble(scramble);\n    if (onReset) onReset(reset);\n  }, [onScramble, onReset, scramble, reset]);\n\n  // Notify parent of cube state changes\n  React.useEffect(() => {\n    if (onCubeStateChange && cubeState) {\n      onCubeStateChange(cubeState);\n    }\n  }, [onCubeStateChange, cubeState]);\n\n  // Auto-rotation animation\n  useFrame(() => {\n    if (groupRef.current && isRotating && !isAnimating) {\n      groupRef.current.rotation.x += rotationSpeed.x;\n      groupRef.current.rotation.y += rotationSpeed.y;\n    }\n  });\n  return /*#__PURE__*/_jsxDEV(\"group\", {\n    ref: groupRef,\n    children: cubeState.map((piece, index) => /*#__PURE__*/_jsxDEV(CubePiece, {\n      position: piece.position,\n      colors: piece.colors,\n      pieceId: index\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 769,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 767,\n    columnNumber: 5\n  }, this);\n}\n\n// Main Rubik's Cube component\n_s3(CubeGroup, \"2oHALDq6xB5terhhYED4Ni/ni6E=\", false, function () {\n  return [useCubeState, useFrame];\n});\n_c2 = CubeGroup;\nfunction RubiksCube({\n  isRotating,\n  autoRotate = false,\n  onScramble,\n  onReset,\n  onCubeStateChange\n}) {\n  _s4();\n  const groupRef = useRef();\n  const [rotationSpeed] = useState({\n    x: 0.005,\n    y: 0.01\n  });\n  const {\n    cubeState,\n    isAnimating,\n    rotateFace,\n    scramble,\n    reset\n  } = useCubeState();\n\n  // Expose functions to parent\n  React.useEffect(() => {\n    if (onScramble) onScramble(scramble);\n    if (onReset) onReset(reset);\n  }, [onScramble, onReset, scramble, reset]);\n\n  // Notify parent of cube state changes\n  React.useEffect(() => {\n    if (onCubeStateChange && cubeState) {\n      onCubeStateChange(cubeState);\n    }\n  }, [onCubeStateChange, cubeState]);\n  return /*#__PURE__*/_jsxDEV(Canvas, {\n    camera: {\n      position: [5, 5, 5],\n      fov: 50\n    },\n    style: {\n      width: '100%',\n      height: '100%'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"ambientLight\", {\n      intensity: 1.2\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 806,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"directionalLight\", {\n      position: [10, 10, 5],\n      intensity: 3.0\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 807,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"pointLight\", {\n      position: [10, 10, 10],\n      intensity: 2.0\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 808,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"pointLight\", {\n      position: [-10, -10, -10],\n      intensity: 2.0\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 809,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"spotLight\", {\n      position: [0, 10, 0],\n      angle: 0.3,\n      penumbra: 1,\n      intensity: 2.0,\n      castShadow: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 810,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Environment, {\n      preset: \"sunset\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 819,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CubeGroup, {\n      isRotating: isRotating,\n      autoRotate: autoRotate,\n      onScramble: onScramble,\n      onReset: onReset,\n      onCubeStateChange: onCubeStateChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 821,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(OrbitControls, {\n      enablePan: true,\n      enableZoom: true,\n      enableRotate: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 829,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 801,\n    columnNumber: 5\n  }, this);\n}\n_s4(RubiksCube, \"HcLxV/bLuK+tNQUAdGS2fDotHno=\", false, function () {\n  return [useCubeState];\n});\n_c3 = RubiksCube;\nexport default RubiksCube;\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"CubePiece\");\n$RefreshReg$(_c2, \"CubeGroup\");\n$RefreshReg$(_c3, \"RubiksCube\");","map":{"version":3,"names":["React","useState","useRef","useMemo","useCallback","useEffect","Canvas","useFrame","OrbitControls","Environment","THREE","jsxDEV","_jsxDEV","createShape","pieceId","size","shapes","position","children","args","fileName","_jsxFileName","lineNumber","columnNumber","color","rotation","Math","PI","shapeIndex","CubePiece","colors","_s","meshRef","shapeTypes","shapeColors","shapeType","shapeColor","console","log","join","x","y","z","visibleFaces","push","map","face","colorMap","cubeGeometry","BoxGeometry","faceGeometry","geometry","PlaneGeometry","getFaceColor","faceIndex","includes","faceColor","front","back","right","left","top","bottom","facePosition","faceRotation","side","FrontSide","emissive","emissiveIntensity","_c","useCubeState","_s2","cubeState","setCubeState","state","rotationHistory","isAnimating","setIsAnimating","rotateFace","direction","prevState","newState","pieces","piece","index","forEach","newX","newY","newZ","newColors","oldPosition","temp","positionChanged","move","fromPosition","toPosition","timestamp","Date","toISOString","setTimeout","scramble","moves","directions","scrambleSequence","i","floor","random","length","executeScramble","sequence","slice","reset","CubeGroup","isRotating","autoRotate","onScramble","onReset","onCubeStateChange","_s3","groupRef","rotationSpeed","current","ref","_c2","RubiksCube","_s4","camera","fov","style","width","height","intensity","angle","penumbra","castShadow","preset","enablePan","enableZoom","enableRotate","_c3","$RefreshReg$"],"sources":["C:/Repo/GitHub/rubiks-cube/src/components/RubiksCube.js"],"sourcesContent":["import React, { useState, useRef, useMemo, useCallback, useEffect } from 'react';\r\nimport { Canvas, useFrame } from '@react-three/fiber';\r\nimport { OrbitControls, Environment } from '@react-three/drei';\r\nimport * as THREE from 'three';\r\n\r\n// Function to create unique shapes for each piece\r\nfunction createShape(pieceId, size) {\r\n  const shapes = [\r\n    // 0-4: Basic geometric shapes (Squares)\r\n    () => <mesh position={[0, 0, 0.012]}><planeGeometry args={[size, size]} /><meshBasicMaterial color=\"red\" /></mesh>, // Square\r\n    () => <mesh position={[0, 0, 0.012]}><planeGeometry args={[size, size]} /><meshBasicMaterial color=\"blue\" /></mesh>, // Square\r\n    () => <mesh position={[0, 0, 0.012]}><planeGeometry args={[size, size]} /><meshBasicMaterial color=\"green\" /></mesh>, // Square\r\n    () => <mesh position={[0, 0, 0.012]}><planeGeometry args={[size, size]} /><meshBasicMaterial color=\"orange\" /></mesh>, // Square\r\n    () => <mesh position={[0, 0, 0.012]}><planeGeometry args={[size, size]} /><meshBasicMaterial color=\"purple\" /></mesh>, // Square\r\n\r\n    // 5-9: Circles\r\n    () => <mesh position={[0, 0, 0.012]}><circleGeometry args={[size/2, 32]} /><meshBasicMaterial color=\"red\" /></mesh>, // Circle\r\n    () => <mesh position={[0, 0, 0.012]}><circleGeometry args={[size/2, 32]} /><meshBasicMaterial color=\"blue\" /></mesh>, // Circle\r\n    () => <mesh position={[0, 0, 0.012]}><circleGeometry args={[size/2, 32]} /><meshBasicMaterial color=\"green\" /></mesh>, // Circle\r\n    () => <mesh position={[0, 0, 0.012]}><circleGeometry args={[size/2, 32]} /><meshBasicMaterial color=\"orange\" /></mesh>, // Circle\r\n    () => <mesh position={[0, 0, 0.012]}><circleGeometry args={[size/2, 32]} /><meshBasicMaterial color=\"purple\" /></mesh>, // Circle\r\n\r\n    // 10-14: Triangles (using planeGeometry for now, ideally custom geometry)\r\n    () => <mesh position={[0, 0, 0.012]}><planeGeometry args={[size, size]} /><meshBasicMaterial color=\"red\" /></mesh>, // Triangle\r\n    () => <mesh position={[0, 0, 0.012]}><planeGeometry args={[size, size]} /><meshBasicMaterial color=\"blue\" /></mesh>, // Triangle\r\n    () => <mesh position={[0, 0, 0.012]}><planeGeometry args={[size, size]} /><meshBasicMaterial color=\"green\" /></mesh>, // Triangle\r\n    () => <mesh position={[0, 0, 0.012]}><planeGeometry args={[size, size]} /><meshBasicMaterial color=\"orange\" /></mesh>, // Triangle\r\n    () => <mesh position={[0, 0, 0.012]}><planeGeometry args={[size, size]} /><meshBasicMaterial color=\"purple\" /></mesh>, // Triangle\r\n\r\n    // 15-19: Diamonds (rotated squares)\r\n    () => <group position={[0, 0, 0.012]}><mesh rotation={[0, 0, Math.PI/4]}><planeGeometry args={[size, size]} /><meshBasicMaterial color=\"red\" /></mesh></group>, // Diamond\r\n    () => <group position={[0, 0, 0.012]}><mesh rotation={[0, 0, Math.PI/4]}><planeGeometry args={[size, size]} /><meshBasicMaterial color=\"blue\" /></mesh></group>, // Diamond\r\n    () => <group position={[0, 0, 0.012]}><mesh rotation={[0, 0, Math.PI/4]}><planeGeometry args={[size, size]} /><meshBasicMaterial color=\"green\" /></mesh></group>, // Diamond\r\n    () => <group position={[0, 0, 0.012]}><mesh rotation={[0, 0, Math.PI/4]}><planeGeometry args={[size, size]} /><meshBasicMaterial color=\"orange\" /></mesh></group>, // Diamond\r\n    () => <group position={[0, 0, 0.012]}><mesh rotation={[0, 0, Math.PI/4]}><planeGeometry args={[size, size]} /><meshBasicMaterial color=\"purple\" /></mesh></group>, // Diamond\r\n\r\n    // 20-25: Complex patterns (Squares with white centers)\r\n    () => <group position={[0, 0, 0.012]}><mesh><planeGeometry args={[size, size]} /><meshBasicMaterial color=\"red\" /></mesh><mesh position={[0, 0, 0.001]}><planeGeometry args={[size*0.5, size*0.5]} /><meshBasicMaterial color=\"white\" /></mesh></group>, // Square with white center\r\n    () => <group position={[0, 0, 0.012]}><mesh><planeGeometry args={[size, size]} /><meshBasicMaterial color=\"blue\" /></mesh><mesh position={[0, 0, 0.001]}><planeGeometry args={[size*0.5, size*0.5]} /><meshBasicMaterial color=\"white\" /></mesh></group>, // Square with white center\r\n    () => <group position={[0, 0, 0.012]}><mesh><planeGeometry args={[size, size]} /><meshBasicMaterial color=\"green\" /></mesh><mesh position={[0, 0, 0.001]}><planeGeometry args={[size*0.5, size*0.5]} /><meshBasicMaterial color=\"white\" /></mesh></group>, // Square with white center\r\n    () => <group position={[0, 0, 0.012]}><mesh><planeGeometry args={[size, size]} /><meshBasicMaterial color=\"orange\" /></mesh><mesh position={[0, 0, 0.001]}><planeGeometry args={[size*0.5, size*0.5]} /><meshBasicMaterial color=\"white\" /></mesh></group>, // Square with white center\r\n    () => <group position={[0, 0, 0.012]}><mesh><planeGeometry args={[size, size]} /><meshBasicMaterial color=\"purple\" /></mesh><mesh position={[0, 0, 0.001]}><planeGeometry args={[size*0.5, size*0.5]} /><meshBasicMaterial color=\"white\" /></mesh></group>, // Square with white center\r\n    () => <group position={[0, 0, 0.012]}><mesh><planeGeometry args={[size, size]} /><meshBasicMaterial color=\"cyan\" /></mesh><mesh position={[0, 0, 0.001]}><planeGeometry args={[size*0.5, size*0.5]} /><meshBasicMaterial color=\"white\" /></mesh></group> // Square with white center\r\n  ];\r\n  \r\n  const shapeIndex = pieceId; // Changed from pieceId % shapes.length\r\n  return shapes[shapeIndex]();\r\n}\r\n\r\n// Individual cube piece component\r\nfunction CubePiece({ position, colors, size = 0.95, pieceId = 0 }) {\r\n  const meshRef = useRef();\r\n  \r\n  // Log piece information for debugging\r\n  React.useEffect(() => {\r\n    const shapeTypes = ['Square', 'Square', 'Square', 'Square', 'Square', 'Circle', 'Circle', 'Circle', 'Circle', 'Circle', 'Triangle', 'Triangle', 'Triangle', 'Triangle', 'Triangle', 'Diamond', 'Diamond', 'Diamond', 'Diamond', 'Diamond', 'Square+White', 'Square+White', 'Square+White', 'Square+White', 'Square+White', 'Square+White'];\r\n    const shapeColors = ['Red', 'Blue', 'Green', 'Orange', 'Purple', 'Red', 'Blue', 'Green', 'Orange', 'Purple', 'Red', 'Blue', 'Green', 'Orange', 'Purple', 'Red', 'Blue', 'Green', 'Orange', 'Purple', 'Red', 'Blue', 'Green', 'Orange', 'Purple', 'Cyan'];\r\n    \r\n    const shapeType = shapeTypes[pieceId] || 'Unknown'; // Changed from pieceId % shapeTypes.length\r\n    const shapeColor = shapeColors[pieceId] || 'Unknown'; // Changed from pieceId % shapeColors.length\r\n    \r\n    // Debug all pieces to see initial color assignment\r\n    console.log(`Piece ${pieceId}: ${shapeColor} ${shapeType} at position [${position.join(', ')}]`);\r\n    console.log(`  Stored Colors:`, colors);\r\n    \r\n    // Show what colors should be visible based on position\r\n    const [x, y, z] = position;\r\n    const visibleFaces = [];\r\n    if (x === 1) visibleFaces.push('right');\r\n    if (x === -1) visibleFaces.push('left');\r\n    if (y === 1) visibleFaces.push('top');\r\n    if (y === -1) visibleFaces.push('bottom');\r\n    if (z === 1) visibleFaces.push('front');\r\n    if (z === -1) visibleFaces.push('back');\r\n    \r\n    console.log(`  Visible faces:`, visibleFaces);\r\n    console.log(`  Colors on visible faces:`, visibleFaces.map(face => `${face}: ${colors[face]}`));\r\n  }, [pieceId, position, colors]);\r\n\r\n  // Color mapping\r\n  const colorMap = {\r\n    'white': '#FFFFFF',\r\n    'yellow': '#FFD700',\r\n    'red': '#FF0000',\r\n    'orange': '#FFA500',\r\n    'blue': '#0000FF',\r\n    'green': '#00FF00',\r\n    'black': '#000000'\r\n  };\r\n\r\n  // Create cube geometry\r\n  const cubeGeometry = useMemo(() => new THREE.BoxGeometry(size, size, size), [size]);\r\n  \r\n  // Create face geometry\r\n  const faceGeometry = useMemo(() => {\r\n    const geometry = new THREE.PlaneGeometry(size, size);\r\n    return geometry;\r\n  }, [size]);\r\n\r\n  // Get the color for a face based on the face index and position\r\n  const getFaceColor = (faceIndex) => {\r\n    const [x, y, z] = position;\r\n    \r\n    // Determine which faces are visible based on position\r\n    const visibleFaces = [];\r\n    if (x === 1) visibleFaces.push(2); // Right face visible\r\n    if (x === -1) visibleFaces.push(3); // Left face visible\r\n    if (y === 1) visibleFaces.push(4); // Top face visible\r\n    if (y === -1) visibleFaces.push(5); // Bottom face visible\r\n    if (z === 1) visibleFaces.push(0); // Front face visible\r\n    if (z === -1) visibleFaces.push(1); // Back face visible\r\n    \r\n    // If this face is not visible, return black\r\n    if (!visibleFaces.includes(faceIndex)) {\r\n      return 'black';\r\n    }\r\n    \r\n    // Map face index to color property\r\n    let faceColor;\r\n    switch (faceIndex) {\r\n      case 0: faceColor = colors.front; break;  // Front face\r\n      case 1: faceColor = colors.back; break;   // Back face\r\n      case 2: faceColor = colors.right; break;  // Right face\r\n      case 3: faceColor = colors.left; break;   // Left face\r\n      case 4: faceColor = colors.top; break;    // Top face\r\n      case 5: faceColor = colors.bottom; break; // Bottom face\r\n      default: faceColor = 'black';\r\n    }\r\n    \r\n    return faceColor;\r\n  };\r\n\r\n  return (\r\n    <group position={position}>\r\n      {/* Solid cube base */}\r\n      <mesh geometry={cubeGeometry}>\r\n        <meshPhongMaterial color=\"#333333\" />\r\n      </mesh>\r\n      \r\n      {/* Colored faces */}\r\n      {[0, 1, 2, 3, 4, 5].map((faceIndex) => {\r\n        const faceColor = getFaceColor(faceIndex);\r\n        const facePosition = [\r\n          faceIndex === 2 ? size/2 + 0.001 : faceIndex === 3 ? -size/2 - 0.001 : 0,\r\n          faceIndex === 4 ? size/2 + 0.001 : faceIndex === 5 ? -size/2 - 0.001 : 0,\r\n          faceIndex === 0 ? size/2 + 0.001 : faceIndex === 1 ? -size/2 - 0.001 : 0\r\n        ];\r\n        \r\n        const faceRotation = [\r\n          faceIndex === 4 ? Math.PI/2 : faceIndex === 5 ? -Math.PI/2 : 0,\r\n          faceIndex === 2 ? Math.PI/2 : faceIndex === 3 ? -Math.PI/2 : 0,\r\n          0\r\n        ];\r\n        \r\n        return (\r\n          <mesh\r\n            key={faceIndex}\r\n            position={facePosition}\r\n            rotation={faceRotation}\r\n            geometry={faceGeometry}\r\n          >\r\n            <meshPhongMaterial \r\n              color={colorMap[faceColor] || '#000000'} \r\n              side={THREE.FrontSide}\r\n              emissive={colorMap[faceColor] || '#000000'}\r\n              emissiveIntensity={0.3}\r\n            />\r\n          </mesh>\r\n        );\r\n      })}\r\n      \r\n      {/* Debug shape on all faces */}\r\n      {[0, 1, 2, 3, 4, 5].map((faceIndex) => {\r\n        const facePosition = [\r\n          faceIndex === 2 ? size/2 + 0.002 : faceIndex === 3 ? -size/2 - 0.002 : 0,\r\n          faceIndex === 4 ? size/2 + 0.002 : faceIndex === 5 ? -size/2 - 0.002 : 0,\r\n          faceIndex === 0 ? size/2 + 0.002 : faceIndex === 1 ? -size/2 - 0.002 : 0\r\n        ];\r\n        \r\n        const faceRotation = [\r\n          faceIndex === 4 ? Math.PI/2 : faceIndex === 5 ? -Math.PI/2 : 0,\r\n          faceIndex === 2 ? Math.PI/2 : faceIndex === 3 ? -Math.PI/2 : 0,\r\n          0\r\n        ];\r\n        \r\n        return (\r\n          <group key={`shape-${faceIndex}`} position={facePosition} rotation={faceRotation}>\r\n            {createShape(pieceId, size * 0.3)}\r\n          </group>\r\n        );\r\n      })}\r\n    </group>\r\n  );\r\n}\r\n\r\n// Custom hook for cube state management\r\nfunction useCubeState() {\r\n  const [cubeState, setCubeState] = useState(() => {\r\n    const state = [];\r\n    \r\n    // Create 26 pieces (3x3x3 minus center)\r\n    for (let x = -1; x <= 1; x++) {\r\n      for (let y = -1; y <= 1; y++) {\r\n        for (let z = -1; z <= 1; z++) {\r\n          // Skip the center piece\r\n          if (x === 0 && y === 0 && z === 0) continue;\r\n          \r\n          // Determine piece type and assign colors accordingly\r\n          let colors = {\r\n            front: 'black',\r\n            back: 'black', \r\n            right: 'black',\r\n            left: 'black',\r\n            top: 'black',\r\n            bottom: 'black'\r\n          };\r\n          \r\n          // Assign colors based on piece position in solved state\r\n          // Only assign colors to faces that are visible (not internal)\r\n          if (x === -1) colors.left = 'orange';\r\n          if (x === 1) colors.right = 'red';\r\n          if (y === -1) colors.bottom = 'green';\r\n          if (y === 1) colors.top = 'blue';\r\n          if (z === -1) colors.back = 'yellow';\r\n          if (z === 1) colors.front = 'white';\r\n          \r\n          state.push({ \r\n            position: [x, y, z], \r\n            colors,\r\n            rotationHistory: [] // Track all rotations this piece has undergone\r\n          });\r\n        }\r\n      }\r\n    }\r\n    \r\n    return state;\r\n  });\r\n\r\n  const [isAnimating, setIsAnimating] = useState(false);\r\n\r\n  // Rotate a face of the cube\r\n  const rotateFace = useCallback((face, direction) => {\r\n    if (isAnimating) return;\r\n    \r\n    setIsAnimating(true);\r\n    \r\n    setCubeState(prevState => {\r\n      const newState = [...prevState];\r\n      const pieces = newState.map((piece, index) => ({ ...piece, pieceId: index }));\r\n      \r\n      // Apply rotation to pieces on the specified face\r\n      pieces.forEach(piece => {\r\n        const [x, y, z] = piece.position;\r\n        let newX = x, newY = y, newZ = z;\r\n        let newColors = { ...piece.colors }; // Keep original colors for comparison\r\n        \r\n        // Debug purple diamond piece 19 and green diamond piece 17\r\n        if (piece.pieceId === 19 || piece.pieceId === 17) {\r\n          console.log(`🔄 BEFORE ${face} rotation - Piece ${piece.pieceId} at [${x}, ${y}, ${z}]:`, newColors);\r\n        }\r\n        \r\n        // Store original position for color mapping\r\n        const oldPosition = [x, y, z];\r\n        \r\n        // Apply 3D transformation first\r\n        switch (face) {\r\n          case 'F': // Front face rotation\r\n            if (z === 1) { // Only pieces on the front face\r\n              if (direction === 'clockwise') {\r\n                newX = -y;\r\n                newY = x;\r\n                // 3D color rotation: when piece rotates around Z-axis clockwise\r\n                // Colors rotate in the XY plane: top->right, right->bottom, bottom->left, left->top\r\n                const temp = newColors.top;\r\n                newColors.top = newColors.left;\r\n                newColors.left = newColors.bottom;\r\n                newColors.bottom = newColors.right;\r\n                newColors.right = temp;\r\n              } else {\r\n                newX = y;\r\n                newY = -x;\r\n                // 3D color rotation: when piece rotates around Z-axis counterclockwise\r\n                // Colors rotate in the XY plane: top->left, left->bottom, bottom->right, right->top\r\n                const temp = newColors.top;\r\n                newColors.top = newColors.right;\r\n                newColors.right = newColors.bottom;\r\n                newColors.bottom = newColors.left;\r\n                newColors.left = temp;\r\n              }\r\n            }\r\n            break;\r\n          case 'B': // Back face rotation\r\n            if (z === -1) { // Only pieces on the back face\r\n              if (direction === 'clockwise') {\r\n                newX = y;\r\n                newY = -x;\r\n                // 3D color rotation: when piece rotates around Z-axis clockwise (back face)\r\n                // Colors rotate in the XY plane: top->right, right->bottom, bottom->left, left->top\r\n                const temp = newColors.top;\r\n                newColors.top = newColors.left;\r\n                newColors.left = newColors.bottom;\r\n                newColors.bottom = newColors.right;\r\n                newColors.right = temp;\r\n              } else {\r\n                newX = -y;\r\n                newY = x;\r\n                // 3D color rotation: when piece rotates around Z-axis counterclockwise (back face)\r\n                // Colors rotate in the XY plane: top->left, left->bottom, bottom->right, right->top\r\n                const temp = newColors.top;\r\n                newColors.top = newColors.right;\r\n                newColors.right = newColors.bottom;\r\n                newColors.bottom = newColors.left;\r\n                newColors.left = temp;\r\n              }\r\n            }\r\n            break;\r\n          case 'R': // Right face rotation\r\n            if (x === 1) { // Only pieces on the right face\r\n              if (direction === 'clockwise') {\r\n                newZ = -y;\r\n                newY = z;\r\n                // 3D color rotation: when piece rotates around X-axis clockwise\r\n                // Colors rotate in the YZ plane: top->front, front->bottom, bottom->back, back->top\r\n                const temp = newColors.top;\r\n                newColors.top = newColors.back;\r\n                newColors.back = newColors.bottom;\r\n                newColors.bottom = newColors.front;\r\n                newColors.front = temp;\r\n              } else {\r\n                newZ = y;\r\n                newY = -z;\r\n                // 3D color rotation: when piece rotates around X-axis counterclockwise\r\n                // Colors rotate in the YZ plane: top->back, back->bottom, bottom->front, front->top\r\n                const temp = newColors.top;\r\n                newColors.top = newColors.front;\r\n                newColors.front = newColors.bottom;\r\n                newColors.bottom = newColors.back;\r\n                newColors.back = temp;\r\n              }\r\n            }\r\n            break;\r\n          case 'L': // Left face rotation\r\n            if (x === -1) { // Only pieces on the left face\r\n              if (direction === 'clockwise') {\r\n                newZ = y;\r\n                newY = -z;\r\n                // 3D color rotation: when piece rotates around X-axis clockwise (left face)\r\n                // Colors rotate in the YZ plane: top->back, back->bottom, bottom->front, front->top\r\n                const temp = newColors.top;\r\n                newColors.top = newColors.front;\r\n                newColors.front = newColors.bottom;\r\n                newColors.bottom = newColors.back;\r\n                newColors.back = temp;\r\n              } else {\r\n                newZ = -y;\r\n                newY = z;\r\n                // 3D color rotation: when piece rotates around X-axis counterclockwise (left face)\r\n                // Colors rotate in the YZ plane: top->front, front->bottom, bottom->back, back->top\r\n                const temp = newColors.top;\r\n                newColors.top = newColors.back;\r\n                newColors.back = newColors.bottom;\r\n                newColors.bottom = newColors.front;\r\n                newColors.front = temp;\r\n              }\r\n            }\r\n            break;\r\n          case 'U': // Up face rotation\r\n            if (y === 1) { // Only pieces on the top face\r\n              if (direction === 'clockwise') {\r\n                newX = z;\r\n                newZ = -x;\r\n                // 3D color rotation: when piece rotates around Y-axis clockwise\r\n                // Colors rotate in the XZ plane: front->right, right->back, back->left, left->front\r\n                const temp = newColors.front;\r\n                newColors.front = newColors.left;\r\n                newColors.left = newColors.back;\r\n                newColors.back = newColors.right;\r\n                newColors.right = temp;\r\n              } else {\r\n                newX = -z;\r\n                newZ = x;\r\n                // 3D color rotation: when piece rotates around Y-axis counterclockwise\r\n                // Colors rotate in the XZ plane: front->left, left->back, back->right, right->front\r\n                const temp = newColors.front;\r\n                newColors.front = newColors.right;\r\n                newColors.right = newColors.back;\r\n                newColors.back = newColors.left;\r\n                newColors.left = temp;\r\n              }\r\n            }\r\n            break;\r\n          case 'D': // Down face rotation\r\n            if (y === -1) { // Only pieces on the bottom face\r\n              if (direction === 'clockwise') {\r\n                newX = -z;\r\n                newZ = x;\r\n                // 3D color rotation: when piece rotates around Y-axis clockwise (down face)\r\n                // Colors rotate in the XZ plane: front->left, left->back, back->right, right->front\r\n                const temp = newColors.front;\r\n                newColors.front = newColors.right;\r\n                newColors.right = newColors.back;\r\n                newColors.back = newColors.left;\r\n                newColors.left = temp;\r\n              } else {\r\n                newX = z;\r\n                newZ = -x;\r\n                // 3D color rotation: when piece rotates around Y-axis counterclockwise (down face)\r\n                // Colors rotate in the XZ plane: front->right, right->back, back->left, left->front\r\n                const temp = newColors.front;\r\n                newColors.front = newColors.left;\r\n                newColors.left = newColors.back;\r\n                newColors.back = newColors.right;\r\n                newColors.right = temp;\r\n              }\r\n            }\r\n            break;\r\n        }\r\n        \r\n        // Only apply color rotation if the piece actually moved\r\n        const positionChanged = (x !== newX || y !== newY || z !== newZ);\r\n        \r\n        // Debug purple diamond piece 19 and green diamond piece 17\r\n        if (piece.pieceId === 19 || piece.pieceId === 17) {\r\n          console.log(`🔄 AFTER ${face} rotation - Piece ${piece.pieceId} at [${newX}, ${newY}, ${newZ}]:`, newColors);\r\n          console.log(`  Position changed: ${positionChanged}`);\r\n        }\r\n        \r\n        piece.position = [newX, newY, newZ];\r\n        \r\n        // Only apply color rotation if the piece actually moved\r\n        if (positionChanged) {\r\n          // Apply the color rotation that was calculated in the switch statement\r\n          piece.colors = newColors;\r\n          piece.rotationHistory.push({\r\n            move: face,\r\n            direction: direction,\r\n            fromPosition: [x, y, z],\r\n            toPosition: [newX, newY, newZ],\r\n            timestamp: new Date().toISOString()\r\n          });\r\n        }\r\n      });\r\n\r\n      return newState;\r\n    });\r\n    \r\n    // Reset animation state after a short delay\r\n    setTimeout(() => setIsAnimating(false), 100);\r\n  }, [isAnimating]);\r\n\r\n  // Scramble the cube\r\n  const scramble = useCallback(() => {\r\n    if (isAnimating) return;\r\n    \r\n    setIsAnimating(true);\r\n    \r\n    const moves = ['F', 'B', 'R', 'L', 'U', 'D'];\r\n    const directions = ['clockwise', 'counterclockwise'];\r\n    const scrambleSequence = [];\r\n    \r\n    // Generate 20 random moves\r\n    for (let i = 0; i < 20; i++) {\r\n      const move = moves[Math.floor(Math.random() * moves.length)];\r\n      const direction = directions[Math.floor(Math.random() * directions.length)];\r\n      scrambleSequence.push({ move, direction });\r\n    }\r\n    \r\n    console.log('Scrambling with sequence:', scrambleSequence);\r\n    \r\n    // Execute scramble moves\r\n    executeScramble(scrambleSequence);\r\n  }, [isAnimating]);\r\n\r\n  // Execute scramble sequence\r\n  const executeScramble = useCallback((sequence) => {\r\n    if (sequence.length === 0) {\r\n      setIsAnimating(false);\r\n      return;\r\n    }\r\n    \r\n    const { move, direction } = sequence[0];\r\n    console.log(`Executing move: ${move} ${direction}`);\r\n    \r\n    // Apply the move\r\n    setCubeState(prevState => {\r\n      const newState = [...prevState];\r\n      const pieces = newState.map((piece, index) => ({ ...piece, pieceId: index }));\r\n      \r\n      // Apply rotation to pieces on the specified face\r\n      pieces.forEach(piece => {\r\n        const [x, y, z] = piece.position;\r\n        let newX = x, newY = y, newZ = z;\r\n        let newColors = { ...piece.colors }; // Keep original colors for comparison\r\n        \r\n        // Debug purple diamond piece 19 and green diamond piece 17 in executeScramble\r\n        if (piece.pieceId === 19 || piece.pieceId === 17) {\r\n          console.log(`🎲 BEFORE ${move} move - Piece ${piece.pieceId}:`, newColors);\r\n        }\r\n        \r\n        switch (move) {\r\n          case 'F': // Front face rotation\r\n            if (z === 1) { // Only pieces on the front face\r\n              if (direction === 'clockwise') {\r\n                newX = -y;\r\n                newY = x;\r\n                // 3D color rotation: when piece rotates around Z-axis clockwise\r\n                // Colors rotate in the XY plane: top->right, right->bottom, bottom->left, left->top\r\n                const temp = newColors.top;\r\n                newColors.top = newColors.left;\r\n                newColors.left = newColors.bottom;\r\n                newColors.bottom = newColors.right;\r\n                newColors.right = temp;\r\n              } else {\r\n                newX = y;\r\n                newY = -x;\r\n                // 3D color rotation: when piece rotates around Z-axis counterclockwise\r\n                // Colors rotate in the XY plane: top->left, left->bottom, bottom->right, right->top\r\n                const temp = newColors.top;\r\n                newColors.top = newColors.right;\r\n                newColors.right = newColors.bottom;\r\n                newColors.bottom = newColors.left;\r\n                newColors.left = temp;\r\n              }\r\n            }\r\n            break;\r\n          case 'B': // Back face rotation\r\n            if (z === -1) { // Only pieces on the back face\r\n              if (direction === 'clockwise') {\r\n                newX = y;\r\n                newY = -x;\r\n                // 3D color rotation: when piece rotates around Z-axis clockwise (back face)\r\n                // Colors rotate in the XY plane: top->right, right->bottom, bottom->left, left->top\r\n                const temp = newColors.top;\r\n                newColors.top = newColors.left;\r\n                newColors.left = newColors.bottom;\r\n                newColors.bottom = newColors.right;\r\n                newColors.right = temp;\r\n              } else {\r\n                newX = -y;\r\n                newY = x;\r\n                // 3D color rotation: when piece rotates around Z-axis counterclockwise (back face)\r\n                // Colors rotate in the XY plane: top->left, left->bottom, bottom->right, right->top\r\n                const temp = newColors.top;\r\n                newColors.top = newColors.right;\r\n                newColors.right = newColors.bottom;\r\n                newColors.bottom = newColors.left;\r\n                newColors.left = temp;\r\n              }\r\n            }\r\n            break;\r\n          case 'R': // Right face rotation\r\n            if (x === 1) { // Only pieces on the right face\r\n              if (direction === 'clockwise') {\r\n                newZ = -y;\r\n                newY = z;\r\n                // 3D color rotation: when piece rotates around X-axis clockwise\r\n                // Colors rotate in the YZ plane: top->front, front->bottom, bottom->back, back->top\r\n                const temp = newColors.top;\r\n                newColors.top = newColors.back;\r\n                newColors.back = newColors.bottom;\r\n                newColors.bottom = newColors.front;\r\n                newColors.front = temp;\r\n              } else {\r\n                newZ = y;\r\n                newY = -z;\r\n                // 3D color rotation: when piece rotates around X-axis counterclockwise\r\n                // Colors rotate in the YZ plane: top->back, back->bottom, bottom->front, front->top\r\n                const temp = newColors.top;\r\n                newColors.top = newColors.front;\r\n                newColors.front = newColors.bottom;\r\n                newColors.bottom = newColors.back;\r\n                newColors.back = temp;\r\n              }\r\n            }\r\n            break;\r\n          case 'L': // Left face rotation\r\n            if (x === -1) { // Only pieces on the left face\r\n              if (direction === 'clockwise') {\r\n                newZ = y;\r\n                newY = -z;\r\n                // 3D color rotation: when piece rotates around X-axis clockwise (left face)\r\n                // Colors rotate in the YZ plane: top->back, back->bottom, bottom->front, front->top\r\n                const temp = newColors.top;\r\n                newColors.top = newColors.front;\r\n                newColors.front = newColors.bottom;\r\n                newColors.bottom = newColors.back;\r\n                newColors.back = temp;\r\n              } else {\r\n                newZ = -y;\r\n                newY = z;\r\n                // 3D color rotation: when piece rotates around X-axis counterclockwise (left face)\r\n                // Colors rotate in the YZ plane: top->front, front->bottom, bottom->back, back->top\r\n                const temp = newColors.top;\r\n                newColors.top = newColors.back;\r\n                newColors.back = newColors.bottom;\r\n                newColors.bottom = newColors.front;\r\n                newColors.front = temp;\r\n              }\r\n            }\r\n            break;\r\n          case 'U': // Up face rotation\r\n            if (y === 1) { // Only pieces on the top face\r\n              if (direction === 'clockwise') {\r\n                newX = z;\r\n                newZ = -x;\r\n                // 3D color rotation: when piece rotates around Y-axis clockwise\r\n                // Colors rotate in the XZ plane: front->right, right->back, back->left, left->front\r\n                const temp = newColors.front;\r\n                newColors.front = newColors.left;\r\n                newColors.left = newColors.back;\r\n                newColors.back = newColors.right;\r\n                newColors.right = temp;\r\n              } else {\r\n                newX = -z;\r\n                newZ = x;\r\n                // 3D color rotation: when piece rotates around Y-axis counterclockwise\r\n                // Colors rotate in the XZ plane: front->left, left->back, back->right, right->front\r\n                const temp = newColors.front;\r\n                newColors.front = newColors.right;\r\n                newColors.right = newColors.back;\r\n                newColors.back = newColors.left;\r\n                newColors.left = temp;\r\n              }\r\n            }\r\n            break;\r\n          case 'D': // Down face rotation\r\n            if (y === -1) { // Only pieces on the bottom face\r\n              if (direction === 'clockwise') {\r\n                newX = -z;\r\n                newZ = x;\r\n                // 3D color rotation: when piece rotates around Y-axis clockwise (down face)\r\n                // Colors rotate in the XZ plane: front->left, left->back, back->right, right->front\r\n                const temp = newColors.front;\r\n                newColors.front = newColors.right;\r\n                newColors.right = newColors.back;\r\n                newColors.back = newColors.left;\r\n                newColors.left = temp;\r\n              } else {\r\n                newX = z;\r\n                newZ = -x;\r\n                // 3D color rotation: when piece rotates around Y-axis counterclockwise (down face)\r\n                // Colors rotate in the XZ plane: front->right, right->back, back->left, left->front\r\n                const temp = newColors.front;\r\n                newColors.front = newColors.left;\r\n                newColors.left = newColors.back;\r\n                newColors.back = newColors.right;\r\n                newColors.right = temp;\r\n              }\r\n            }\r\n            break;\r\n        }\r\n        \r\n        // Only apply color rotation if the piece actually moved\r\n        const positionChanged = (x !== newX || y !== newY || z !== newZ);\r\n        \r\n        // Debug purple diamond piece 19 and green diamond piece 17 in executeScramble\r\n        if (piece.pieceId === 19 || piece.pieceId === 17) {\r\n          console.log(`🎲 AFTER ${move} move - Piece ${piece.pieceId}:`, newColors);\r\n          console.log(`  Position changed: ${positionChanged}`);\r\n        }\r\n        \r\n        piece.position = [newX, newY, newZ];\r\n        \r\n        // Only apply color rotation if the piece actually moved\r\n        if (positionChanged) {\r\n          // Apply the color rotation that was calculated in the switch statement\r\n          piece.colors = newColors;\r\n          piece.rotationHistory.push({\r\n            move: move,\r\n            direction: direction,\r\n            fromPosition: [x, y, z],\r\n            toPosition: [newX, newY, newZ],\r\n            timestamp: new Date().toISOString()\r\n          });\r\n        }\r\n      });\r\n\r\n      return newState;\r\n    });\r\n    \r\n    // Continue with next move after a short delay\r\n    setTimeout(() => executeScramble(sequence.slice(1)), 100);\r\n  }, []);\r\n\r\n  // Reset the cube to solved state\r\n  const reset = useCallback(() => {\r\n    setCubeState(() => {\r\n      const state = [];\r\n      \r\n      // Create 26 pieces (3x3x3 minus center)\r\n      for (let x = -1; x <= 1; x++) {\r\n        for (let y = -1; y <= 1; y++) {\r\n          for (let z = -1; z <= 1; z++) {\r\n            // Skip the center piece\r\n            if (x === 0 && y === 0 && z === 0) continue;\r\n            \r\n            // Determine piece type and assign colors accordingly\r\n            let colors = {\r\n              front: 'black',\r\n              back: 'black', \r\n              right: 'black',\r\n              left: 'black',\r\n              top: 'black',\r\n              bottom: 'black'\r\n            };\r\n            \r\n            // Assign colors based on piece position in solved state\r\n            // Only assign colors to faces that are visible (not internal)\r\n            if (x === -1) colors.left = 'orange';\r\n            if (x === 1) colors.right = 'red';\r\n            if (y === -1) colors.bottom = 'green';\r\n            if (y === 1) colors.top = 'blue';\r\n            if (z === -1) colors.back = 'yellow';\r\n            if (z === 1) colors.front = 'white';\r\n            \r\n            state.push({ \r\n              position: [x, y, z], \r\n              colors,\r\n              rotationHistory: [] // Reset rotation history\r\n            });\r\n          }\r\n        }\r\n      }\r\n      \r\n      return state;\r\n    });\r\n  }, []);\r\n\r\n  return {\r\n    cubeState,\r\n    isAnimating,\r\n    rotateFace,\r\n    scramble,\r\n    reset\r\n  };\r\n}\r\n\r\n// Main cube group component with enhanced structure\r\nfunction CubeGroup({ isRotating, autoRotate = false, onScramble, onReset, onCubeStateChange }) {\r\n  const groupRef = useRef();\r\n  const [rotationSpeed] = useState({ x: 0.005, y: 0.01 });\r\n  \r\n  const { cubeState, isAnimating, rotateFace, scramble, reset } = useCubeState();\r\n  \r\n  // Expose functions to parent\r\n  React.useEffect(() => {\r\n    if (onScramble) onScramble(scramble);\r\n    if (onReset) onReset(reset);\r\n  }, [onScramble, onReset, scramble, reset]);\r\n  \r\n  // Notify parent of cube state changes\r\n  React.useEffect(() => {\r\n    if (onCubeStateChange && cubeState) {\r\n      onCubeStateChange(cubeState);\r\n    }\r\n  }, [onCubeStateChange, cubeState]);\r\n\r\n  // Auto-rotation animation\r\n  useFrame(() => {\r\n    if (groupRef.current && isRotating && !isAnimating) {\r\n      groupRef.current.rotation.x += rotationSpeed.x;\r\n      groupRef.current.rotation.y += rotationSpeed.y;\r\n    }\r\n  });\r\n\r\n  return (\r\n    <group ref={groupRef}>\r\n      {cubeState.map((piece, index) => (\r\n        <CubePiece\r\n          key={index}\r\n          position={piece.position}\r\n          colors={piece.colors}\r\n          pieceId={index}\r\n        />\r\n      ))}\r\n    </group>\r\n  );\r\n}\r\n\r\n// Main Rubik's Cube component\r\nfunction RubiksCube({ isRotating, autoRotate = false, onScramble, onReset, onCubeStateChange }) {\r\n  const groupRef = useRef();\r\n  const [rotationSpeed] = useState({ x: 0.005, y: 0.01 });\r\n  \r\n  const { cubeState, isAnimating, rotateFace, scramble, reset } = useCubeState();\r\n  \r\n  // Expose functions to parent\r\n  React.useEffect(() => {\r\n    if (onScramble) onScramble(scramble);\r\n    if (onReset) onReset(reset);\r\n  }, [onScramble, onReset, scramble, reset]);\r\n  \r\n  // Notify parent of cube state changes\r\n  React.useEffect(() => {\r\n    if (onCubeStateChange && cubeState) {\r\n      onCubeStateChange(cubeState);\r\n    }\r\n  }, [onCubeStateChange, cubeState]);\r\n\r\n  return (\r\n    <Canvas\r\n      camera={{ position: [5, 5, 5], fov: 50 }}\r\n      style={{ width: '100%', height: '100%' }}\r\n    >\r\n      {/* Enhanced lighting setup */}\r\n      <ambientLight intensity={1.2} />\r\n      <directionalLight position={[10, 10, 5]} intensity={3.0} />\r\n      <pointLight position={[10, 10, 10]} intensity={2.0} />\r\n      <pointLight position={[-10, -10, -10]} intensity={2.0} />\r\n      <spotLight\r\n        position={[0, 10, 0]}\r\n        angle={0.3}\r\n        penumbra={1}\r\n        intensity={2.0}\r\n        castShadow\r\n      />\r\n      \r\n      {/* Environment for better lighting */}\r\n      <Environment preset=\"sunset\" />\r\n      \r\n      <CubeGroup \r\n        isRotating={isRotating} \r\n        autoRotate={autoRotate}\r\n        onScramble={onScramble}\r\n        onReset={onReset}\r\n        onCubeStateChange={onCubeStateChange}\r\n      />\r\n      \r\n      <OrbitControls enablePan={true} enableZoom={true} enableRotate={true} />\r\n    </Canvas>\r\n  );\r\n}\r\n\r\nexport default RubiksCube;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}